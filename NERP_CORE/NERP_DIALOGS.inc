/*            *
* DOBRODOSLI NAM NA...       *
* ------------- Nova Era RolePlay!
*       *       =====================
*____________________________________*
*
* OMOGUCIO SVE OVO: Skopsi
*                           *
* Verzija: pogledati #DEFINE NERP_VERZIJA    *
*                             *
* Developer: DEntisT_and_Brace
*               *
* Zadnji update: 22.01.2021      *
*
* Mapper: Mata | Vlasnik: Skopsi          *
*                   *
*/

#if INCLUDE_NERP_MODULES == 0
	#endinput
#endif

public OnDialogResponse( playerid, dialogid, response, listitem, inputtext[])
{
	if( PlayerInfo[ playerid ][ xRegistrovan ] != 1 )
	{
		PlayerTextDrawShow(playerid,Regtd21[playerid]);
		PlayerTextDrawShow(playerid,Regtd22[playerid]);
		PlayerTextDrawShow(playerid,Regtd23[playerid]);
		PlayerTextDrawShow(playerid,Regtd24[playerid]);
		PlayerTextDrawShow(playerid,Regtd25[playerid]);
		PlayerTextDrawShow(playerid,Regtd26[playerid]);
		hidetdtd(playerid);
	}
	//PlayerTextDrawSetSelectable(playerid, Regtd28[playerid], true);
	new dStyle = DSL;
	if(strfind(inputtext, "%", true) != -1 || strfind(inputtext, "#", true) != -1)
	{
		SendClientMessagee( playerid, CRVENA, "Uneli ste format koji server ne podrzava!");
		return 1;
	}
	PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);
	////////////////////////////////////////////////////////////////////////////
	if(dialogid == 764) // MAIN DIALOG
	{
		SetTimerEx( "Login", 100, false, "d", playerid );
	}
	if( dialogid == dialog_LOGIN ) 
	{
		if( !response ) return Kick( playerid );
		if( response ) {
			if( !strcmp( inputtext, PlayerInfo[ playerid ][ xLozinka ], false ) && !isnull( inputtext ) ) {
				INI_ParseFile( Korisnici( playerid ), "OcitajKorisnika", .bExtra = true, .extra = playerid );

				if(PlayerInfo[playerid][xBanovan] == 1)
				{
					LoginTDControl(playerid, false);
					TogHud[ playerid ] = false;

					TogPlayerHud(playerid);
					ShowLogo(playerid);
					return BanTextDrawControl(playerid, true);
				}

				if( PlayerInfo[playerid][xPin] != 0 )
				{
					ShowPlayerDialog(playerid,dialog_PIN,DSI,
						"Nova Era | Sigurnosni PIN","Da bi ste nastavili dalje, unesite Vas Nova Era sigurnosni pin kod.\n\nUkoliko to ne uradite ili odaberete 'Izlaz' - dobiti cete kick!\nImate 15s da unesete pin.",
						"Unesi","Izlaz");

					PinDur[playerid] = SetTimerEx("nsdunep",15000,0,"i",playerid);
				}

				PlayerInfo[playerid][xgms] = 0;

				p_gamemodetd[0][playerid] = CreatePlayerTextDraw(playerid, 102.117622, 306.833312, "DEFAULT: RolePlay");
				PlayerTextDrawLetterSize(playerid, p_gamemodetd[0][playerid], 0.236823, 1.104165);
				PlayerTextDrawAlignment(playerid, p_gamemodetd[0][playerid], 2);
				PlayerTextDrawColor(playerid, p_gamemodetd[0][playerid], -1);
				PlayerTextDrawSetShadow(playerid, p_gamemodetd[0][playerid], 0);
				PlayerTextDrawSetOutline(playerid, p_gamemodetd[0][playerid], 1);
				PlayerTextDrawBackgroundColor(playerid, p_gamemodetd[0][playerid], 51);
				PlayerTextDrawFont(playerid, p_gamemodetd[0][playerid], 2);
				PlayerTextDrawSetProportional(playerid, p_gamemodetd[0][playerid], 1);
				PlayerTextDrawSetSelectable(playerid, p_gamemodetd[0][playerid], true);

				p_gamemodetd[1][playerid] = CreatePlayerTextDraw(playerid, 510.117645, 182.583343, "LD_BEAT:CHIT");
				PlayerTextDrawLetterSize(playerid, p_gamemodetd[1][playerid], 0.000000, 0.000000);
				PlayerTextDrawTextSize(playerid, p_gamemodetd[1][playerid], 11.294100, 30.333328);
				PlayerTextDrawAlignment(playerid, p_gamemodetd[1][playerid], 1);
				PlayerTextDrawColor(playerid, p_gamemodetd[1][playerid], -16776961);
				PlayerTextDrawSetShadow(playerid, p_gamemodetd[1][playerid], 0);
				PlayerTextDrawSetOutline(playerid, p_gamemodetd[1][playerid], 0);
				PlayerTextDrawFont(playerid, p_gamemodetd[1][playerid], 4);
				PlayerTextDrawSetSelectable(playerid, p_gamemodetd[1][playerid], true);

				TextDrawHideForPlayer(playerid,moneytd0); // radi buga
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);

				showgmtd(playerid);
				SelectTextDraw(playerid, tdboja);

				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);
				TextDrawHideForPlayer(playerid,moneytd0);
				TextDrawHideForPlayer(playerid,moneytd1);

				PlayerTextDrawSetString(playerid, p_gamemodetd[0][playerid], "DEFAULT: RolePlay");
				PlayerTextDrawShow(playerid, p_gamemodetd[0][playerid]);
				PlayerTextDrawShow(playerid, p_gamemodetd[0][playerid]);
				PlayerTextDrawShow(playerid, p_gamemodetd[0][playerid]);
			}
			else
			{
				if( PokusajLogina[ playerid ] == MAX_POKUSAJ_LOGINA - 1 )
				{
					format( globalstring, sizeof( globalstring ), "Pogrijesili ste vasu lozinku %d puta i izbaceni ste sa servera!", MAX_POKUSAJ_LOGINA );
					SendClientMessagee( playerid, CRVENA, globalstring);
					Kick( playerid );
					return true;
				}
				PokusajLogina[ playerid ]++;
				//SendClientMessage( playerid, CRVENA, "Kriva lozinka!" );
				announcement(playerid, "~r~Kriva lozinka!");
				//format( sDStrg, sizeof( sDStrg ), DialogTekstovi[ 0 ], MAX_POKUSAJ_LOGINA );
				//ShowPlayerDialog( playerid, dialog_LOGIN, DSP, D_NASLOV, sDStrg, D_ODABERI, D_ODUSTANI );
				new logg[400];
				format(logg,sizeof(logg),"{FFFFFF}Dobrodosli na "col_balkanstory"Nova Era - RolePlay!\n\n"col_balkanstory"||------------------------------------------------------------||\n\n"col_balkanstory"-Vase Ime: {FFFFFF}%s\n\n"col_balkanstory"-Discord: {FFFFFF}USKORO\n\n"col_balkanstory"-Account: {FFFFFF}Vas account je registrovan\n\n"col_balkanstory"-Unesite vas {FFFFFF}password!\n\n"col_balkanstory"||------------------------------------------------------------||",ImeIgraca(playerid));
				ShowPlayerDialog(playerid,dialog_LOGIN, DSP, "Nova Era | Account login",logg, "Prijava", "Odustani");
				
				
			}
		}
		return true;
	}
	else if( dialogid == dialog_REGISTER ) {
		if( !response ) return 1;
		if( response ) {
			if( strlen( inputtext ) < 6 || strlen(inputtext) > 20 ) {
				ShowPlayerDialog( playerid, dialog_REGISTER, DSI, "Registracija", "Password moze sadrzavati minimalno 6 a maximalno 24 znaka", "Registruj", "Izlaz");
				hidesrtd(playerid);
				return 1;
			}
			else {
				strmid( PlayerInfo[ playerid ][ xLozinka ], inputtext, 0, strlen( inputtext ), 50);
				//PlayerTextDrawSetString( playerid, Regtd21[playerid], inputtext );
				InputPassword[ playerid ] = true;
				SelectTextDraw( playerid, UGBOJA );
			}
		}
	}
	else if( dialogid == dialog_COUNTRY ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					PlayerInfo[ playerid ][ xDrzava ] = 3;
					//PlayerTextDrawSetString( playerid, Regtd24[playerid], "Srbija" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
				case 1: {
					PlayerInfo[ playerid ][ xDrzava ] = 2;
					//PlayerTextDrawSetString( playerid, Regtd24[playerid], "Hrvatska" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
				case 2: {
					PlayerInfo[ playerid ][ xDrzava ] = 1;
					//PlayerTextDrawSetString( playerid, Regtd24[playerid], "Makedonija" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
				case 3: {
					PlayerInfo[ playerid ][ xDrzava ] = 4;
				   // PlayerTextDrawSetString( playerid, Regtd24[playerid], "Crna_Gora" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
				case 4: {
					PlayerInfo[ playerid ][ xDrzava ] = 5;
				  ///  PlayerTextDrawSetString( playerid, Regtd24[playerid], "BiH" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
				case 5: {
					PlayerInfo[ playerid ][ xDrzava ] = 6;
				  //  PlayerTextDrawSetString( playerid, Regtd24[playerid], "Ostalo" );
					ChoseCountry[ playerid ] = true;
					SelectTextDraw( playerid, UGBOJA );
				}
			}
		}
	}
	else if( dialogid == dialog_AGE ) {
		if( !response ) return 1;
		if( response ) {
			new age = strval( inputtext );
			if( age < 12 || age > 70 )
			{
				hidesrtd(playerid);
				ShowPlayerDialog( playerid, dialog_AGE, DSI, "Godine", "U prazni prostor ispod unesite vase godine\nMinimalno 12 maximalno 70", "Unos", "Izadji" );
				return 1;
			}
		   // PlayerTextDrawSetString( playerid, Regtd22[playerid], inputtext );
			PlayerInfo[ playerid ][ xGodine ] = age;
			InputAge[ playerid ] = true;
			SelectTextDraw( playerid, UGBOJA );
		}
	}
	else if( dialogid == dialog_MAIL ) {
		if( !response ) return 1;
		if( response ) {
			new mailstring = strfind( inputtext, "@", true), tackastring = strfind( inputtext, ".", true );
			if( mailstring == -1 || tackastring == -1) {
				hidesrtd(playerid);
				ShowPlayerDialog(playerid, dialog_MAIL, DSI, "Mail", "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
			}
			else {
				strmid( PlayerInfo[ playerid ][ xEmail ], inputtext, 0, strlen( inputtext ), 34 );
				//PlayerTextDrawSetString( playerid, Regtd25[playerid], inputtext );
				//PlayerTextDrawLetterSize( playerid, Regtd25[playerid], 0.200000, 1.000000 );
				PlayerTextDrawShow( playerid, Regtd25[playerid] );
				InputMail[ playerid ] = true;
				SelectTextDraw( playerid, UGBOJA );
			}
		}
	}
	else if( dialogid == dialog_MARKETBUY ) {
		if( !response ) return true;
		if( response ) {
			static
				id = -1;
				
			if( PlayerInfo[ playerid ][ xNovac ] < UkupnaCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca." );
			UkupnaCena[ playerid ] = 0;
			format( globalstring, sizeof( globalstring ), "%s placa kasirki, te uzima stvari iz korpe.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0 , playerid, globalstring, LJUBICASTA );
			if( UzeoIzMarketa[ playerid ][ 0 ] >= 1 ) {
			
					id = Inventory_Add( playerid, "Pizza", 2702, UzeoIzMarketa[ playerid ][ 0 ] );

					if( id != -1 ) {
						new pizza = UzeoIzMarketa[ playerid ][ 0 ];
						DajIgracuNovac( playerid, -pizza*100 );
						UzeoIzMarketa[ playerid ][ 0 ] = 0;
						BussinesMoney( uFirmi[ playerid ], pizza*80);
					}
					else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );
			}
			if( UzeoIzMarketa[ playerid ][ 1 ] == 1 ) {
				DajIgracuNovac( playerid, -200 );
				Uze[ playerid ] = true;
				UzeoIzMarketa[ playerid ][ 1 ] = 0;
				BussinesMoney( uFirmi[ playerid ], 160 );
			}
			if( UzeoIzMarketa[ playerid ][ 2 ] == 1 ) {
				if( Inventory_HasItem(playerid, "Maska" ) ) {
					GRESKA( playerid, "Vec imate masku." );
				}
				else if( !Inventory_HasItem(playerid, "Maska" ) ) {
				
						id = Inventory_Add( playerid, "Maska", 19036 );

						if( id != -1 ) {
							DajIgracuNovac( playerid, -800 );
							new rand = 100000 + random(899999);
							PlayerInfo[ playerid ][ xMaskID ] = rand;
							UzeoIzMarketa[ playerid ][ 2 ] = 0;
							BussinesMoney( uFirmi[ playerid ], 640);
						}
						else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );
				}
			}
			if( UzeoIzMarketa[ playerid ][ 3 ] >= 1 ) {
			 
					id = Inventory_Add( playerid, "Sok", 2647, UzeoIzMarketa[ playerid ][ 3 ] );

					if( id != -1 ) {
						new Sok = UzeoIzMarketa[ playerid ][ 3 ];
						DajIgracuNovac( playerid, -Sok*40 );
						UzeoIzMarketa[ playerid ][ 3 ] = 0;
						BussinesMoney( uFirmi[ playerid ], Sok*30);
					}
					else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );

			}
			if( UzeoIzMarketa[ playerid ][ 4 ] >= 1 ) {
			 
					id = Inventory_Add( playerid, "Pivo", 1543, UzeoIzMarketa[ playerid ][ 4 ] );

					if( id != -1 ) {
						new Pivo = UzeoIzMarketa[ playerid ][ 4 ];
						DajIgracuNovac( playerid, -Pivo*55 );
						UzeoIzMarketa[ playerid ][ 4 ] = 0;
						BussinesMoney( uFirmi[ playerid ], Pivo*40);
					}
					else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );
   
			}
			if( UzeoIzMarketa[ playerid ][ 5 ] >= 1 ) {
			 
					id = Inventory_Add( playerid, "Hamburger", 2703, UzeoIzMarketa[ playerid ][ 5 ] );

					if( id != -1 ) {
						new hamburger = UzeoIzMarketa[ playerid ][ 5 ];
						DajIgracuNovac( playerid, -hamburger*65 );
						UzeoIzMarketa[ playerid ][ 5 ] = 0;
						BussinesMoney( uFirmi[ playerid ], hamburger*40);
					}
					else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );
			
			}
			if( UzeoIzMarketa[ playerid ][ 6 ] >= 1 ) {
			
					id = Inventory_Add( playerid, "Piletina", 2663, UzeoIzMarketa[ playerid ][ 6 ] );

					if( id != -1 ) {
						new pilence = UzeoIzMarketa[ playerid ][ 6 ];
						DajIgracuNovac( playerid, -pilence*250 );
						UzeoIzMarketa[ playerid ][ 6 ] = 0;
						BussinesMoney( uFirmi[ playerid ], pilence*200);
					}
					else GRESKA( playerid, "Pun vam je inventory nemate mesta gde da stavite stvari." );
		 
			}
			if( UzeoIzMarketa[ playerid ][ 7 ] == 1 ) {
				DajIgracuNovac( playerid, -35 );
				PlayerInfo[ playerid ][ xCigare ] += 20;
				UzeoIzMarketa[ playerid ][ 7 ] = 0;
				BussinesMoney( uFirmi[ playerid ], 20);
			}
			if( UzeoIzMarketa[ playerid ][ 8 ] == 1 ) {
				DajIgracuNovac( playerid, -25 );
				PlayerInfo[ playerid ][ xUpaljac ] = 1;
				UzeoIzMarketa[ playerid ][ 8 ] = 0;
				BussinesMoney( uFirmi[ playerid ], 15);
			}
			if( UzeoIzMarketa[ playerid ][ 9 ] >= 1 ) {
				new sodab = UzeoIzMarketa[ playerid ][ 9 ];
				DajIgracuNovac( playerid, -sodab*80 );
				PlayerInfo[ playerid ][ xSodaB ] += sodab;
				UzeoIzMarketa[ playerid ][ 9 ] = 0;
				BussinesMoney( uFirmi[ playerid ], sodab*60);
			}
			if( UzeoIzMarketa[ playerid ][ 10 ] >= 1 ) {
				new desvoda = UzeoIzMarketa[ playerid ][ 10 ];
				DajIgracuNovac( playerid, -desvoda*40 );
				PlayerInfo[ playerid ][ xDesVoda ] += desvoda;
				UzeoIzMarketa[ playerid ][ 10 ] = 0;
				BussinesMoney( uFirmi[ playerid ], desvoda*30);
			}
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_VIPOBJECTS )
	{
		if( !response ) return true;
		if( response )
		{

			switch( listitem )
			{
				case 0:
				{
					//SendInfoMessage(playerid,"Stavili ste na sebe papagaja!");
					//SetPlayerAttachedObject( playerid,1,19078,1,0.320722,-0.067912,-0.165151,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000 ); // papagaj
					
					greska(playerid, "Papagaja morate kupiti u marketu, stavljate ga komandom"col_balkanstory" /odjeca");
					//OVAJ RADI DOLE;
					//SetPlayerAttachedObject( playerid,5,19078,1,0.320722,-0.067912,-0.165151,0.000000,0.000000,0.000000,1.000000,1.000000,1.000000 );
				}
				case 1:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe baklju!");
					SetPlayerAttachedObject( playerid, 2, 3461, 6, 0.069429, 0.032604, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // tikitorch01_lvs - baklja
				}
				case 2:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe pancir!");
					SetPlayerAttachedObject( playerid, 3, 373, 1, 0.286601, -0.014752, -0.169651, 74.940216, 23.071197, 33.927280, 1.000000, 1.000000, 1.000000 ); // armour - pancir
				}
				case 3:
				{
					greska(playerid, "HOCES U ZATVOR MALI A?");
					//SendInfoMessage(playerid,"Stavili ste na sebe kurac!");
					//SetPlayerAttachedObject( playerid, 4, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 ); // ChainsawDildo1 - kurac
				}
				case 4:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe big dollar!");
					SetPlayerAttachedObject( playerid, 5, 1274, 1, 0.806575, 0.052928, 0.013146, 0.000000, 87.540878, 0.000000, 1.000000, 1.000000, 1.000000 ); // bigdollar - dolar
				}
				case 5:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe potkovicu!");
					SetPlayerAttachedObject( playerid, 6, 954, 1, 0.954922, 0.030687, 0.000000, 0.000000, 268.403228, 0.000000, 1.000000, 1.000000, 1.000000 ); // cj_horse_Shoe - potkovica
				}
				case 6:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe drvo!");
					SetPlayerAttachedObject( playerid, 7, 674, 1, -1.193789, 0.051014, 0.099190, 0.000000, 90.430030, 0.000000, 1.000000, 1.000000, 1.000000 ); // sm_des_josh_lrg1 - drvo
				}
				case 7:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe vodokotlic!");
					SetPlayerAttachedObject( playerid, 8, 1211, 1, 0.916536, 0.012704, -0.003792, 0.000000, 89.479736, 0.000000, 1.000000, 1.000000, 1.000000 ); // fire_hydrant - vodokotlic
				}
				case 8:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe tablu!");
					SetPlayerAttachedObject( playerid, 9, 1233, 6, 0.085374, 0.030156, 1.154913, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000 ); // noparkingsign1 - tabla
				}
				case 9:
				{
					SendInfoMessage(playerid,"Stavili ste na sebe nilskog konja!");
					SetPlayerAttachedObject( playerid, 8, 1371, 1, 0.177012, 0.000000, -0.008047, 0.000000, 89.795104, 182.353408, 1.000000, 1.000000, 1.000000 ); // CJ_HIPPO_BIN - nilski
				}
				case 10:
				{
					SendInfoMessage(playerid,"Uspjesno ste skinuli sve objekte sa sebe!");
					RemovePlayerAttachedObject(playerid, 0), RemovePlayerAttachedObject(playerid, 1), RemovePlayerAttachedObject(playerid, 2), RemovePlayerAttachedObject(playerid, 3), RemovePlayerAttachedObject(playerid, 4),
					RemovePlayerAttachedObject(playerid, 5), RemovePlayerAttachedObject(playerid, 6), RemovePlayerAttachedObject(playerid, 7), RemovePlayerAttachedObject(playerid, 8), RemovePlayerAttachedObject(playerid, 9),
					RemovePlayerAttachedObject(playerid, 10);
					SungOn[ playerid ] = false; HeadOn[ playerid ] = false; FaceOn[ playerid ] = false;
				}
			}
		}
	}
	else if( dialogid == dialog_TELEFON )
	{
		if( !response ) return /*PlayerInfo[playerid][xTelAuto] = 0, */SendInfoMessage(playerid,"Uspjesno ste zatvorili aplikaciju na mobilnom!");
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					notfi(playerid,"Telekom","Da nekome posaljete SMS, kucajte: /sms");
				}
				case 1:
				{
					notfi(playerid,"Telekom","Da nekoga nazovete na telefon, kucajte: /pozovi");
				}
				case 2:
				{
					notfi(playerid,"Telekom","Da dobijete neciji broj telefona, kucajte: /telbroj");
				}
				case 3:
				{
					new caller = GetPVarInt( playerid, "Mobile" );
					
					SetPVarInt( playerid, "CellTime", 0 );
					SendClientMessagee( playerid,  0xAFAFAFAA, "Mobilni telefon vam je dzepu - niste u pozivu!");
					RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
					
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_STOPUSECELLPHONE );
					
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_NONE );
					SetPVarInt( playerid, "Mobile", -1 );
					if( caller < 501 && caller >= 0 )
					{
						if( caller != INVALID_PLAYER_ID )
						{
							if( PlayerLogged[ caller ] == true )
							{

								SendClientMessagee( caller,  0xAFAFAFAA, "Prekinuo je.");
								SetPVarInt( caller, "CellTime", 0 );
								SetPVarInt( playerid, "CellTime",  0);
								
								SendClientMessagee( playerid,  0xAFAFAFAA, "Prekinuli ste poziv.");
								SetPVarInt( caller, "Mobile", -1 );
								SetPlayerSpecialAction( caller, SPECIAL_ACTION_STOPUSECELLPHONE );
								
								SetPlayerSpecialAction( caller, SPECIAL_ACTION_STOPUSECELLPHONE );
								RemovePlayerAttachedObject( caller, OBJECT_SLOT_RHAND );
							}
						}
					}
				}
				case 4:
				{
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) return GRESKA( playerid, "Vec imas objekt u ruci ne mozes zvati ili javiti se." );
					if( PlayerInfo[ playerid ][ xMute ] != 0) return GRESKA( playerid, "Ne mozete pricati, usutkani ste.");
					if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return GRESKA( playerid, "Ne mozete se javiti dok ste u zatvoru / ALKATRAZ.");
					if(GetPVarInt( playerid, "Mobile") == -1 )
					{
						if( IsPlayerAttachedObjectSlotUsed( playerid,OBJECT_SLOT_RHAND ) )
						{
							GRESKA( playerid, "Vec imate neki objekt u desnoj ruci, ne mozete izvaditi mobilni telefon!");
							return 1;
						}
						for(new i; i < MAX_PLAYERS; i++)
						{
							if( PlayerLogged[ i ] == true )
							{
								if( GetPVarInt(i, "Mobile") == playerid )
								{
									SetPVarInt( playerid, "Mobile", i );
									SendClientMessagee(i,  BELA, "   Javio se.");
									format( globalstring, sizeof( globalstring ), "* %s se javlja na mobilni telefon.", ImeIgraca( playerid ) );
									SetPlayerSpecialAction( playerid, SPECIAL_ACTION_USECELLPHONE);
									SetPlayerAttachedObject( playerid, OBJECT_SLOT_RHAND, PlayerInfo[ playerid ][ xModelTelefona ], 6, 0.101469, 0.000639, -0.008395, 73.051651, 171.894165, 0.000000, 1.000000, 1.000000, 1.000000);
									PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
								}
							}
						}
					}
					else GRESKA( playerid,"Vec ste u razgovoru!");
				}
				case 5:
				{
					if(PlayerInfo[playerid][xMreza] == 0)
					{
						new smscosta;
						smscosta = 10;
						new string[20];
						PlayerInfo[playerid][xMreza] = 1;

						SendInfoMessage(playerid,"Uspjesno ste ukljucili mobilne podatke na mobilnom!");

						format( string, sizeof( string ), "~r~$-%d", smscosta);
						announcement( playerid, string, 5000, 1);
						PlayerInfo[ playerid ][ xTelefonBon ] -= smscosta;

						BussinesTelekomMoney( smscosta );

						return 1;
					}
					else if(PlayerInfo[playerid][xMreza] == 1)
					{
						PlayerInfo[playerid][xMreza] = 0;
						SendInfoMessage(playerid,"Uspjesno ste iskljucili mobilne podatke na mobilnom!");

						return 1;
					}
				}
				case 6:
				{
					if(PlayerInfo[playerid][xMreza] == 0) return greska(playerid,"Morate ukljuciti mobilne podatke na mobilnom!");
					announcement( playerid, "Kupovinu omogucio: Mercedes Benz auto salon", 5000, 1);
					if( ServerInfo[ KupovinaVozila ] == false ) return GRESKA( playerid, "Trenutno nije moguce kupovanje auta po salonima." );
					if( PlayerInfo[ playerid ][ xWanted ] > 0 ) return GRESKA( playerid, "Ne mozes kupovati kad imas Wanted Level." );
					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 )
					{
						if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
						else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
					}
					else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
					ShowPlayerDialog(playerid,dialog_TELAUTO, DSI, "Nova Era RolePlay | Mobitel - kupovina vozila","U prazan prostor unesite ID vozila koje zelite kupiti.", "Dalje", "Odustani");
				}
				case 7:
				{
					if(PlayerInfo[playerid][xMreza] == 0) return greska(playerid,"Morate ukljuciti mobilne podatke na mobilnom!");

					new info12[200];

					strcat(info12, "{FFFFFF}Trenutna dostupna vozila su:\n\n", sizeof(info12));
					strcat(info12, "{ffffff}VOZILO STORE ID - 1 || ID: 560 || Ime vozila: Sultan || Cijena: 900,000$ ||\n", sizeof(info12));
					
					ShowPlayerDialog(playerid, DEntisT_invalid_dialogid, DIALOG_STYLE_MSGBOX, "Nova Era RolePlay | Mobitel - lista dostupnih vozila", info12, "U redu", "");
				}
			}
		}
	}
	else if( dialogid == dialog_TELAUTO )
	{
		if( response )
		{
			new kolicina, cena;
			new as = 1;
			if( as != -1 )
			{
				if( sscanf(inputtext,"i",kolicina ) ) return ShowPlayerDialog(playerid,dialog_TELAUTO, DSI, "Nova Era RolePlay | Mobitel - kupovina vozila","GRESKA: Morate uneti ID vozila, ne slova i ostale karaktere!\n\nU prazan prostor unesite ID vozila koje zelite kupiti.", "Dalje", "Odustani");
				if
				(
					kolicina != 560
				) 
				return greska( playerid, "Ne mozete kupiti to vozilo putem mobilnog - za to posetite salon automobila!");
				if( kolicina == 560 ) 
				{
					cena = 900000; 
				}
				if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
				if( PlayerInfo[ playerid ][ xNovac ] < VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] ) return GRESKA( playerid, "Nemas dovoljno novca." );

				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
					if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
					else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
				}
				else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );

				if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return GRESKA( playerid, "Morate biti level 3+ da bi ste kupili vozilo." );

				//if( AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ] == 0 ) return GRESKA( playerid, "Nemamo vise ovih modela u prodaji." );

				for( new i = 1; i < MAX_CARS; i++ )
				{
					new fileauta[ 40 ];
					format(fileauta, sizeof( fileauta ), V_FILE, i);
					if( !fexist( fileauta ) )
					{
						VehicleInfo[ i ][ vOwned ] = 1;
						VehicleInfo[ i ][ vNeaktivnost ] = 0;
						VehicleInfo[ i ][ vPrice ] = 100000;
						strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
						VehicleInfo[ i ][ vLocked ] = 0;
						VehicleInfo[ i ][ vLokacijaX ] = AutoSalon[ as ][ aVehBuyedPos ][ 0 ];
						VehicleInfo[ i ][ vLokacijaY ] = AutoSalon[ as ][ aVehBuyedPos ][ 1 ];
						VehicleInfo[ i ][ vLokacijaZ ] = AutoSalon[ as ][ aVehBuyedPos ][ 2 ];
						VehicleInfo[ i ][ vLokacijaA ] = AutoSalon[ as ][ aVehBuyedPos ][ 3 ];
						VehicleInfo[ i ][ vVirtualWorld ] = 0;
						VehicleInfo[ i ][ vInterior ] = 0;
						VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
						VehicleInfo[ i ][ vJob ] = -1;
						VehicleInfo[ i ][ vOrganization ] = -1;
						VehicleInfo[ i ][ vFuelProperty ] = -1;
						VehicleInfo[ i ][ vColor1 ] = 1;
						VehicleInfo[ i ][ vColor2 ] = 1;
						VehicleInfo[ i ][ vModel ] = kolicina;
						VehicleInfo[ i ][ vReg ] = 0;
						VehicleInfo[ i ][ vRegVreme ] = 0;
						VehicleInfo[ i ][ vTeh ] = 0;
						VehicleInfo[ i ][ vGPS ] = 0;
						VehicleInfo[ i ][ vOsiguranje ] = 5;
						VehicleInfo[ i ][ vLock ] = 0;
						VehicleInfo[ i ][ vAlarm ] = 0;
						VehicleInfo[ i ][ vTuned ] = 0;
						VehicleInfo[ i ][ vNeon ] = 0;
						VehicleInfo[ i ][ vImobilizator ] = 0;
						VehicleInfo[ i ][ vSpoiler ] = 0;
						VehicleInfo[ i ][ vHood ] = 0;
						VehicleInfo[ i ][ vRoof ] = 0;
						VehicleInfo[ i ][ vSkirt ] = 0;
						VehicleInfo[ i ][ vLamps ] = 0;
						VehicleInfo[ i ][ vNitro ] = 0;
						VehicleInfo[ i ][ vExhaust ] = 0;
						VehicleInfo[ i ][ vWheels ] = 0;
						VehicleInfo[ i ][ vStereo ] = 0;
						VehicleInfo[ i ][ vHydraulics ] = 0;
						VehicleInfo[ i ][ vFrontBumper ] = 0;
						VehicleInfo[ i ][ vRearBumper ] = 0;
						VehicleInfo[ i ][ vVents ] = 0;
						VehicleInfo[ i ][ vPaintJob ] = 255;
						VehicleInfo[ i ][ vProvera ] = i;
						VehicleInfo[ i ][ vMaterijali ] = 0;
						#if nerp_droga == 1
						VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
						VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
						#endif
						VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
						VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
						VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
						VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
						LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
						SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
						VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
						SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
						SaveVehicle( i );
						carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
						SetTimer("AntiSpawnCrash", 3000, 0);

						if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
						else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
						else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
						else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;


						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
							SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						}

						DajIgracuNovac( playerid, -cena );

						if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = i; }
						SavePlayer( playerid );

						new string[ 128 ];
						format( string, sizeof( string ), "Igrac %s je kupio vozilo putem mobilnog!", ImeIgraca( playerid ) );
						LogSave( "Ostalo/LogKupiVozilo.log", string );

						//AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ]--;
						AutoSalon[ as ][ AlreadyBuying ] = false;
						SaveSalon( as );

						PlayerBuyingAS[ playerid ] = -1;
						AutoSalonBojaVozila[ playerid ] = -1;
						ModelCar[ playerid ] = 0;

						BuyCarTDControl( playerid, false );
						BojaVozilaTDControl( playerid, false );
						TogPlayerHud( playerid );
						TogglePlayerControllable( playerid, true );

						SetCameraBehindPlayer( playerid );
						CancelSelectTextDraw( playerid );
						SendInfoMessage( playerid, "Uspjesno ste narucili vozilo, stiglo je na lokaciju oznacenu markerom!" );

						SetVehicleLabels(i);

						Dimi_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
						CheckpointStatus[ playerid ] = 15;
						break;
					}
				}
			}
		}
		else if( !response ) {

			new as = 1;
			new slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
				AutoSalon[ as ][ AlreadyBuying ] = false;

				PlayerBuyingAS[ playerid ] = -1;
				AutoSalonBojaVozila[ playerid ] = -1;
				ModelCar[ playerid ] = 0;

				Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				VehicleInfo[ slotid ][ vID ] = Dimi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], VehicleInfo[ slotid ][ vFuelProperty ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
				SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
				LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

				BuyCarTDControl( playerid, false );
				BojaVozilaTDControl( playerid, false );
				//TogPlayerHud( playerid );
				TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
				CancelSelectTextDraw( playerid );
			}

		}
	}
	else if( dialogid == dialog_GAMEMODE )
	{
		if( !response ) return announcement(playerid,"Iskljucili ste~n~odabir gamemodea!");
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					announcement(playerid,"Odabrali ste~n~roleplay!");
					PlayerInfo[playerid][xGamemode] = 0;
					PlayerTextDrawSetString(playerid, p_gamemodetd[0][playerid], "Roleplay");
				}
				case 1:
				{
					announcement(playerid,"Odabrali ste~n~Deathmatch!");
					PlayerInfo[playerid][xGamemode] = 1;
					PlayerTextDrawSetString(playerid, p_gamemodetd[0][playerid], "Deathmatch");
				}
				case 2:
				{
					announcement(playerid,"Odabrali ste~n~PUBG!");
					PlayerInfo[playerid][xGamemode] = 2;
					PlayerTextDrawSetString(playerid, p_gamemodetd[0][playerid], "PUBG");
				}
			}
		}
	}
	else if( dialogid == dialog_PEKARA )
	{
		if( !response ) return SendSrwMessage(playerid,"Hvala Vam na posjeti - vasa pekara!");
		if(response)
		{
			switch(listitem)
			{
				case 0:
				{
					DajIgracuNovac(playerid,-10);
					SendInfoMessage(playerid,"Kupili ste burek i jogurt - naplaceno deset dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"burek, te pije jogurt"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 1:
				{
					DajIgracuNovac(playerid,-7);
					SendInfoMessage(playerid,"Kupili ste krofnu - naplaceno sedam dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"krofnu"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 2:
				{
					DajIgracuNovac(playerid,-1);
					SendInfoMessage(playerid,"Kupili ste kiflu - naplacen jedan dolar!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"kiflu"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 3:
				{
					DajIgracuNovac(playerid,-2);
					SendInfoMessage(playerid,"Kupili ste hljeb - naplacena dva dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"hljeb"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 4:
				{
					DajIgracuNovac(playerid,-4);
					SendInfoMessage(playerid,"Kupili ste sirnicu - naplacena cetiri dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"sirnicu"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 5:
				{
					DajIgracuNovac(playerid,5);
					SendInfoMessage(playerid,"Kupili ste krompirusu - naplaceno pet dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"krompirusu"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 6:
				{
					DajIgracuNovac(playerid,-3);
					SendInfoMessage(playerid,"Kupili ste parce pice - naplaceno tri dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"parce pice"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 7:
				{
					DajIgracuNovac(playerid,-6);
					SendInfoMessage(playerid,"Kupili ste kroasan - naplaceno sest dolara!");
					Dimi_SetPlayerHealth(playerid,1000);
					Dimi_SetPlayerArmour(playerid,1000);
					OnePlayAnim(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);

					new proizvod[][] = {"kroasan"};
					new string[300];
					if( Maskuse[ playerid ] == false )
						format( string, sizeof( string ), "* %s placa, kupuje i jede %s!", ImeIgraca( playerid ),proizvod);
					else
						format( string, sizeof( string ), "* Maska_%d placa, kupuje i jede %s!", PlayerInfo[ playerid ][ xMaskID ], proizvod );
					PorukaRadius( 30.0, playerid, string, LJUBICASTA );
				}
				case 8:
				{
					greska(playerid,"TO NEPOSTOJI BITCH IDES JAIL NA DESET DANA pusa od DEntisT-a");
					new burek_sa_sirom_report[300];
					format(burek_sa_sirom_report,sizeof(burek_sa_sirom_report),""col_balkanstory"\
					[UPOZORENJE ZA DEntisTA]{ffffff} Igrac %s je pokusao kupiti BUREK SA SIROM u pekari, ZOVITE DEntisTA!!!",\
					ImeIgraca(playerid));
					AdminPoruka(-1,burek_sa_sirom_report);
				}
			}
		}
	}
	else if( dialogid == dialog_PIN )
	{
		if(!response) return Kickovanje(playerid,"Dobili ste kick jer ste odbili unos sigurnosnog koda!");
		if( response )
		{
			new kod;
			if( sscanf(inputtext,"i",kod ) ) return ShowPlayerDialog(playerid,dialog_PIN, DSI, "Nova Era RolePlay | PIN - Greska","GRESKA: Morate uneti vas sigurnosti kod, ne slova i ostale karaktere!\n\nU prazan prostor unesite vas sigurnosni kod", "Unesi", "Odustani");
			if( PlayerInfo[playerid][xPin] == kod )
			{
				announcement(playerid,"Uspjesno ste se ulogovali.");
				//SendInfoMessage(playerid,"Uspjesno ste se ulogovali sa vasim sigurnosnim pinom!");
				KillTimer(PinDur[playerid]);
				//if(PlayerInfo[playerid][xOTD] == 0)
				#if defined retardirani_textdrawi
				ShowPlayerDialog(playerid,dialog_TDOVI,DSMSG,"Nova Era | Textdraw - odabir stila","Ovdje birate stil tdova, molimo da detaljno procitate tekst.\nStilovi - info:\n\n\nSPECIJALNI - Spec. textdrawovi su textdrawovi koje trenutno vidite,\novaj tip textdrawova prikazuje vise informacija o vasem racunu,\nsadrzi interaktivne menije i ima vecu funkcionalnost. Ali su u isto vreme veoma sgusnuti.\n\nMODERNI - Ne zauzimaju mnogo prostora, lijepi su i pristojni. Medjutim\nne prikazuju mnogo informcija o vasem racunu i nemaju \nveliku funkcionalnost.","Specijalni","Moderni");
				#endif
			}
			else if( PlayerInfo[playerid][xPin] != kod ) return Kickovanje(playerid,"Dobili ste kick jer ste unijeli pogresan pin!");
		}
	}
	#if defined retardirani_textdrawi
	else if(dialogid == dialog_TDOVI) //odabir tdova
	{
		if(response)
		{
			TogPlayerHud(playerid);
			PlayerInfo[playerid][xOTD] = 1;
			PlayerInfo[playerid][xTdstil] = 1;
			//TogPlayerHud(playerid);
			Modern[playerid] = 0;
			TogPlayerHud(playerid);
			SendInfoMessage(playerid,"Postavili ste specijalne textdrawove!");
			return 1;
		}
		if(!response)
		{
			TogPlayerHud(playerid);
			PlayerInfo[playerid][xOTD] = 1;
			PlayerInfo[playerid][xTdstil] = 2;
			//TogPlayerHud(playerid);
			Modern[playerid] = 1;
			TogPlayerHud(playerid);
			SendInfoMessage(playerid,"Postavili ste moderne textdrawove!");
			return 1;
		}

	}
	#endif
	else if(dialogid == dialog_BETA)
	{
		if(!response) return SendInfoMessage(playerid,"Odustali ste od slanja povratnih informacija.");
		if(response)
		{
			AdminPoruka(-1,"{FFFFFF}________________________|POVRATNE INFORMACIJE|________________________");

			new imeigraca[300];
			format(imeigraca,sizeof(imeigraca),"{ffffff}Povratna informacija od: "col_balkanstory"%s",ImeIgraca(playerid));

			AdminPoruka(-1,imeigraca);
			AdminPoruka(-1,"{ffffff}Tekst pristigle povratne informacije o kvaliteti igre na beta verziji glasi:");
			AdminPoruka(-1,"");
			AdminPoruka(-1,inputtext);
			AdminPoruka(-1,"{FFFFFF}______________________________________________________________________");
		}
	}
	else if(dialogid == dialog_SPOL)
	{
		if(!response) return PlayerInfo[playerid][xPol] = 2,RegSex[playerid] = 2;
		if(response)
		{
			PlayerInfo[playerid][xPol] = 1,RegSex[playerid] = 1;
		}
	}
	else if( dialogid == dialog_IZLAZIIZPD )
	{
		if( !response ) return true;
		if( response )
		{

			switch( listitem )
			{
				case 0://Krov 1
				{
				
					SetPlayerVirtualWorld( playerid, 0 );
					SetPlayerInterior( playerid, 0 );
					TogglePlayerControllable( playerid, false );
					SetTimerEx("SlobodnoSada", 3000, false, "i", playerid );
					ShowLoadingTextdraws(playerid, true); SendAcMessage(playerid, ""SERVERBOJA_AQUA"Anti-SK"col_white" zastita za Vas je pokrenuta, sacekajte - istice za nekoliko sekundi!");
					Dimi_SetPlayerPos( playerid, 1565.2023,-1665.9219,28.3956 );//1565.2023,-1665.9219,28.3956
					SetCameraBehindPlayer( playerid );
				
				}
				case 1://Krov 2
				{

					SetPlayerVirtualWorld( playerid, 0 );
					SetPlayerInterior( playerid, 0 );
					TogglePlayerControllable( playerid, false );
					SetTimerEx("SlobodnoSada", 3000, false, "i", playerid );
					ShowLoadingTextdraws(playerid, true); SendAcMessage(playerid, ""SERVERBOJA_AQUA"Anti-SK"col_white" zastita za Vas je pokrenuta, sacekajte - istice za nekoliko sekundi!");
					Dimi_SetPlayerPos( playerid, 1564.4135,-1685.2876,28.3956);//1564.4135,-1685.2876,28.3956
					SetCameraBehindPlayer( playerid );

				}
				case 2://Parking
				{

					SetPlayerVirtualWorld( playerid, 0 );
					SetPlayerInterior( playerid, 0 );
					TogglePlayerControllable( playerid, false );
					SetTimerEx("SlobodnoSada", 3000, false, "i", playerid );
					ShowLoadingTextdraws(playerid, true); SendAcMessage(playerid, ""SERVERBOJA_AQUA"Anti-SK"col_white" zastita za Vas je pokrenuta, sacekajte - istice za nekoliko sekundi!");
					Dimi_SetPlayerPos( playerid, 1568.7417,-1690.5629,5.8906 );
					SetCameraBehindPlayer( playerid );

				}
				
				
			}
		}
	}
	else if( dialogid == dialog_OSTALOITDS )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0://Dodaci na odjeci
				{
					OdjecaTDControl(playerid, true);
					
					PlayerTextDrawSetPreviewRot(playerid, OdjecaTextdraw[10][playerid], 0.0, 0.0, 0.0, 1.0);
					PlayerTextDrawSetPreviewModel(playerid,OdjecaTextdraw[10][playerid],18631);
					PlayerTextDrawSetPreviewRot(playerid, OdjecaTextdraw[11][playerid], 0.0, 0.0, 0.0, 1.0);
					PlayerTextDrawSetPreviewModel(playerid,OdjecaTextdraw[11][playerid],18631);
					PlayerTextDrawSetPreviewRot(playerid, OdjecaTextdraw[12][playerid], 0.0, 0.0, 0.0, 1.0);
					PlayerTextDrawSetPreviewModel(playerid,OdjecaTextdraw[12][playerid],18631);
					PlayerTextDrawSetPreviewRot(playerid, OdjecaTextdraw[13][playerid], 0.0, 0.0, 0.0, 1.0);
					PlayerTextDrawSetPreviewModel(playerid,OdjecaTextdraw[13][playerid],18631);
				
					SetTimerEx("UpdateOdjecaModels", 1000, false, "i", playerid);
				}
				case 1://droga stats
				{
					new coordsstring[128];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					format( coordsstring, sizeof( coordsstring ), "Droga 1 - %s (%dg)~n~",GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] ), PlayerInfo[ playerid ][ xDrug ][ 0 ]  );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "Droga 2 - %s (%dg)~n~",GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] ), PlayerInfo[ playerid ][ xDrug ][ 1 ]  );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "Droga 3 - %s (%dg)~n~",GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] ), PlayerInfo[ playerid ][ xDrug ][ 2 ]  );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "Droga 4 - %s (%dg)~n~",GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] ), PlayerInfo[ playerid ][ xDrug ][ 3 ]  );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), "Droga 5 - %s (%dg)",GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] ), PlayerInfo[ playerid ][ xDrug ][ 4 ] );
					strcat( DialogStrgEx, coordsstring );
					SendMessageBox(playerid, "Vase droge", DialogStrgEx);
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2: //eventi
				{
					new str1[ 512 ];
					format( str1, 
						sizeof( str1 ), 
						"~n~~w~Osvojena 1 mesta: ~r~%d\
						~n~~w~Osvojena 2 mesta: ~r~%d\
						~n~~w~Osvojena 3 mesta: ~r~%d\
						~n~~w~Ubistva u DM zoni: ~r~%d\
						~n~~w~Sniper Event - headshots: ~r~%d\
						~n~~w~PUBG kills: ~r~%d", 
						PlayerInfo[ playerid ][ xEvent1Mesto ], 
						PlayerInfo[ playerid ][ xEvent2Mesto ], 
						PlayerInfo[ playerid ][ xEvent3Mesto ], 
						PlayerInfo[ playerid ][ xDMEventUbistva ],
						PlayerInfo[ playerid ][ xSniperHeadshots ],
						PlayerInfo[ playerid ][ xPUBGKillsTotal ] );

					SendMessageBox(playerid, "Event stats", str1);
				}
			}
		}
	}
	else if( dialogid == dialog_LISTAKOMANDI )
	{
		if( !response ) return true;
		if( response )
		{

			switch( listitem )
			{
				case 0://Account
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/levelup /upgrade /promenispawn /pay /promenilozinku /changename\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/stats /pitaj /prijavi /new /tognews /prijavibug\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/stanje /ostavi /podigni /prebaci /bankomat\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/organizacije /lideri /admini /gamemasteri /vipovi /promoteri\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/dozvole /pokazidozvole /maskon /maskoff /vrijeme /music\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/kaciga /oglasi /platikauciju /unrent /lock /toganimchat\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/lijek /inv /uzmicigaretu /face /head /naocare\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/bacioruzje /podignioruzje /lottohlep /invhelp /gps /gpsoff\n" );
					strcat( DialogStrgEx, ""col_balkanstory"ACCOUNT | "col_white"/razbijlisice /baci /daj /prihvati /odustani /apoeni /togchat\n" );
					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Account", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}

				case 1://Telefon
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Telefon | "col_white"/pozovi /p(ickup) /h /sms /smsoglas /togphone\n" );

					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Telefon", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2://Chat
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Chat | "col_white"/b /me /do /c /s /w /attemp\n" );

					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Telefon", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 3://imovina
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Imovina | "col_white"/imovina /pokucaj /rentroom /unrentroom\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Imovina | "col_white"/kupikucu /kupistan /kupivikendicu\n" );

					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Imovina", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 4://Vozilo
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Vozilo | "col_white"/natoci /upali /ugasi /svetla /exit /windows\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Vozilo | "col_white"/eject /hauba /gepek /eject /pojas /izazovinatrku\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Vozilo | "col_white"/vehlist /registrujvozilo /preuzmitablice /obijbravu\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Vozilo | "col_white"/upalivozilo /prekiniobijanje /vozilohelp /neonke\n" );

					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Vozilo", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 5://Imanje
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Imanje | "col_white"/kupiimanje /imanje /oberibiljku /kupiseme /posadibiljku\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Imanje | "col_white"/prodajvoce /prodajkupus /prodajruze /kupigajbicu /bacigajbicu\n" );

					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Imanje", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 6://Organizacija
				{
					if(PlayerInfo[ playerid ][ xClan ] > 0 || PlayerInfo[ playerid ][ xLider ] > 0)
					{
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

						if( GetFactionType( playerid ) == ORG_TIP_PD )
						{
							strcat( DialogStrgEx, ""col_balkanstory"Clan | "col_white"/duty /r /f /d /alcotest /databaza /uhapsi /zavezi /odvezi /pu /cctv /ugasikamere\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Clan | "col_white"/tazer /m /wanted /su /blokada /oblokadu /oblokade /bk /bkc /govrepair /undercover /pdizbaci\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Clan | "col_white"/ram /pretresi /oduzmi /ticket /orgstats /rotacija /gov /pokaziznacku /ocisti /suspend\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Clan | "col_white"/opisosumnjicenog /skinistit /oprema /vuci /pusti /proveripojas /oznaka\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Clan | "col_white"/narcotest /unistidrogu /unistioruzje /srusibvrata /namestibvrata\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Lider | "col_white"/lider" );
						}
						else if( GetFactionType( playerid ) == ORG_TIP_MD )
						{
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/f /d /mduty /zmaska /medicine /recover\n /muniform /dajinekciju /nadji /togfr /togd /dajuputnicu\n" );
						}
						else if( GetFactionType( playerid ) == ORG_TIP_CNN )
						{
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/f /vesti /live /newsstats /togfr \n" );
						}
						else if( GetFactionType( playerid ) == ORG_TIP_MAFIJA )
						{
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/f /clanovi /togfr /zauzmifirmu /zauzmi\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/orgsef /lider /koristidrogu /mjesajdrogu /pokazidrogu\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/plackajbanku /oberidrogu /osusidrogu /mojadroga\n" );/*/oberidrogu /osusidrogu /mojadroga */
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/plackajzlataru /svercmatsa /pljackahelp /savezhelp\n" );
						}
						else if( GetFactionType( playerid ) == ORG_TIP_BANDA )
						{
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/f /clanovi /togfr /zauzmi\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/orgsef /lider /koristidrogu /mjesajdrogu /pokazidrogu\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/plackajbanku /oberidrogu /osusidrogu /mojadroga\n" );
							strcat( DialogStrgEx, ""col_balkanstory"Organizacija | "col_white"/plackajzlataru /pljackahelp /savezhelp\n" );
						}

						ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Organizacija", DialogStrgEx, "Ok", "" );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					}else return GRESKA( playerid, "Niste clan organizacije!" );
				}
				
				case 7://Poslovi
				{
					if(PlayerInfo[ playerid ][ xPosao ] == 0 ) return GRESKA( playerid, "Nemate posao!" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					
					if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_TAXI )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white" /taxi\n" );
					}
					
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_GRADJEVINAR )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_RUDAR )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/kopajzlato /lift /uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOMUNALAC )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/ispraznikamion /ispraznicistilicu /uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_TEMPODOSTAVA  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uzmikutiju /uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PILOT  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_BUSVOZAC  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_MEHANICAR  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/mechanic /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_FARMER  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /uzmikantu /muzikrave /uzmigajbu /uzmivoce /berivoce /dostavivoce\n" );//murs
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/prekiniposao /otkaz\n" );
					}
					else if( PlayerInfo[ playerid ][ xPosao ] == POSAO_PIZZA	  )
					{
						strcat( DialogStrgEx, ""col_balkanstory"Posao | "col_white"/uniforma /pizza /otkaz\n" );//murs
					}
					else
					{
						GRESKA( playerid, "Za vas posao ne postoje komande!" );
						return 1;
					}
					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Posao", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 8://Animacije
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/fall /injured /akick /push /handsup /bomb /drunk /getarrested /laugh\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/basket /medic /spray /robman /taichi /lookout /kiss /cellin /cellout /crossarms /lay\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/deal /crack /smoke /groundsit /chat /dance /fucku /strip /hide /vomit /eat\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/koface /kostomach /dealstance /rap /sup /reload /sit /wankin /bat1 /bat2 /piss\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/exhaust /leftslap /hoodfrisked /lightcig /tapcig /box /lay2 /lean /wall /fwalk\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/cop /elbow /fstance /lowthrow /highthrow /aim /gwalk /celebrate /riot\n" );
					strcat( DialogStrgEx, ""col_balkanstory"Animacije | "col_white"/ghand /comeon /fuckit /scared /caranim /no /crawl /walk\n" );
					ShowPlayerDialog( playerid, dialog_HELP, DSMSG, "Animacije", DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				
				
				
			}
			
			
			
		}
		
	}
	else if( dialogid == dialog_KUPUJEAUTONAPIJACI )
	{
		if( !response )
		{
			Dimi_RemovePlayerFromVehicle( playerid );
			SendInfoMessage(playerid,"Odustali ste od kupovine vozila!");
			return 1;
		}
		if( response )
		{
			new izbor = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return GRESKA( playerid, "Morate biti level 3+ da bi ste kupili vozilo." );
			if( PlayerInfo[ playerid ][ xNovac ] < VehicleInfo[ izbor ][ vPrice ] ) return GRESKA( playerid, "Morate imati %d$ za ovo vozilo!",VehicleInfo[ izbor ][ vPrice ]);
			if( VehicleInfo[ izbor ][ vUsage ] != NAPRODAJU_VOZILO ) return GRESKA( playerid, "Mozete kupovati samo vozila na prodaju!" );
			
			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 )
			{
				if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
				else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
			}
			else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );


			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 )
			{
				PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = izbor;
			}
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 )
			{
				PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = izbor;
			}
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 )
			{
				PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = izbor;
			}
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 )
			{
				if( PlayerInfo[ playerid ][ xDonatorSlot ] == true )
				{
					PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = izbor;
				}
				else { return 1; }

			}
			else { return 1; }
			//new novacena = VehPrice[ VehicleInfo[ izbor ][ vModel ] - 400 ][ 1 ];
			SavePlayer( playerid );
			VehicleInfo[ izbor ][ vUsage ] = PRIVATNO_VOZILO;
			VehicleInfo[ izbor ][ vOwned ] = 1;
			VehicleInfo[ izbor ][ vLocked ] = 0;
			VehicleInfo[ izbor ][ vNeaktivnost ] = 0;
			//VehicleInfo[ izbor ][ vPrice ] = novacena/2;
			Delete3DTextLabel( VehicleInfo[ izbor ][ v3DText ] );
			VehicleInfo[ izbor ][ Validv3DText ] = false;

			TipVozila[ GetPlayerVehicleID( playerid ) ] = PRIVATNO_VOZILO;
			strmid( VehicleInfo[ izbor ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
			SaveVehicle( izbor );
			DajIgracuNovac( playerid, -VehicleInfo[ izbor ][ vPrice ] );
			SendInfoMessage(playerid,"Kupili ste polovno vozilo za %d$, komande vozila imate na /vozilo !",VehicleInfo[ izbor ][ vPrice ]);
			
			


		}
		
	}

	else if( dialogid == dialog_UZIMATABLE )
	{
		if( !response ) return true;
		if( response )
		{

			switch( listitem )
			{
				case 0:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vTeh ] != 2 ) return GRESKA( playerid, "Morate prvo zavrsiti papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return GRESKA( playerid, "Morate imati 100$ da bi preuzeli tablice!" );
					DajIgracuNovac( playerid, -100 );
					ShowPlayerDialog( playerid, dialog_IZABERITABLICE, DSL, "Tablice vozila", "Obicne tablice\nSpecialne tablice", "Izaberi", "Odustani" );
					PonudioIgrac[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 0 ];
				
				}
				case 1:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vTeh ] != 2 ) return GRESKA( playerid, "Morate prvo zavrsiti papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return GRESKA( playerid, "Morate imati 100$ da bi preuzeli tablice!" );
					DajIgracuNovac( playerid, -100 );
					ShowPlayerDialog( playerid, dialog_IZABERITABLICE, DSL, "Tablice vozila", "Obicne tablice\nSpecialne tablice", "Izaberi", "Odustani" );
					PonudioIgrac[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 1 ];

				}
				case 2:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vTeh ] != 2 ) return GRESKA( playerid, "Morate prvo zavrsiti papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return GRESKA( playerid, "Morate imati 100$ da bi preuzeli tablice!" );
					DajIgracuNovac( playerid, -100 );
					ShowPlayerDialog( playerid, dialog_IZABERITABLICE, DSL, "Tablice vozila", "Obicne tablice\nSpecialne tablice", "Izaberi", "Odustani" );
					PonudioIgrac[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 2 ];

				}
				case 3:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vTeh ] != 2 ) return GRESKA( playerid, "Morate prvo zavrsiti papire u opstini!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return GRESKA( playerid, "Morate imati 100$ da bi preuzeli tablice!" );
					DajIgracuNovac( playerid, -100 );
					ShowPlayerDialog( playerid, dialog_IZABERITABLICE, DSL, "Tablice vozila", "Obicne tablice\nSpecialne tablice", "Izaberi", "Odustani" );
					PonudioIgrac[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 3 ];

				}
			}
		}
	}
	
	
	
	else if( dialogid == dialog_PAPIRIZAREG )
	{
		if( !response ) return true;
		if( response )
		{
		
			switch( listitem )
			{
				case 0:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vTeh ] != 1 ) return GRESKA( playerid, "Vozilo prvo mora proci tehnicki pregled!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Morate imati 1000$!" );
					DajIgracuNovac( playerid, - 1000 );
					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vTeh ] = 2;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
					SendInfoMessage( playerid, "Izvadili ste papire za registraciju, sada preuzmi tablice u policijskoj stanici!" );

				}
				case 1:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vTeh ] != 1 ) return GRESKA( playerid, "Vozilo prvo mora proci tehnicki pregled!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Morate imati 1000$!" );
					DajIgracuNovac( playerid, - 1000 );
					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vTeh ] = 2;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
					SendInfoMessage( playerid, "Izvadili ste papire za registraciju, sada preuzmi tablice u policijskoj stanici!" );

				}
				case 2:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vTeh ] != 1 ) return GRESKA( playerid, "Vozilo prvo mora proci tehnicki pregled!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Morate imati 1000$!" );
					DajIgracuNovac( playerid, - 1000 );
					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vTeh ] = 2;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
					SendInfoMessage( playerid, "Izvadili ste papire za registraciju, sada preuzmi tablice u policijskoj stanici!" );



				}
				case 3:
				{
					if(PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) return GRESKA( playerid, "Nemate vozilo na ovom slotu!" );
					if( VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vTeh ] != 1 ) return GRESKA( playerid, "Vozilo prvo mora proci tehnicki pregled!");
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Morate imati 1000$!" );
					DajIgracuNovac( playerid, - 1000 );
					VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vTeh ] = 2;
					SaveVehicle( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
					SendInfoMessage( playerid, "Izvadili ste papire za registraciju, sada preuzmi tablice u policijskoj stanici!" );

				}
				
			}
		
		}
		
	}
	
	
	
	else if( dialogid == dialog_UZIMAUHANGARU )
	{
		if( !response ) return true;
		if( response )
		{
			if( ServerInfo[ HangarPaket ] == false ) return GRESKA( playerid, "Nema novih posiljki sacekajte da stignu!" );
			switch( listitem )
			{
				case 0:
				{
					GiveWeaponToPlayer( playerid, 22, 100 );
					GiveWeaponToPlayer( playerid, 30, 200 );
					ServerInfo[ HangarPaket ] = false;
					SendInfoMessage( playerid, "Uzeli ste Clot (100) i AK47 (200)!" );
					SetTimer( "HangarPonovo", 300000, false );
					PlayerInfo[ playerid ][ xHangarTime ] = 15;
					SavePlayer( playerid );
				}
				case 1:
				{
					GiveWeaponToPlayer( playerid, 24, 75 );
					GiveWeaponToPlayer( playerid, 31, 200 );
					ServerInfo[ HangarPaket ] = false;
					SendInfoMessage( playerid, "Uzeli ste Desert Eagle (75) i M4 (200)!" );
					SetTimer( "HangarPonovo", 300000, false );
					PlayerInfo[ playerid ][ xHangarTime ] = 15;
					SavePlayer( playerid );
				}
				case 2:
				{
					GiveWeaponToPlayer( playerid, 25, 100 );
					GiveWeaponToPlayer( playerid, 29, 200 );
					ServerInfo[ HangarPaket ] = false;
					SendInfoMessage( playerid, "Uzeli ste Shotgun (100) i MP5 (200)!" );
					SetTimer( "HangarPonovo", 300000, false );
					PlayerInfo[ playerid ][ xHangarTime ] = 15;
					SavePlayer( playerid );
				}
				case 3:
				{
					GiveWeaponToPlayer( playerid, 34, 50 );
					GiveWeaponToPlayer( playerid, 24, 75 );
					ServerInfo[ HangarPaket ] = false;
					SendInfoMessage( playerid, "Uzeli ste Sniper (50) i Desert Eagle (75)!" );
					SetTimer( "HangarPonovo", 300000, false );
					PlayerInfo[ playerid ][ xHangarTime ] = 15;
					SavePlayer( playerid );
				}
				case 4:
				{
					GiveWeaponToPlayer( playerid, 25, 50 );
					GiveWeaponToPlayer( playerid, 28, 150 );
					ServerInfo[ HangarPaket ] = false;
					SendInfoMessage( playerid, "Uzeli ste Shotgun (50) i Uzi (150)!" );
					SetTimer( "HangarPonovo", 300000, false );
					PlayerInfo[ playerid ][ xHangarTime ] = 15;
					SavePlayer( playerid );
				}
			}
		}
	}
	
	else if( dialogid == dialog_BIRAILSUPSTANCE )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_KUPUJEILOPIUM, DSI, "Ilegalne supstance", "Unesite kolicinu opiuma koju zelite da kupite:", "Uredu", "Izlaz" );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_KUPUJEILMETH , DSI, "Ilegalne supstance", "Unesite kolicinu methylamina koju zelite da kupite:", "Uredu", "Izlaz" );
				}
				
			}
		}
	}

	else if( dialogid == dialog_MJENJASIFRUSERVERA )
	{
		if( !response ) return 1;
		if( response )
		{
			new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) )
			{
				SendRconCommand("password 0");
				return 1;
			}
			new string[128];
			format(string, sizeof(string), "password %s", text);
			SendRconCommand(string);
			SendInfoMessage(playerid,"Promijenili ste sifru servera!");
		}

	}



	else if( dialogid == dialog_MJENJAIMESERVERA )
	{
		if( !response ) return 1;
		if( response )
		{
			new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) )
			{
				ShowPlayerDialog( playerid, dialog_MJENJAIMESERVERA, DSI, "Server", "Ime ne moze biti prazan tekst...\nUnesite novo ime servera:", "Uredu", "Izlaz" );
				return 1;
			}
			new string[128];
			format(string, sizeof(string), "hostname :[NE-RP]: || %s", text);
			SendRconCommand(string);
			SendInfoMessage(playerid, "Ova opcija je trenutno onemogucena!");
		}
		
	}
	
	else if( dialogid == dialog_KUPUJEILOPIUM )
	{
		if( !response ) return true;
		new kolicina;
		if( response )
		{
			if( sscanf( inputtext, "i", kolicina ) ) return ShowPlayerDialog( playerid, dialog_KUPUJEILOPIUM, DSI, "Ilegalne supstance", "Unesite kolicinu opiuma koju zelite da kupite:", "Uredu", "Izlaz" );
			if( PlayerInfo[ playerid ][ xNovac ] < kolicina*2) return GRESKA( playerid, "Nemate dovoljno novca (1 gram = 2$)!");
			DajIgracuNovac( playerid, -kolicina*2) ;
			PlayerInfo[ playerid ][ xOpium ] += kolicina;
			SendInfoMessage(playerid,"Kupili ste %d grama opiuma!", KolicinaIlegala[ playerid ] );
			KolicinaIlegala[ playerid ] = 0; VrstaIlegala[ playerid ] = 0;

		}
		
	}
	else if( dialogid == dialog_KUPUJEILMETH )
	{
		if( !response ) return true;
		new kolicina;
		if( response )
		{
			if( sscanf( inputtext, "i", kolicina ) ) return ShowPlayerDialog( playerid, dialog_KUPUJEILMETH , DSI, "Ilegalne supstance", "Unesite kolicinu methylamina koju zelite da kupite:", "Uredu", "Izlaz" );
			if( PlayerInfo[ playerid ][ xNovac ] < kolicina*3) return GRESKA( playerid, "Nemate dovoljno novca (1 gram = 3$)!");
			DajIgracuNovac( playerid, -kolicina*3) ;
			PlayerInfo[ playerid ][ xMetilAmin ] += kolicina;
			SendInfoMessage(playerid,"Kupili ste %d grama methylamina!", KolicinaIlegala[ playerid ] );
			KolicinaIlegala[ playerid ] = 0; VrstaIlegala[ playerid ] = 0;

		}

	}
	
	
	
	else if( dialogid == dialog_fixcar )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
				
					if( PlayerInfo[ playerid ][ xAdmin ] < 1337 && PlayerInfo[ playerid ][ xWanted ] != 0 ) return GRESKA( playerid, "Ne mozete popravljati vozilo dok imate trazeni level!");
					if( IsPlayerInAnyVehicle( playerid ) )
					{
					
						Dimi_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
						Dimi_SetVehicleHealth( GetPlayerVehicleID( playerid ), 1000.0 );
						antiCheatCS[ playerid ][ VehRepairTime ] = 3;
						vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
						SendInfoMessage( playerid, "Uspjesno ste popravili svoje vozilo!" );
						format( globalstring, sizeof( globalstring ), "{FF0000}|| FIX || "SERVERBOJA_AQUA"%s {FFFFFF}je popravio svoje vozilo!", ImeIgraca( playerid ) );
						AdminPoruka( -1, globalstring );
					}
					else return GRESKA( playerid, "Ne nalazite se u vozilu!" );
				}
				case 1:
				{
				
					if( PlayerInfo[ playerid ][ xAdmin ] < 1337 && PlayerInfo[ playerid ][ xWanted ] != 0) return GRESKA(playerid, "Ne mozete popravljati vozila dok imate trazeni level!");
					if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					
					for(new i = 1; i <= MAX_VEHICLES; i++) if(IsValidVehicle( i ))
					{
						Dimi_SetVehicleHealth( i, 1000.0 );
						vCanDrive[ i ] = 1;
						for(new play; play < MAX_PLAYERS; play++)
						{
							if( IsPlayerInVehicle( play, i ) && GetPlayerState( play ) == PLAYER_STATE_DRIVER )
							{
								Dimi_RepairVehicle( play, i );
								antiCheatCS[ play ][ VehRepairTime ] = 3;
							}
							else Dimi_RepairVehicle( -1, i );
						}
					}
					SendInfoMessage( playerid, "Uspjesno ste popravili sva vozila na serveru!" );
					new string[100];
					format(string,sizeof(string),"{FF0000}|| A-FIX || "SERVERBOJA_AQUA"%s {FFFFFF}je popravio sva vozila na serveru!", ImeIgraca( playerid ) );
					SCMA( -1, string);
				}
				case 2:
				{
					if( PlayerInfo[ playerid ][ xAdmin ] < 1337 && PlayerInfo[ playerid ][ xWanted ] != 0) return GRESKA(playerid, "Ne mozete popravljati vozila dok imate trazeni level!");
					//if( PlayerInfo[ playerid ][ xAdmin ] < 4 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					ShowPlayerDialog( playerid, dialog_fixcar2, DSI,"Popravak vozila",""col_white"Unesite ID igraca kojem popravljate vozilo:", D_ODABERI, D_ODUSTANI);
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xAdmin ] < 1337 && PlayerInfo[ playerid ][ xWanted ] != 0) return GRESKA(playerid, "Ne mozete popravljati vozila dok imate wanted level!");
					if( PlayerInfo[ playerid ][ xAdmin ] < 6 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					new Float:fX, Float:fY, Float:fZ;
					for (new i = 1; i != MAX_VEHICLES; i ++) if(IsValidVehicle( i ) && GetVehiclePos(i, fX, fY, fZ))
					{
						if( IsPlayerInRangeOfPoint( playerid, 40.0, fX, fY, fZ ) )
						{
							Dimi_SetVehicleHealth( i, 1000.0 );
							vCanDrive[ i ] = 1;
							for(new play; play < MAX_PLAYERS; play++)
							{
								if( IsPlayerInVehicle( play, i ) && GetPlayerState( play ) == PLAYER_STATE_DRIVER )
								{
									Dimi_RepairVehicle( play, i );
									antiCheatCS[ play ][ VehRepairTime ] = 3;
								}
								else Dimi_RepairVehicle( -1, i );
							}
						}
					}
					SendInfoMessage( playerid, "Uspjesno ste popravili sva vozila u radiusu od 40m!" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| R-FIX || "SERVERBOJA_AQUA"%s {FFFFFF}je popravio sva vozila radiusu od 40m!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 4:
				{
					if( PlayerInfo[ playerid ][ xAdmin ] < 1337 && PlayerInfo[ playerid ][ xWanted ] != 0) return GRESKA(playerid, "Ne mozete popravljati vozila dok imate trazeni level!");
					if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA(playerid, "Ne nalazite se u vozilu!");
					
					new Float:angle;
					
					GetVehicleZAngle( GetPlayerVehicleID( playerid ), angle); SetVehicleZAngle( GetPlayerVehicleID( playerid ), angle);
					Dimi_RepairVehicle( playerid, GetPlayerVehicleID( playerid ) );
					Dimi_SetVehicleHealth( GetPlayerVehicleID( playerid ), 1000.0 );
					vCanDrive[ GetPlayerVehicleID( playerid ) ] = 1;
					SendInfoMessage( playerid, "Okrenuli ste i popravili vozilo!" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| FLIP || "SERVERBOJA_AQUA"%s {FFFFFF}je okrenuo i popavio svoje vozilo!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
			}
		}
	}
	else if( dialogid == dialog_fixcar2 )
	{
		if( !response ) return true;
		if( response )
		{
			if( PlayerInfo[ playerid ][ xAdmin ] >= 1 || PlayerInfo[ playerid ][ xHelper ] >= 1 || PlayerInfo[ playerid ][ xVIPLevel ] >= 4 )
			{
				new id; id = strval(inputtext);
				
				if( !IsPlayerConnected( id )) return GRESKA(playerid,"Igrac nije na serveru!");
				if( !IsPlayerInAnyVehicle( id )) return GRESKA(playerid, "Odabrani igrac nije u vozilu!");
				if( PlayerInfo[ id ][ xWanted ] != 0) return GRESKA(playerid,"Taj igrac ima trazeni level, ne mozete mu popraviti vozilo!");
				
				Dimi_RepairVehicle( playerid, GetPlayerVehicleID( id ) );
				Dimi_SetVehicleHealth( GetPlayerVehicleID( id ), 1000.0 );
				antiCheatCS[ id ][ VehRepairTime ] = 3;
				vCanDrive[ GetPlayerVehicleID( id ) ] = 1;
				
				SendInfoMessage( playerid, "Popravili ste vozilo igraca: %s!", ImeIgraca( id ) );
				
				SendInfoMessage( id, "%s Vam je popravio vozilo!", ImeIgraca( playerid ) );
				
				format( globalstring, sizeof( globalstring ), "{FF0000}|| P-FIX || "SERVERBOJA_AQUA"%s {FFFFFF}je popravio vozilo igracu "SERVERBOJA_AQUA"%s", ImeIgraca( playerid ), ImeIgraca( id ));
				AdminPoruka( -1, globalstring );
			}
			else return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
		}
	}
	else if( dialogid == dialog_PITAADMINA )
	{
		if( !response ) return true;
		if( response )
		{
			if( PlayerCuffed[ playerid ] >= 1 ) return GRESKA( playerid, "Ne mozes kad si zaveza/tazovan!");
			if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return GRESKA( playerid, "Zatvoreni ste!" );
			if( ServerInfo[ Pitanja ] == false ) return GRESKA( playerid, "Slanje pitanja je trenutno iskljuceno!" );
			if( PlayerInfo[ playerid ][ xMute ] != 0) return GRESKA( playerid, "Mutirani ste !");
			if( askqInfo[ playerid ][ askqSended ] == true ) return GRESKA( playerid, "Vi ste vec poslali pitanje, molimo za strpljenje - pustite i druge da pitaju!" );
			new askQ = -1;
			for( new id = 1; id < MAX_ASKQS; id++ )
			{
				if( askqList[ id ][ askqSend ] == false )
				{
					askQ = id;
					break;
				}
			}
			if( askQ == -1 ) return GRESKA( playerid, "Lista pitanja je puna sacekajte malo!" );
			new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) )
			{
				ShowPlayerDialog( playerid, dialog_PITAADMINA, DSI, "Posalji upit", "Upisite i posaljite vase pitanje Admin/GM timu.\nOdgovor cete dobiti u najkracem roku\nCijena upita: 100$", "Uredu", "Izlaz" );
				return 1;
			}
			askqList[ askQ ][ askqSend ] = true;
			askqList[ askQ ][ askqID ] = playerid;
			askqInfo[ playerid ][ askqSended ] = true;
			askqInfo[ playerid ][ askqAnswered ] = false;
			strmid( askqList[ askQ ][ askqOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
			strmid( askqList[ askQ ][ askqQuestion ], text, 0, strlen( text ), 128 );
			SendInfoMessage( playerid, "Poslali ste pitanje administraciji, sacekajte malo - ocekujte brz i jasan odgovor!" );
			SendClientMessagee(playerid, -1, "Naplaceno Vam je 100$ novca!");
			format( globalstring, sizeof( globalstring ), "{FF0000}[info] {FFFFFF}Igrac "SERVERBOJA_AQUA"%s {FFFFFF}je poslao pitanje, /pitanja da vidite pitanje!", ImeIgraca( playerid ) );
			DajIgracuNovac( playerid, -100);
			RPTChat( -1, globalstring );
		}
	
	}
	else if( dialogid == dialog_FARBANJEVOZILAODABIR1 )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem == 0 )
			{
				ShowPlayerDialog( playerid, dialog_FARBANJEVOZILAODABIR2, DSL, "Odaberite slot boje vozila", "Boja vozila 1\nBoja vozila 2", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 1 )
			{
				ShowPlayerDialog( playerid, dialog_FARBANJEVOZILAODABIR5, DSI, "Odabir boje po zelji", "Unesite id boje 1 i id boje 2 za vase vozilo\nPrimjer: 0 6", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	
	else if( dialogid == dialog_FARBANJEVOZILAODABIR5 )
	{
		if( !response ) return true;
		if( response )
		{
			new boja1,boja2;
			new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( sscanf( inputtext, "ii", boja1,boja2 ) ) return ShowPlayerDialog( playerid, dialog_FARBANJEVOZILAODABIR5, DSI, "Odabir boje po zelji", "Unesite id boje 1 i id boje 2 za vase vozilo\nPrimjer: 0 6", D_ODABERI, D_ODUSTANI );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "ID boje ne moze biti manji od 0 ili veci od 255" );
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "ID boje ne moze biti manji od 0 ili veci od 255" );
			VehicleInfo[ autoid ][ vColor1 ] = boja1;
			VehicleInfo[ autoid ][ vColor2 ] = boja2;
			ChangeVehicleColor( GetPlayerVehicleID( playerid ), boja1, boja2 );
			SaveVehicle( autoid );
			DajIgracuNovac( playerid, -500);
			SendInfoMessage(playerid,"Ofarbali ste vase vozilo i platili 500$");
		}
	
	
	
	}
	
	else if( dialogid == dialog_SIPAGORIVOUSERVISU )
	{
		if( !response ) return true;
		if( response )
		{
			new fuel;
			new vehicleid = GetPlayerVehicleID( playerid );
			if( sscanf( inputtext, "i",fuel) ) return ShowPlayerDialog( playerid, dialog_SIPAGORIVOUSERVISU, DSI, "Sipanje goriva", "Unesite koliko litara goriva zelite nasuti u vozilo", "Uredu", "Izlaz");
			if(fuel < 0 || fuel > 100) return GRESKA( playerid, "Kolicina goriva ne moze biti manja od 0 niti veca od 100L" );
			if( (fuel+Fuel[ vehicleid ]) > getAmountFuel( vehicleid ) )
			{
				GRESKA( playerid, "Ne moze toliko goriva stati u vase vozilo!");
				return 1;
			}
			PuniGorivo[ playerid ] = true;
			Fuel[ vehicleid ] += fuel;
			DajIgracuNovac( playerid, -fuel*20 );
			SendClientMessageEx( playerid, SVETLOPLAVA, "* Napunili ste svoje vozilo sa %dL, i platili $%d",fuel, fuel*20 );
			PuniGorivo[ playerid ] = false;
		}



	}
	
	else if( dialogid == dialog_FARBANJEVOZILAODABIR2 )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem == 0 )
			{
				ShowPlayerDialog(playerid, dialog_FARBANJEVOZILAODABIR3, DIALOG_STYLE_TABLIST_HEADERS, "Odabir boje",
				"{FFFFFF}Boja\tCijena\tUzorak\n\
				{FFFFFF}Crna\t$100\t{292929}||||\n\
				{FFFFFF}Bijela\t$100\t||||\n\
				{FFFFFF}Siva\t$100\t"SERVERBOJA_AQUA"||||\n\
				{FFFFFF}Crvena\t$100\t{C10000}||||\n\
				{FFFFFF}Narandjasta\t$100\t{CC6600}||||\n\
				{FFFFFF}Zuta\t$100\t{D6CC10}||||\n\
				{FFFFFF}Zelena\t$100\t{007D3F}||||\n\
				{FFFFFF}Plava\t$100\t{008ED2}||||\n\
				{FFFFFF}Ljubicasta\t$100\t{BB06BF}||||\n\
				{FFFFFF}Pink\t$100\t{FF80FF}||||\n\
				{FFFFFF}Smedja\t$100\t{6D3636}||||", // Etc.
				"Odabir", "Izlaz");
			}
			if( listitem == 1 )
			{
				ShowPlayerDialog(playerid, dialog_FARBANJEVOZILAODABIR4, DIALOG_STYLE_TABLIST_HEADERS, "Odabir boje",
				"{FFFFFF}Boja\tCijena\tUzorak\n\
				{FFFFFF}Crna\t$100\t{292929}||||\n\
				{FFFFFF}Bijela\t$100\t||||\n\
				{FFFFFF}Siva\t$100\t"SERVERBOJA_AQUA"||||\n\
				{FFFFFF}Crvena\t$100\t{C10000}||||\n\
				{FFFFFF}Narandjasta\t$100\t{CC6600}||||\n\
				{FFFFFF}Zuta\t$100\t{D6CC10}||||\n\
				{FFFFFF}Zelena\t$100\t{007D3F}||||\n\
				{FFFFFF}Plava\t$100\t{008ED2}||||\n\
				{FFFFFF}Ljubicasta\t$100\t{BB06BF}||||\n\
				{FFFFFF}Pink\t$100\t{FF80FF}||||\n\
				{FFFFFF}Smedja\t$100\t{6D3636}||||", // Etc.
				"Odabir", "Izlaz");
			}
		}
	}
	
	else if( dialogid == dialog_FARBANJEVOZILAODABIR3 )
	{
		if( !response ) return true;
		if( response )
		{
			new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( listitem == 0 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 0;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 1 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 1;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 2 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 8;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 3 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 3;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 4 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 219;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 5 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 6;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 6 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 16;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 7 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 2;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 8 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 5;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 9 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 126;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 10 )
			{
				VehicleInfo[ autoid ][ vColor1 ] = 30;
				VehicleInfo[ autoid ][ vColor2 ] = VehicleInfo[ autoid ][ vColor2 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			DajIgracuNovac( playerid, -100);
			SendInfoMessage(playerid,"Ofarbali ste vase vozilo i platili 100$");
			
		}
	}
	
	else if( dialogid == dialog_FARBANJEVOZILAODABIR4 )
	{
		if( !response ) return true;
		if( response )
		{
			new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( listitem == 0 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 0;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 1 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 1;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 2 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 8;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 3 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 3;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 4 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 219;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 5 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 6;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 6 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 16;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 7 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 2;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 8 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 5;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 9 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 126;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			if( listitem == 10 )
			{
				VehicleInfo[ autoid ][ vColor2 ] = 30;
				VehicleInfo[ autoid ][ vColor1 ] = VehicleInfo[ autoid ][ vColor1 ];
				ChangeVehicleColor( GetPlayerVehicleID( playerid ), VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ] );
				SaveVehicle( autoid );
			}
			DajIgracuNovac( playerid, -100);
			SendInfoMessage(playerid,"Ofarbali ste vase vozilo i platili 100$");

		}
	}
	
	else if( dialogid == dialog_EDITKOSACAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITKOSACAPLATA, DSI, "Kosac trave", "Unesite kolika ce biti plata kosaca trave:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PlataKosaca ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu kosaca trave na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITKOSACABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITKOSACABONUS, DSI, "Kosac trave", "Unesite koliki ce biti bonus na platu kosaca trave:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusKosaca ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus na platu kosaca trave na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITKOSACA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
			
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITKOSACAPLATA, DSI, "Kosac trave", "Unesite kolika ce biti plata kosaca trave:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITKOSACABONUS, DSI, "Kosac trave", "Unesite koliki ce biti bonus na platu kosaca trave:", D_ODABERI, D_ODUSTANI );
				}
			
			}
		}
	
	}
	
	
	else if( dialogid == dialog_EDITGRADJEVINARAZEMLJAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARAZEMLJAPLATA, DSI, "Gradjevinar", "Unesite kolika ce biti plata za ravnanje zemlje:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ GradjevinarZemljaPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu za ravnanje zemlje na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITGRADJEVINARAZEMLJABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARAZEMLJABONUS, DSI, "Gradjevinar", "Unesite koliki ce biti bonus za ravnanje zemlje:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusGradjevinarZemlja ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus za ravnanje zemlje na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITGRADJEVINARABETONPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARABETONPLATA, DSI, "Gradjevinar", "Unesite kolika ce biti plata za dostavu betona:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ GradjevinarBetonPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu za dostavu betona na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITGRADJEVINARABETONBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARABETONBONUS, DSI, "Gradjevinar", "Unesite koliki ce biti bonus za dostavu betona:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusGradjevinarBeton ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus za dostavu betona na %d$",broj);
			SavePosloviInfo( );
		}
	}
	

	
	else if( dialogid == dialog_EDITGRADJEVINARA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARAZEMLJAPLATA, DSI, "Gradjevinar", "Unesite kolika ce biti plata za ravnanje zemlje:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARAZEMLJABONUS, DSI, "Gradjevinar", "Unesite koliki ce biti bonus za ravnanje zemlje:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARABETONPLATA, DSI, "Gradjevinar", "Unesite kolika ce biti plata za dostavu betona:", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARABETONBONUS, DSI, "Gradjevinar", "Unesite koliki ce biti bonus za dostavu betona:", D_ODABERI, D_ODUSTANI );
				}
				
			}
		}
	}
	
	else if( dialogid == dialog_EDITRUDARISKOP )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITRUDARISKOP, DSI, "RUDAR", "Unesite koliko se moze iskopati grama zlata:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ RudarGramiZlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste iskop zlata rudara na %dg",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITRUDARPREVOZPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITRUDARPREVOZPLATA, DSI, "RUDAR", "Unesite kolika je plata prevoza zlata:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ RudarDostavaPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu prevoza zlata na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITRUDARPREVOZBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITRUDARPREVOZBONUS, DSI, "RUDAR", "Unesite koliki je bonus prevoza zlata:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusRudarDostava ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus prevoza zlata na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITRUDARA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITRUDARISKOP, DSI, "RUDAR", "Unesite koliko se moze iskopati grama zlata:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITRUDARPREVOZPLATA, DSI, "RUDAR", "Unesite kolika je plata prevoza zlata:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITRUDARPREVOZBONUS, DSI, "RUDAR", "Unesite koliki je bonus prevoza zlata:", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}

	
	else if( dialogid == dialog_EDITDJUBRETARPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITDJUBRETARPLATA, DSI, "DJUBRETAR", "Unesite kolika je plata djubretara:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ DjubretarPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu djubretara na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITDJUBRETARBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITDJUBRETARBONUS, DSI, "DJUBRETAR", "Unesite koliki je bonus djubretara:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusDjubretara ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus djubretara na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITCISTACPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITCISTACPLATA, DSI, "CISTAC ULICE", "Unesite kolika je plata cistaca ulica:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ CistacUlicePlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu cistaca ulica na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITCISTACBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITCISTACBONUS, DSI, "CISTAC ULICE", "Unesite koliki je bonus cistaca ulica:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusCistacaUlica ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus cistaca ulica na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITKOMUNALCA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITDJUBRETARPLATA, DSI, "DJUBRETAR", "Unesite kolika je plata djubretara:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITDJUBRETARBONUS, DSI, "DJUBRETAR", "Unesite koliki je bonus djubretara:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITCISTACPLATA, DSI, "CISTAC ULICE", "Unesite kolika je plata cistaca ulica:", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITCISTACBONUS, DSI, "CISTAC ULICE", "Unesite koliki je bonus cistaca ulica:", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}

	
	else if( dialogid == dialog_EDITTEMPAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITTEMPAPLATA, DSI, "Tempo dostavljac", "Unesite kolika je plata dostave robe:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PlataTempo ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu Tempo dostavljaca na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITTEMPABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITTEMPABONUS, DSI, "Tempo dostavljac", "Unesite koliki je bonus dostave robe:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusTempo ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus Tempo dostavljaca na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITTEMPA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITTEMPAPLATA, DSI, "Tempo dostavljac", "Unesite kolika je plata dostave robe:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITTEMPABONUS, DSI, "Tempo dostavljac", "Unesite koliki je bonus dostave robe:", D_ODABERI, D_ODUSTANI );
				}

			}
			
		}
		
	}
	
	else if( dialogid == dialog_EDITDPIZZE )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITPIZZADOSTAVAPLATA, DSI, "Dostavljac pizze", "Unesite kolika je cijena jedne pizze:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITPIZZADOSTAVABONUS, DSI, "Dostavljac pizze", "Unesite koliki je bonus na cijenu pizze:", D_ODABERI, D_ODUSTANI );
				}

			}

		}

	}
	
	else if( dialogid == dialog_EDITPIZZADOSTAVAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPIZZADOSTAVAPLATA, DSI, "Dostavljac pizze", "Unesite kolika je cijena jedne pizze:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ DostavljacPizzePlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste cijenu jedne pizze na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITPIZZADOSTAVABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPIZZADOSTAVABONUS, DSI, "Dostavljac pizze", "Unesite koliki je bonus na cijenu pizze:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusPizza ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus jedne pizze na %d$",broj);
			SavePosloviInfo( );
		}
	}
	

	else if( dialogid == dialog_EDITMEHANICARA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITMEHANICARMOTOR, DSI, "Mehanicar", "Unesite kolika je cijena popravke motora:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITMEHANICARGUME, DSI, "Mehanicar", "Unesite kolika je cijena popravke guma:", D_ODABERI, D_ODUSTANI );
				}

			}

		}

	}
	
	else if( dialogid == dialog_EDITMEHANICARMOTOR )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITMEHANICARMOTOR, DSI, "Mehanicar", "Unesite kolika je cijena popravke motora:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ MehanicarMotorPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste cijenu popravke motora na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITMEHANICARGUME )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITMEHANICARGUME, DSI, "Mehanicar", "Unesite kolika je cijena popravke guma:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ MehanicarGumePlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste cijenu popravke guma na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITBUSVOZACA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSBGPLATA, DSI, "Bus vozac", "Unesite kolika je plata BG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSBGBONUS, DSI, "Bus vozac", "Unesite koliki je bonus BG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSSAPLATA, DSI, "Bus vozac", "Unesite kolika je plata SA linije:", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSSABONUS, DSI, "Bus vozac", "Unesite koliki je bonus SA linije:", D_ODABERI, D_ODUSTANI );
				}
				case 4:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSZGPLATA, DSI, "Bus vozac", "Unesite kolika je plata ZG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 5:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSZGBONUS, DSI, "Bus vozac", "Unesite koliki je bonus ZG linije:", D_ODABERI, D_ODUSTANI );
				}

			}

		}

	}
	
	else if( dialogid == dialog_EDITBUSBGPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSBGPLATA, DSI, "Bus vozac", "Unesite kolika je plata BG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PlataBusBG ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu BG linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITBUSBGBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSBGBONUS, DSI, "Bus vozac", "Unesite koliki je bonus BG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusBusBG ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus BG linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	
	//----------------------------------------------------------------------------
	
	else if( dialogid == dialog_EDITBUSSAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSSAPLATA, DSI, "Bus vozac", "Unesite kolika je plata SA linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PlataBusSA ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu SA linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITBUSSABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSSABONUS, DSI, "Bus vozac", "Unesite koliki je bonus SA linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusBusSA ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus SA linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	
	//----------------------------------------------------------------------------

	else if( dialogid == dialog_EDITBUSZGPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSZGPLATA, DSI, "Bus vozac", "Unesite kolika je plata ZG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PlataBusZG ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu ZG linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITBUSZGBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITBUSZGBONUS, DSI, "Bus vozac", "Unesite koliki je bonus ZG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusBusZG ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus ZG linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITFARMERA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMMLIJEKOPLATA , DSI, "Farmer", "Unesite kolika je plata za pomuzeno mlijeko:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMMLIJEKOBONUS, DSI, "Farmer", "Unesite koliki je bonus za pomuzeno mlijeko:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMBERACPLATA, DSI, "Farmer", "Unesite kolika je plata beraca voca:", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMBERACBONUS, DSI, "Farmer", "Unesite koliki je bonus beraca voca:", D_ODABERI, D_ODUSTANI );
				}
				case 4:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMZITOPLATA, DSI, "Farmer", "Unesite kolika je plata vrsenja zita:", D_ODABERI, D_ODUSTANI );
				}
				case 5:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMZITOBONUS, DSI, "Farmer", "Unesite koliki je bonus vrsenja zita:", D_ODABERI, D_ODUSTANI );
				}

			}

		}

	}

	else if( dialogid == dialog_EDITFARMMLIJEKOPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMMLIJEKOPLATA , DSI, "Farmer", "Unesite kolika je plata za pomuzeno mlijeko:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ FarmerMlijekoPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu pomuzenog mlijeka na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITFARMMLIJEKOBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMMLIJEKOBONUS, DSI, "Farmer", "Unesite koliki je bonus za pomuzeno mlijeko:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusMlijeko ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus pomuzenog mlijeka na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITFARMBERACPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMBERACPLATA, DSI, "Farmer", "Unesite kolika je plata beraca voca:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ FarmerBeracPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu beraca voca na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITFARMBERACBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMBERACBONUS, DSI, "Farmer", "Unesite koliki je bonus beraca voca:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusBerac ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus beraca voca na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITFARMZITOPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMZITOPLATA, DSI, "Farmer", "Unesite kolika je plata vrsenja zita:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ FarmerZitoPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu vrsenja zita na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	else if( dialogid == dialog_EDITFARMZITOBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITFARMZITOBONUS, DSI, "Farmer", "Unesite koliki je bonus vrsenja zita:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusFarmerZito ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus vrsenja zita na %d$",broj);
			SavePosloviInfo( );
		}
	}



	else if( dialogid ==  dialog_EDITPILOTA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTSAPLATA , DSI, "Pilot", "Unesite kolika je plata SA linije:", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTSABONUS, DSI, "Pilot", "Unesite koliki je bonus SA linije:", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTZGPLATA, DSI, "Pilot", "Unesite kolika je plata ZG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTZGBONUS, DSI, "Pilot", "Unesite koliki je bonus ZG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 4:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTBGPLATA, DSI, "Pilot", "Unesite kolika je plata BG linije:", D_ODABERI, D_ODUSTANI );
				}
				case 5:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTBGBONUS, DSI, "Pilot", "Unesite koliki je bonus BG linije", D_ODABERI, D_ODUSTANI );
				}

			}

		}

	}


	else if( dialogid == dialog_EDITPILOTBGPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTBGPLATA , DSI, "Pilot", "Unesite kolika je plata BG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PilotBGPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu BG avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITPILOTBGBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTBGBONUS, DSI, "Pilot", "Unesite koliki je bonus BG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusPilotBG ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus BG avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	//--------------------------------------------------------------------------
	
	
	
	else if( dialogid == dialog_EDITPILOTSAPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTSAPLATA , DSI, "Pilot", "Unesite kolika je plata SA linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PilotSAPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu SA avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITPILOTSABONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTSABONUS, DSI, "Pilot", "Unesite koliki je bonus SA linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusPilotSA ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus SA avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	
	else if( dialogid == dialog_EDITPILOTZGPLATA )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTZGPLATA , DSI, "Pilot", "Unesite kolika je plata ZG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ PilotZGPlata ] = broj;
			SendInfoMessage(playerid, "Postavili ste platu ZG avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}

	else if( dialogid == dialog_EDITPILOTZGBONUS )
	{
		if( !response ) return true;
		if( response )
		{
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_EDITPILOTZGBONUS, DSI, "Pilot", "Unesite koliki je bonus ZG linije:", D_ODABERI, D_ODUSTANI );
			PosloviInfo[ BonusPilotZG ] = broj;
			SendInfoMessage(playerid, "Postavili ste bonus ZG avio linije na %d$",broj);
			SavePosloviInfo( );
		}
	}
	
	
	
	


	else if( dialogid == dialog_EDITPOSLOVA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_EDITKOSACA, DSL, "Kosac trave", "Plata\nBonus", D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_EDITGRADJEVINARA, DSL, "Gradjevinar", "Ravnanje plata\nBonus ravnanje\nPrevoz plata\nBonus prevoza", D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					ShowPlayerDialog( playerid, dialog_EDITRUDARA, DSL, "Rudar", "Iskopavanje\nPrevoz plata\nPrevoz bonus", D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					ShowPlayerDialog( playerid, dialog_EDITKOMUNALCA, DSL, "Komunalac", "Djubretar plata\nDjubretar bonus\nCistac plata\nCistac bonus", D_ODABERI, D_ODUSTANI );
				}
				case 4:
				{
					ShowPlayerDialog( playerid, dialog_EDITTEMPA, DSL, "Tempo dostavljac", "Dostava plata\nDostava bonus", D_ODABERI, D_ODUSTANI );
				}
				case 5:
				{
					ShowPlayerDialog( playerid, dialog_EDITDPIZZE, DSL, "Dostavljac pizze", "Cijena pizze\nPizza bonus", D_ODABERI, D_ODUSTANI );
				}
				case 6:
				{
					ShowPlayerDialog( playerid, dialog_EDITMEHANICARA, DSL, "Mehanicar", "Popravka motora\nPopravka guma", D_ODABERI, D_ODUSTANI );
				}
				case 7:
				{
					ShowPlayerDialog( playerid, dialog_EDITBUSVOZACA, DSL, "Bus vozac", "Plata BG\nBonus BG\nPlata SA\nBonus SA\nPlata ZG\nBonus ZG", D_ODABERI, D_ODUSTANI );
				}
				case 8:
				{
					ShowPlayerDialog( playerid, dialog_EDITFARMERA, DSL, "Farmer", "Plata mlijeko\nBonus mlijeko\nPlata berac\nBonus berac\nPlata zito\nBonus zito", D_ODABERI, D_ODUSTANI );
				}
				case 9:
				{
					ShowPlayerDialog( playerid, dialog_EDITPILOTA, DSL, "Pilot", "Plata SA\nBonus SA\nPlata ZG\nBonus ZG", D_ODABERI, D_ODUSTANI );
				}
				

			 }
	
	
	
	
		}
		
		
		
	
	}
	else if( dialogid == dialog_SERVERMI )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem == 0 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				ShowPlayerDialog( playerid, dialog_SERVERSTATS, DSL, D_NASLOV, "Informacije servera\nMogucnost kupovine vozila\nSrecni sati\nMogucnost slanja pitanja\nMogucnost slanja reporta\nPromeni pocetni level\nPromeni pocetni novac\nMogucnost postavljanja oglasa\nMogucnost registracije", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 1 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				for(new i; i < MAX_PLAYERS; i++)
				{
					if( PlayerLogged[ i ] == true )
					{
						SavePlayer( i );
					}
				}
				SCMA( UGBOJA, "KORISNICKI RACUNI ||: {FFFFFF}Server je uspjesno sacuvao sve korisnicke racune u bazi podataka!" );
			}
			if( listitem == 2 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );
			}

			if( listitem == 3 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				ShowPlayerDialog ( playerid, dialog_IZBRISISVE, DSL, D_NASLOV, "Organizacije\nFirme\nImovina\nKontejner\nVozilo\nBankomat\nAuto salon\nPort orge\nHotel\nKapija\nImanje\nGaraza\nRadar\nGang Zona\nPoklon\nJelka\nLampa", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 4 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				ShowPlayerDialog ( playerid, dialog_IZMENISVE, DSL, D_NASLOV, "Organizacije\nFirme\nVozilo\nImovina\nHotel\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nGM port\nAuto Salon\nGang Zona", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 5 ) {
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				for( new i = 1; i < MAX_ORG; i++)
				{
					new oFile[40];
					format(oFile, sizeof( oFile ), O_FILE, i);
					if(fexist(oFile))
					{
						if(OI[ i ][ oCreated ] == 1)
						{
							format( globalstring, sizeof( globalstring ), "ID : %d | Ime organizacije: %s\n", OI[ i ][ oID ], OI[ i ][ oName ] );
							strcat( DialogStrgEx, globalstring );
						}
					}
				}
				ShowPlayerDialog( playerid, dialog_ORGLIST, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 6 ) {
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				format( globalstring, sizeof( globalstring ), "antiWeaponHack/%s/%s\n", getCheatPower( antiCheatSS[ antiWeaponH ] ), getCheatWork( antiCheatSS[ WeaponHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiTeleportHack/%s/%s\n", getCheatPower( antiCheatSS[ antiTeleportH ] ), getCheatWork( antiCheatSS[ TeleportHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiFlyHack/%s/%s\n", getCheatPower( antiCheatSS[ antiFlyH ] ), getCheatWork( antiCheatSS[ FlyHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiVehRepHack/%s/%s\n", getCheatPower( antiCheatSS[ antiVehRepair ] ), getCheatWork( antiCheatSS[ VehRepRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiJetpackHack/%s/%s\n", getCheatPower( antiCheatSS[ antiJetPackH ] ), getCheatWork( antiCheatSS[ JetPackHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				format( globalstring, sizeof( globalstring ), "antiSpeedHack/%s/%s", getCheatPower( antiCheatSS[ antiSpeedH ] ), getCheatWork( antiCheatSS[ SpeedHRezimRada ] ) );
				strcat( DialogStrgEx, globalstring );
				ShowPlayerDialog( playerid, dialog_ANTICHEAT, DSL, "AntiCheat sistem", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			if( listitem == 7 )
			{
				if(ServerInfo[HappyJobs] == true)
				{
					ServerInfo[HappyJobs] = false;
					SendInfoMessage(playerid,"Iskljucili ste HappyJobs (srecne i dodatne plate) na payday-u!");
					return 1;
				}
				else if(ServerInfo[HappyJobs] == false)
				{
					ServerInfo[HappyJobs] = true;
					SendInfoMessage(playerid,"Ukljucili ste HappyJobs sistem (srecne i dodatne plate) na payday-u!");
					return 1;
				}
			}
			if( listitem == 8 )
			{
				if( !AdminDuty[ playerid ] ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovo - morate biti administrator na duznosti!" );
				if( !RconAdmin[ playerid ] ) return GRESKA( playerid, "Morate biti RCON administrator da koristite ovu komandu!" );
				for(new i; i < MAX_PLAYERS; i++)
				{
					if( i != IPI )
					{
						TogglePlayerControllable( i, false );
						SavePlayer( i );
					}
				}
				GameTextForAll( "~w~Pokrenuto je ~y~odrzavanje ~w~i ~y~azuriranje ~w~servera, molimo Vas da napustite ~y~igru - hvala!", 15000, 5 );
				SendRconCommand( "hostname :[NE:RP]: - Nova Era - || Azuriranje... ||" );
				SendRconCommand( "password 364" );
			}
			if( listitem == 9 )
			{
				if(ServerInfo[Reklamiranje] == 0)
				{
					ServerInfo[Reklamiranje] = 1;
					SCMA(-1,""SERVERBOJA_AQUA"[REKLAMIRANJE]: {ffffff} Admin je ukljucio marketing tim reklamiranje!");
					return 1;
				}
				if(ServerInfo[Reklamiranje] == 1)
				{
					ServerInfo[Reklamiranje] = 0;
					SCMA(-1,""SERVERBOJA_AQUA"[REKLAMIRANJE]: {ffffff} Admin je iskljucio marketing tim reklamiranje!");
					return 1;
				}
			}
			if(listitem == 10 )
			{
				if( PlayerInfo[playerid][xAdmin] < 7 ) return greska(playerid,"Niste owner!");
				if(UkljucenBH == 1)
				{
					SendClientMessage( playerid, -1, ""col_balkanstory"[ BUNNY HOP ]: {FFFFFF}Iskljucili ste Anti-BH na serveru!" );
					SendClientMessageToAll(-1, ""col_balkanstory"[ BUNNY HOP ]: {FFFFFF}Administrator je iskljucio Anti-Bunny Hop na serveru!");
					for(new i; i < MAX_PLAYERS; i++)
					{
						UkljucenBH = 0;
					}
					return 1;
				}
				if(UkljucenBH == 0)
				{
					SendClientMessage( playerid, -1, ""col_balkanstory"[ BUNNY HOP ]: {FFFFFF}Ukljucili ste Anti-BH na serveru!" );
					SendClientMessageToAll(-1, ""col_balkanstory"[ BUNNY HOP ]: {FFFFFF}Administrator je ukljucio Anti-Bunny Hop na serveru!");
					for(new i; i < MAX_PLAYERS; i++)
					{
						UkljucenBH = 1;
					}
					return 1;
				}
			}
		}
	}
	else if( dialogid == dialog_SERVERSTATS ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					
					new coordsstring[ 128 ], srecnisati[ 11 ], mogucnostreporta[ 11 ], mogucnostpitanja[ 11 ], mogucnostkupovinev[ 11 ], oglasici[ 11 ], regic[ 11 ];
					
					if( ServerInfo[ HappyHours ] == true ) srecnisati = "Ukljuceni";
					else srecnisati = "Iskljuceni";
					
					if( ServerInfo[ KupovinaVozila ] == true ) mogucnostkupovinev = "ukljucena";
					else mogucnostkupovinev = "iskljucena";
					
					if( ServerInfo[ Report ] == true ) mogucnostreporta = "ukljucena";
					else mogucnostreporta = "iskljucena";
					
					if( ServerInfo[ Pitanja ] == true ) mogucnostpitanja = "ukljucena";
					else mogucnostpitanja = "iskljucena";
					
					if( ServerInfo[ Oglasi ] == true ) oglasici = "ukljucena";
					else oglasici = "iskljucena";
					
					if( ServerInfo[ Registracija ] == true ) regic = "ukljucena";
					else regic = "iskljucena";
					
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "__________________________________________________________________\n");
					format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno poseta servera: "col_balkanstory"%d "col_crvena"| "col_white"Ukupno registrovanih clanova: "col_balkanstory"%d\n", ServerInfo[ BrojPosetaServeru ], ServerInfo[ RegistrovanihKorisnika ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Ukupno banovanih korisnika: "col_balkanstory"%d "col_crvena"| "col_white"Ukupno kikovanih korisnika: "col_balkanstory"%d\n", ServerInfo[ BanovanihKorisnika ], ServerInfo[ KikovanihKorisnika ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Broj dodeljenih warnova: "col_balkanstory"%d "col_crvena"| "col_white"Srecni sati: "col_balkanstory"%s\n", ServerInfo[ BrojWarnova ], srecnisati );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Pocetni level: "col_balkanstory"%d "col_crvena"| "col_white"Pocetni novac: "col_balkanstory"%d$\n", ServerInfo[ PocetniLevel ], ServerInfo[ PocetniNovaca ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost kupovine vozila je "col_balkanstory"%s"col_white".\n", mogucnostkupovinev );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja pitanja Admin timu je "col_balkanstory"%s"col_white".\n", mogucnostpitanja );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost registracije je "col_balkanstory"%s"col_white".\n", regic );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost slanja reporta Admin timu je "col_balkanstory"%s"col_white".\n", mogucnostreporta );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Trenutni broj kreiranih vozila je "col_balkanstory"%d"col_white".\n", ServerInfo[ BrojKreiranihVozila ] );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Mogucnost postavljanja oglasa je "col_balkanstory"%s"col_white".\n", oglasici );
					strcat( DialogStrgEx, coordsstring );
					format( coordsstring, sizeof( coordsstring ), ""col_white"Rekord servera je "col_balkanstory"%d"col_white".\n", ServerInfo[ RekordServera ] );
					strcat( DialogStrgEx, coordsstring );
					strcat( DialogStrgEx, "__________________________________________________________________");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					
					SaveServerStats( );
				}
				case 1: {
					ServerStatsChose[ playerid ] = 1;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost kupovine vozila:", "Ukljuci", "Iskljuci" );
				}
				case 2: {
					ServerStatsChose[ playerid ] = 2;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Srecni sati( dupli respekti ):", "Ukljuci", "Iskljuci" );
				}
				case 3: {
					ServerStatsChose[ playerid ] = 3;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja pitanja:", "Ukljuci", "Iskljuci" );
				}
				case 4: {
					ServerStatsChose[ playerid ] = 4;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost slanja reporta:", "Ukljuci", "Iskljuci" );
				}
				case 5: {
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 6: {
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
				}
				case 7: {
					ServerStatsChose[ playerid ] = 5;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost postavljanja oglasa:", "Ukljuci", "Iskljuci" );
				}
				case 8: {
					ServerStatsChose[ playerid ] = 6;
					ShowPlayerDialog( playerid, dialog_SERVERSTATS_2, DSMSG, D_NASLOV, "Mogucnost registracije:", "Ukljuci", "Iskljuci" );
				}
			}
		}
	}
	else if( dialogid == dialog_SERVERSTATS_4 ) {
		if( !response ) return true;
		if( response ) {
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_4, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni novac igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
			if( broj < 1 ) return GRESKA( playerid, "Uneseni broj ne moze biti manji od 1." );

			ServerInfo[ PocetniNovaca ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni novac na "col_white"%d$.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_3 ) {
		if( !response ) return true;
		if( response ) {
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_SERVERSTATS_3, DSI, D_NASLOV, "Unesti broj koji predstavlja pocetni level igraca pri registraciji.", D_ODABERI, D_ODUSTANI );
			if( broj < 1 || broj > 5 ) return GRESKA( playerid, "Uneseni broj ne moze biti manji od 1 a veci od 5." );

			ServerInfo[ PocetniLevel ] = broj;
			SaveServerStats( );
			SendInfoMessage( playerid, "Postavili ste pocetni level na "col_white"%d.", broj );
		}
	}
	else if( dialogid == dialog_SERVERSTATS_2 ) {
		if( response ) {
			switch( ServerStatsChose[ playerid ] ) {
				case 1: {
					ServerInfo[ KupovinaVozila ] = true;
					SendInfoMessage( playerid, "Ukljucio si mogucnost kupovine vozila po salonima." );
				}
				case 2: {
					ServerInfo[ HappyHours ] = true;
					SendInfoMessage( playerid, "Ukljucio si srecne sate." );
				}
				case 3: {
					ServerInfo[ Pitanja ] = true;
					SendInfoMessage( playerid, "Ukljucio si mogucnost slanja pitanja Admin timu." );
				}
				case 4: {
					ServerInfo[ Report ] = true;
					SendInfoMessage( playerid, "Ukljucio si mogucnost slanja reporta Admin timu." );
				}
				case 5: {
					ServerInfo[ Oglasi ] = true;
					SendInfoMessage( playerid, "Ukljucio si mogucnost postavljanja oglasa." );
				}
				case 6: {
					ServerInfo[ Registracija ] = true;
					SendInfoMessage( playerid, "Ukljucio si mogucnost registracije." );
				}
			}
			SaveServerStats( );
		}
		else if( !response ) {
			switch( ServerStatsChose[ playerid ] ) {
				case 1: {
					ServerInfo[ KupovinaVozila ] = false;
					SendInfoMessage( playerid, "Iskljucio si mogucnost kupovine vozila po salonima." );
				}
				case 2: {
					ServerInfo[ HappyHours ] = false;
					SendInfoMessage( playerid, "Iskljucio si srecne sate." );
				}
				case 3: {
					ServerInfo[ Pitanja ] = false;
					SendInfoMessage( playerid, "Iskljucio si mogucnost slanja pitanja Admin timu." );
				}
				case 4: {
					ServerInfo[ Report ] = false;
					SendInfoMessage( playerid, "Iskljucio si mogucnost slanja reporta Admin timu." );
				}
				case 5: {
					ServerInfo[ Oglasi ] = false;
					SendInfoMessage( playerid, "Iskljucio si mogucnost postavljanja oglasa." );
				}
				case 6: {
					ServerInfo[ Registracija ] = false;
					SendInfoMessage( playerid, "Iskljucio si mogucnost registracije." );
				}
			}
			SaveServerStats( );
		}
	}
	else if( dialogid == dialog_ANTICHEAT ) {
		if( response ) {
			switch( listitem ) {
				case 0: {
					anticheatinfo[ playerid ] = 0;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiWeaponHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 1: {
					anticheatinfo[ playerid ] = 1;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiTeleportHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
					anticheatinfo[ playerid ] = 2;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiFlyHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
					anticheatinfo[ playerid ] = 3;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiVehRepHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 4: {
					anticheatinfo[ playerid ] = 4;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiJetpackHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
				case 5: {
					anticheatinfo[ playerid ] = 5;
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_2, DSL, "antiSpeedHack", "Iskljuci/Ukljuci\nPromeni rezim rada", D_ODABERI, D_ODUSTANI );
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nHappy Jobs\nAzuriranje servera - pokreni\nUkljuci/iskljuci reklamiranje\nAnti - Bunny Hop", D_ODABERI, D_ODUSTANI );/*ShowPlayerDialog( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nHappy Jobs", D_ODABERI, D_ODUSTANI );*/ }
	}
	else if( dialogid == dialog_ANTICHEAT_2 ) {
		if( response ) {
			switch( listitem ) {
				case 0: {
					switch( anticheatinfo[ playerid ] ) {
						case 0: {
							if( antiCheatSS[ antiWeaponH ] ) {
								antiCheatSS[ antiWeaponH ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiWeaponHack." );
							}
							else if( !antiCheatSS[ antiWeaponH ] ) {
								antiCheatSS[ antiWeaponH ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiWeaponHack." );
							}
							SaveAntiCheat( );
						}
						case 1: {
							if( antiCheatSS[ antiTeleportH ] ) {
								antiCheatSS[ antiTeleportH ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiTeleportHack." );
							}
							else if( !antiCheatSS[ antiTeleportH ] ) {
								antiCheatSS[ antiTeleportH ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiTeleportHack." );
							}
							SaveAntiCheat( );
						}
						case 2: {
							if( antiCheatSS[ antiFlyH ] ) {
								antiCheatSS[ antiFlyH ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiFlyHack." );
							}
							else if( !antiCheatSS[ antiFlyH ] ) {
								antiCheatSS[ antiFlyH ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiFlyHack." );
							}
							SaveAntiCheat( );
						}
						case 3: {
							if( antiCheatSS[ antiVehRepair ] ) {
								antiCheatSS[ antiVehRepair ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiVehRepairHack." );
							}
							else if( !antiCheatSS[ antiVehRepair ] ) {
								antiCheatSS[ antiVehRepair ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiVehRepairHack." );
							}
							SaveAntiCheat( );
						}
						case 4: {
							if( antiCheatSS[ antiJetPackH ] ) {
								antiCheatSS[ antiJetPackH ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiJetPackHack." );
							}
							else if( !antiCheatSS[ antiJetPackH ] ) {
								antiCheatSS[ antiJetPackH ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiJetPackHack." );
							}
							SaveAntiCheat( );
						}
						case 5: {
							if( antiCheatSS[ antiSpeedH ] ) {
								antiCheatSS[ antiSpeedH ] = false;
								SendClientMessagee( playerid, ZUTA, "Iskljucio si antiSpeedHack." );
							}
							else if( !antiCheatSS[ antiSpeedH ] ) {
								antiCheatSS[ antiSpeedH ] = true;
								SendClientMessagee( playerid, ZUTA, "Ukljucio si antiSpeedHack." );
							}
							SaveAntiCheat( );
						}
					}
				}
				case 1: {
					new antiCheatName[ 20 ] = "antiVehRepairHack";
					switch( anticheatinfo[ playerid ] ) {
						case 0: antiCheatName = "antiWeaponHack";
						case 1: antiCheatName = "antiTeleportHack";
						case 2: antiCheatName = "antiFlyHack";
						case 3: antiCheatName = "antiVehRepairHack";
						case 4: antiCheatName = "antiJetPackHack";
						case 5: antiCheatName = "antiSpeedHack";
					}
					ShowPlayerDialog( playerid, dialog_ANTICHEAT_3, DSL, antiCheatName, "Warning\nKick\nBan", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_ANTICHEAT_3 ) {
		if( response ) {
			switch( listitem ) {
				case 0: {
					switch( anticheatinfo[ playerid ] ) {
						case 0: {
							antiCheatSS[ WeaponHRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiWeaponHack." );
						}
						case 1: {
							antiCheatSS[ TeleportHRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiTeleportHack." );
						}
						case 2: {
							antiCheatSS[ FlyHRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiFlyHack." );
						}
						case 3: {
							antiCheatSS[ VehRepRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiVehRepairHack." );
						}
						case 4: {
							antiCheatSS[ JetPackHRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiJetPackHack." );
						}
						case 5: {
							antiCheatSS[ SpeedHRezimRada ] = AC_ADMINPORUKA;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na warning za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
				}
				case 1: {
					switch( anticheatinfo[ playerid ] ) {
						case 0: {
							antiCheatSS[ WeaponHRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiWeaponHack." );
						}
						case 1: {
							antiCheatSS[ TeleportHRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiTeleportHack." );
						}
						case 2: {
							antiCheatSS[ FlyHRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiFlyHack." );
						}
						case 3: {
							antiCheatSS[ VehRepRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiVehRepairHack." );
						}
						case 4: {
							antiCheatSS[ JetPackHRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiJetPackHack." );
						}
						case 5: {
							antiCheatSS[ SpeedHRezimRada ] = AC_KICK;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na kick za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
				}
				case 2: {
					switch( anticheatinfo[ playerid ] ) {
						case 0: {
							antiCheatSS[ WeaponHRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiWeaponHack." );
						}
						case 1: {
							antiCheatSS[ TeleportHRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiTeleportHack." );
						}
						case 2: {
							antiCheatSS[ FlyHRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiFlyHack." );
						}
						case 3: {
							antiCheatSS[ VehRepRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiVehRepairHack." );
						}
						case 4: {
							antiCheatSS[ JetPackHRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiJetPackHack." );
						}
						case 5: {
							antiCheatSS[ SpeedHRezimRada ] = AC_BAN;
							SendClientMessagee( playerid, ZUTA, "Postavio si rezim rada na ban za antiSpeedHack." );
						}
					}
					SaveAntiCheat( );
				}
			}
		}
	}
	else if( dialogid == dialog_CREATEVEH )
	{
		if( response )
		{
			switch( listitem )
			{
				case 0: { ShowPlayerDialog( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD ); }
				case 1: { ShowPlayerDialog( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7.Bus vozac\n8.Mehanicar 9.Farmer 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 15. Masinovodja", D_ODABERI, D_NAZAD ); }
				case 2: { ShowPlayerDialog( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 3: { ShowPlayerDialog( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 4: { ShowPlayerDialog( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 5: { ShowPlayerDialog( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 6: { ShowPlayerDialog( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 7: { ShowPlayerDialog( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 8: { ShowPlayerDialog( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 9: { ShowPlayerDialog( playerid, dialog_POLVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vozilo za polaganje, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }
				case 10: { ShowPlayerDialog( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GM vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD ); }

			}
		}
	}
	else if( dialogid == dialog_NAPRAVISVE )
	{
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					ShowPlayerDialog( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD );
				}
				case 1:
				{
					ShowPlayerDialog( playerid, dialog_CREATEVEH, DSL, D_NASLOV, "Privatno vozilo\nPoslovno vozilo\nOrganizacijsko vozilo\nRent vozilo\nIzlozbeno vozilo\nAdmin Vozilo\nGradonacelnikovo vozilo\nPromotersko vozilo\nVIP vozilo\nPolaganje vozilo\nGM vozilo", D_ODABERI, D_NAZAD );
				}
				case 2:
				{

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					
					strcat( DialogStrgEx, ""col_white"Unesite vrstu level cijenu firme.\n" );
					strcat( DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n" );
					strcat( DialogStrgEx, "8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n" );
					strcat( DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa\n" );
					strcat( DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n" );
					strcat( DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda" );
					
					ShowPlayerDialog( playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );
					
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				} 
				case 3:
				{
					for( new i = 1; i < MAX_KONT; i++ )
					{
						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), KO_FILE, i);
						if( !fexist( fileauta ) )
						{
							new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle);
							KontInfo[ i ][ koObjPos ][ 0 ] = x;
							KontInfo[ i ][ koObjPos ][ 1 ] = y;
							KontInfo[ i ][ koObjPos ][ 2 ] = z;
							KontInfo[ i ][ koObjRot ][ 0 ] = 0;
							KontInfo[ i ][ koObjRot ][ 1 ] = 0;
							KontInfo[ i ][ koObjRot ][ 2 ] = 0;
							KontInfo[ i ][ koObjID ] = CreateDynamicObject(1345, x+2, y, z+0.6, 0.0, 0.0, angle);
							Streamer_Update( playerid );
							PlayerEditObject( playerid, KontInfo[ i ][ koObjID ] ); EditKontejnera[ playerid ] = i;
							SacuvajKont( i );
							break;
						}
					}
				}
				case 4:
				{
					ShowPlayerDialog( playerid, dialog_KREIRANJEKUCE, DSI, D_NASLOV, "Unesite vrstu level i cijenu kuce.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
				}
				case 5:
				{
					ShowPlayerDialog( playerid, dialog_KREIRANJESTANA, DSI, D_NASLOV, "Unesite vrstu level i cijenu stana.\nVrste: 1. Mali stan 2. Srednji stan 3. Veliki stan!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
				}
				case 6:
				{
					ShowPlayerDialog( playerid, dialog_KREIRANJEVIKENDICE, DSI, D_NASLOV, "Unesite vrstu level i cijenu vikendice.\nVrste: 1. Mala vikendica 2. Srednja vikendica 3. Velika vikendica!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
				}
				case 7: {
					new dFile[32];
					if( PlayerCreateEvent[ playerid ] ) return GRESKA( playerid, "Vec pravis event!");
					ShowPlayerDialog( playerid, dialog_CREATEEVENT, DSI, D_NASLOV, "Unesite ime eventa", D_ODABERI, D_ODUSTANI );
					PlayerCreateEvent[ playerid ] = true;
					EventID[ playerid ] = 1;
					for( new id = 1; id <= MAX_EVENTS; id++ )
					{
						format( dFile, 35, EVENT_FILE, id );
						if( fexist( dFile ) ) EventID[ playerid ]++;
						if( EventID[ playerid ] > MAX_EVENTS ) return GRESKA( playerid, "Vec je napravljen maksimalan broj eventa.");
					}
				}
				case 8: {
					for( new i = 1; i < MAX_ATM; i++ ) {
						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), ATM_FILE, i);
						if( !fexist( fileauta ) ) {
							new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							atmInfo[ i ][ atmPos ][ 0 ] = x;
							atmInfo[ i ][ atmPos ][ 1 ] = y;
							atmInfo[ i ][ atmPos ][ 2 ] = z;
							atmInfo[ i ][ atmPos ][ 3 ] = 0;
							atmInfo[ i ][ atmPos ][ 4 ] = 0;
							atmInfo[ i ][ atmPos ][ 5 ] = 0;
							atmInfo[ i ][ atmExists ] = true;
							atmInfo[ i ][ atmObject ] = CreateDynamicObject( 2942, x+2, y, z+0.6, 0.0, 0.0, angle );
							Streamer_Update( playerid );
							PlayerEditObject( playerid, atmInfo[ i ][ atmObject ] ); EditATM[ playerid ] = i;
							SacuvajATM( i );
							break;
						}
					}
				}
				case 9:
				{
					new as = SledeciIDSalona( MAX_AUTOS ), Float:PozX, Float:PozY, Float:PozZ, fautos[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
					format( fautos, sizeof( fautos ), AS_FILE, as );
					if( fexist( fautos ) ) return GRESKA( playerid, "ID tog autosalona vec postoji!" );
					AutoSalon[ as ][ aPickupPos ][ 0 ] = PozX;
					AutoSalon[ as ][ aPickupPos ][ 1 ] = PozY;
					AutoSalon[ as ][ aPickupPos ][ 2 ] = PozZ;
					AutoSalon[ as ][ aVW ] = GetPlayerVirtualWorld( playerid );
					AutoSalon[ as ][ aInt ] = GetPlayerInterior( playerid );
					AutoSalon[ as ][ aIzlogVeh ] = 0;
					AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
					AutoSalon[ as ][ aCameraPos ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 2 ] = 0.0;
					AutoSalon[ as ][ aCameraLookAt ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 2 ] = 0.0;

					AutoSalon[ as ][ aMaxVehModel ] = 0;
					AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 3 ] = 0; AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 6 ] = 0; AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 9 ] = 0; AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0; AutoSalon[ as ][ aVehModel ][ 16 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 17 ] = 0; AutoSalon[ as ][ aVehModel ][ 18 ] = 0; AutoSalon[ as ][ aVehModel ][ 19 ] = 0; AutoSalon[ as ][ aVehModel ][ 20 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 21 ] = 0; AutoSalon[ as ][ aVehModel ][ 22 ] = 0; AutoSalon[ as ][ aVehModel ][ 23 ] = 0; AutoSalon[ as ][ aVehModel ][ 24 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 25 ] = 0; AutoSalon[ as ][ aVehModel ][ 26 ] = 0; AutoSalon[ as ][ aVehModel ][ 27 ] = 0; AutoSalon[ as ][ aVehModel ][ 28 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 29 ] = 0; AutoSalon[ as ][ aVehModel ][ 30 ] = 0; AutoSalon[ as ][ aVehModel ][ 31 ] = 0; AutoSalon[ as ][ aVehModel ][ 32 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 33 ] = 0; AutoSalon[ as ][ aVehModel ][ 34 ] = 0; AutoSalon[ as ][ aVehModel ][ 35 ] = 0; AutoSalon[ as ][ aVehModel ][ 36 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 37 ] = 0; AutoSalon[ as ][ aVehModel ][ 38 ] = 0; AutoSalon[ as ][ aVehModel ][ 39 ] = 0; AutoSalon[ as ][ aVehModel ][ 40 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 41 ] = 0; AutoSalon[ as ][ aVehModel ][ 42 ] = 0; AutoSalon[ as ][ aVehModel ][ 43 ] = 0; AutoSalon[ as ][ aVehModel ][ 44 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 45 ] = 0; AutoSalon[ as ][ aVehModel ][ 46 ] = 0; AutoSalon[ as ][ aVehModel ][ 47 ] = 0; AutoSalon[ as ][ aVehModel ][ 49 ] = 0;
					AutoSalon[ as ][ aVehModel ][ 49 ] = 0;
					
					//-------------------------------------------------------------------------------------------------------------------------------------------------

					AutoSalon[ as ][ aVehAmmount ][ 0 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 1 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 2 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 3 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 4 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 5 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 6 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 7 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 8 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 9 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 10 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 11 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 12 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 13 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 14 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 15 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 16 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 17 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 18 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 19 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 20 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 21 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 22 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 23 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 24 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 25 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 26 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 27 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 28 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 29 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 30 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 31 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 32 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 33 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 34 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 35 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 36 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 37 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 38 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 39 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 40 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 41 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 42 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 43 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 44 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 45 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 46 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 47 ] = 0; AutoSalon[ as ][ aVehAmmount ][ 49 ] = 0;
					AutoSalon[ as ][ aVehAmmount ][ 49 ] = 0;
					
					
					SaveSalon( as );
					KreiranAutoSalon[ playerid ] = as;
					AutoSalon[ as ][ AutoSalon3D ] = CreateDynamic3DTextLabel( ""col_white"Da kupite vozilo kucajte\n"col_balkanstory"[ /kupivozilo ]", -1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0);
					AutoSalon[ as ][ AutoSalonPickup ] = CreateDynamicPickup( 1239, 1, AutoSalon[ as ][ aPickupPos ][ 0 ], AutoSalon[ as ][ aPickupPos ][ 1 ], AutoSalon[ as ][ aPickupPos ][ 2 ], AutoSalon[ as ][ aVW ], AutoSalon[ as ][ aInt ], -1, 20.0 );
					ShowPlayerDialog( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
				}
				case 10: {
					new h = NextHotelID( MAX_HOTELS ), Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], hfile[ 40 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
					format( hfile, sizeof( hfile ), HOTEL_FILE, h );
					if( fexist( hfile ) ) return GRESKA( playerid, "ID te imovine vec postoji!" );
					hotelInfo[ h ][ hExit ][ 0 ] = 2214.3848;
					hotelInfo[ h ][ hExit ][ 1 ] = -1150.5399;
					hotelInfo[ h ][ hExit ][ 2 ] = 1025.7969;
					hotelInfo[ h ][ hPrice ] = 1000000;
					hotelInfo[ h ][ hInterior ] = 15;
					hotelInfo[ h ][ hOwned ] = 0;
					strmid( hotelInfo[ h ][ hOwner], "Drzava", 0, strlen( "Drzava" ), 32);
					hotelInfo[ h ][ hEnter ][ 0 ] = PozX;
					hotelInfo[ h ][ hEnter ][ 1 ] = PozY;
					hotelInfo[ h ][ hEnter ][ 2 ] = PozZ;
					hotelInfo[ h ][ hRoomPrice ] = 50;
					hotelInfo[ h ][ hMoney ] = 0;
					hotelInfo[ h ][ hVW ] = h;
					hotelInfo[ h ][ hLocked  ] = 0;
					hotelInfo[ h ][ hLevel ] = 5;
					strmid( hotelInfo[ h ][ hAdress ], UlicaHotela( h ), 0, strlen( UlicaHotela( h ) ), 32);

					strmid( hotelInfo[ h ][ hGuest_1 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_2 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_3 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_4 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_5 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_6 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_7 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_8 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_9 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );
					strmid( hotelInfo[ h ][ hGuest_10 ], "Niko", 0, strlen( "Niko" ), MAX_PLAYER_NAME );

					SaveHotel( h );
					format( string, sizeof( string ), "{36AB00}Hotel na Prodaju"col_white"[ID %d]{36AB00}\n{36AB00}Cena: "col_white"%d$\n{36AB00}Potreban level: "col_white"%d\n{36AB00}Adresa: "col_white"%s\n{36AB00}Za kupovinu "col_white"/kupihotel", h, hotelInfo[ h ][ hPrice ], hotelInfo[ h ][ hLevel ], hotelInfo[ h ][ hAdress ] );
					hotelInfo[ h ][ h3DText ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
					hotelInfo[ h ][ hPickup ] = CreateDynamicPickup( 19134, 1, hotelInfo[ h ][ hEnter ][ 0 ], hotelInfo[ h ][ hEnter ][ 1 ], hotelInfo[ h ][ hEnter ][ 2 ] );
					SendInfoMessage( playerid, "Uspjesno si kreirao hotel." );
				}
				case 11: {
					ShowPlayerDialog( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );
				}
				case 12:
				{
					CreatingThing[ playerid ] = 1;
					SendInfoMessage( playerid, "Poceo si kreiranje zemljista za prodaju." );
					SendInfoMessage( playerid, "Koristi "col_white"LMB"col_balkanstory" da postavis pozicije." );
					SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja." );
				}
				case 13:
				{
					ShowPlayerDialog( playerid, dialog_CREATEGARAGE, DSI, D_NASLOV, "Unesite vrstu level i cijenu garaze.\nVrste: 1. Mala garaza 2. Srednja garaza 3. Velika garaza!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
				}
				case 14:
				{
					ShowPlayerDialog( playerid, dialog_CREATEGPS, DSI, "Kreiranje GPS", "Unesite vrstu i ime lokacije za GPS!\nVrste: 1.BG 2.SA 3.ZG 4:Ostel", D_ODABERI, D_NAZAD );
				}
				case 15:
				{
					ShowPlayerDialog( playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite vrstu i ime port lokacije\nVrste: 1.BG 2.SA 3.ZG 4.Ostala mjesta", D_ODABERI, D_NAZAD );
				}
				case 16:
				{
					ShowPlayerDialog( playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite vrstu i ime port lokacije\nVrste: 1.BG 2.SA 3.ZG 4.Ostala mjesta", D_ODABERI, D_NAZAD );
				}
				case 17: {
					ShowPlayerDialog( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimer: 70 132", D_ODABERI, D_NAZAD );
				}
				case 18: {
					ShowPlayerDialog( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
				}
				case 19: {
				
					//#if NERP_ZIMSKI_MOD  == 1
					for( new i = 1; i < MAX_PRESENTS; i++ ) {
						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_PRESENTS, i);
						if( !fexist( fileauta ) ) {
							new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							presentsInfo[ i ][ presPos ][ 0 ] = x;
							presentsInfo[ i ][ presPos ][ 1 ] = y;
							presentsInfo[ i ][ presPos ][ 2 ] = z;
							presentsInfo[ i ][ presPos ][ 3 ] = 0;
							presentsInfo[ i ][ presPos ][ 4 ] = 0;
							presentsInfo[ i ][ presPos ][ 5 ] = 0;
							presentsInfo[ i ][ presTaken ] = false;
							presentsInfo[ i ][ presObject ] = CreateDynamicPickup(19054, 1, x, y, z, -1, -1);//CreateDynamicObject( 19054, x+2, y, z+0.6, 0.0, 0.0, angle );
							Streamer_Update( playerid );
							//PlayerEditObject( playerid, presentsInfo[ i ][ presObject ] ); EditPresents[ playerid ] = i;
							SavePresent( i );
							break;
						}
					}
					//#else
					//GRESKA( playerid, "Nije ukljucen zimski mod." );
					//#endif
				}
				case 20: {

					#if NERP_ZIMSKI_MOD  == 1
					for( new i = 1; i < MAX_CTREES; i++ ) {
						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_CTREES, i);
						if( !fexist( fileauta ) ) {
							new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							CTree[ i ][ ctPos ][ 0 ] = x;
							CTree[ i ][ ctPos ][ 1 ] = y;
							CTree[ i ][ ctPos ][ 2 ] = z;
							CTree[ i ][ ctPos ][ 3 ] = 0;
							CTree[ i ][ ctPos ][ 4 ] = 0;
							CTree[ i ][ ctPos ][ 5 ] = 0;
							CTree[ i ][ ctPlaced ] = true;
							CTree[ i ][ ctObject ] = CreateDynamicObject( 19076, x+2, y, z+0.6, 0.0, 0.0, angle );
							Streamer_Update( playerid );
							PlayerEditObject( playerid, CTree[ i ][ ctObject ] ); EditCTrees[ playerid ] = i;
							SaveCTree( i );
							break;
						}
					}
					#else
					GRESKA( playerid, "Nije ukljucen zimski mod." );
					#endif
				}
				case 21: {

					#if NERP_ZIMSKI_MOD  == 1
					for( new i = 1; i < MAX_XORBS; i++ ) {
						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), F_XORBS, i);
						if( !fexist( fileauta ) ) {
							new Float:x, Float:y, Float:z, Float:angle;
							GetPlayerPos( playerid, x, y, z); GetPlayerFacingAngle( playerid, angle );
							XmasOrbs[ i ][ xoPos ][ 0 ] = x;
							XmasOrbs[ i ][ xoPos ][ 1 ] = y;
							XmasOrbs[ i ][ xoPos ][ 2 ] = z;
							XmasOrbs[ i ][ xoPos ][ 3 ] = 0;
							XmasOrbs[ i ][ xoPos ][ 4 ] = 0;
							XmasOrbs[ i ][ xoPos ][ 5 ] = 0;
							XmasOrbs[ i ][ xoPlaced ] = true;
							XmasOrbs[ i ][ xoObject ] = CreateDynamicObject( 19059, x+2, y, z+0.6, 0.0, 0.0, angle );
							Streamer_Update( playerid );
							PlayerEditObject( playerid, XmasOrbs[ i ][ xoObject ] ); EditXOrbs[ playerid ] = i;
							SaveXOrb( i );
							break;
						}
					}
					#else
					GRESKA( playerid, "Nije ukljucen zimski mod." );
					#endif
				}
				case 22: {
					ShowPlayerDialog( playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cijenu benzina, cijenu dizela, cijenu gasa i cijenu gasnog ulja.\nPrimer: 23, 12, 23, 32, 2", D_ODABERI, D_NAZAD );
				}
				case 23: {
					
					new parkID = NextParkingID( MAX_PARKINGS ), Float:PozX, Float:PozY, Float:PozZ, Float:PozA, parkFile[ 64 ];
					GetPlayerPos( playerid, PozX, PozY, PozZ );
					GetPlayerFacingAngle( playerid, PozA );
					format( parkFile, sizeof( parkFile ), PARKING_FILE, parkID );
					if( fexist( parkFile ) ) return GRESKA( playerid, "ID tog parkinga vec postoji!" );
					
					ParkingInfo[ parkID ][ parkPlaced ] = true;
					ParkingInfo[ parkID ][ parkInt ] = GetPlayerInterior( playerid );
					ParkingInfo[ parkID ][ parkVW ] = GetPlayerVirtualWorld( playerid );
					ParkingInfo[ parkID ][ parkMaxParkPlaces ] = 0;
					
					ParkingInfo[ parkID ][ parkObjectPos ][ 0 ] = PozX;
					ParkingInfo[ parkID ][ parkObjectPos ][ 1 ] = PozY;
					ParkingInfo[ parkID ][ parkObjectPos ][ 2 ] = PozZ;
					ParkingInfo[ parkID ][ parkObjectPos ][ 3 ] = 0;
					ParkingInfo[ parkID ][ parkObjectPos ][ 4 ] = 0;
					ParkingInfo[ parkID ][ parkObjectPos ][ 5 ] = PozA;

					CreateParkingID[ playerid ] = parkID;
					CreatingParkingLevel[ playerid ] = 1;

					ParkingInfo[ parkID ][ parkObject ] = CreateDynamicObject( 4639, PozX+2, PozY, PozZ+ 0.6, 0.0, 0.0, PozA , 0, 0, -1, 200.0 );
					Streamer_Update( playerid );
					PlayerEditObject( playerid, ParkingInfo[ parkID ][ parkObject ] );

					Parking_Save( parkID );
					
					SendInfoMessage( playerid, "Zapoceo si kreiranje parkinga, sacuvajte pozicije parking kucice." );
					
				}
			}
		}
		else
		{
			PokaziServerDialog(playerid);
		} //{ ShowPlayerDialog( playerid, dialog_SERVERMI, DSL, D_NASLOV, "Upravljanje serverom\nSacuvaj naloge\nNapravi\nIzbrisi\nIzmeni\nSpisak organizacija\nAntiCheat\nHappy Jobs", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_CREATEFSTATION ) {

		if( !response ) return true;
		if( response ) {
		
			new bussinesID, price[ 4 ], File[ 64 ];
			if( sscanf( inputtext, "iiiii", bussinesID, price[ 0 ], price[ 1 ], price[ 2 ], price[ 3 ] ) ) return ShowPlayerDialog( playerid, dialog_CREATEFSTATION, DSI, D_NASLOV, ""col_white"Unesite ID firme sa kojom povezujete, cijenu benzina, cijenu dizela, cijenu gasa i cijenu gasnog ulja.\nPrimer: 23, 12, 23, 32, 2", D_ODABERI, D_NAZAD );

			format( File, sizeof( File ), F_FILE, bussinesID );
			if( !fexist( File ) ) return GRESKA( playerid, "Ta firma(ID) ne postoji u bazi podataka!");
		
			new fstationID = NextFStationID( MAX_FSTATION ), Float:PozX, Float:PozY, Float:PozZ, filename[ 40 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			format( filename, sizeof( filename ), FSTATION_FILE, fstationID );
			if( fexist( filename ) ) return GRESKA( playerid, "ID te pumpe vec postoji!" );

			FuelStation[ fstationID ][ fsPos ][ 0 ] = PozX;
			FuelStation[ fstationID ][ fsPos ][ 1 ] = PozY;
			FuelStation[ fstationID ][ fsPos ][ 2 ] = PozZ;
			FuelStation[ fstationID ][ fsPlaced ] = true;
			FuelStation[ fstationID ][ fsBussinesID ] = bussinesID;

			FuelStation[ fstationID ][ fsGasolinePrice ] = price[ 0 ];
			FuelStation[ fstationID ][ fsGasolineL ] = 50;
			FuelStation[ fstationID ][ fsDieselPrice ] = price[ 1 ];
			FuelStation[ fstationID ][ fsDieselL ] = 50;
			FuelStation[ fstationID ][ fsGasPrice ] = price[ 2 ];
			FuelStation[ fstationID ][ fsGasL ] = 50;
			FuelStation[ fstationID ][ fsGasOilPrice ] = price[ 3 ];
			FuelStation[ fstationID ][ fsGasOilL ] = 50;
			FuelStation[ fstationID ][ fsTruckID ] = -1;
			FuelStation[ fstationID ][ fsCisternID ] = -1;
			strmid( FuelStation[ fstationID ][ fsName ], "Pumpa", 0, strlen( "Pumpa" ), 64 );

			FStation_Save( fstationID );

			new string[ 512 ];
			format( string, sizeof( string ), ""col_balkanstory"|| {FFFFFF}%s"col_balkanstory" ||\nCijena benzina: {FFFFFF}%d$\n"col_balkanstory"Cijena dizela: {FFFFFF}%d$\n{FFFFFF}/natoci\n"col_balkanstory"| {FFFFFF}Adresa: {FFFFFF}%d "col_balkanstory"|",
				FuelStation[ fstationID ][ fsName ],
				FuelStation[ fstationID ][ fsGasolinePrice ],
				FuelStation[ fstationID ][ fsDieselPrice ],
				fstationID );
				
			FuelStation[ fstationID ][ fs3d ] = CreateDynamic3DTextLabel( string, 0x33CCFFFF, FuelStation[ fstationID ][ fsPos ] [ 0 ], FuelStation[ fstationID ][ fsPos ] [ 1 ], FuelStation[ fstationID ][ fsPos ] [ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			FuelStation[ fstationID ][ fsPickup ] = CreateDynamicPickup (1650, 1, FuelStation[ fstationID ][ fsPos ] [ 0 ], FuelStation[ fstationID ][ fsPos ] [ 1 ], FuelStation[ fstationID ][ fsPos ] [ 2 ], 0, 0 );
			
			CreatingFStation[ playerid ] = fstationID;
			ProcesFStation[ playerid ] = 1;
			SendInfoMessage( playerid, "Uspjesno si kreirao pumpu, sada dodaj kamion koristeci tipku 'Y'." );
		
		}
	}
	else if( dialogid == dialog_GANGZCOLOR ) {

		if( !response ) return true;
		if( response ) {
		
			new color[24], stringic[24];
			if( sscanf( inputtext, "s[24]", color ) ) return ShowPlayerDialog( playerid, dialog_GANGZCOLOR, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
			
			new id = NextGZoneID( MAX_GZONE );

			if( id == -1 ) return GRESKA( playerid, "Vec ima maksimalni broj gang zona." );
			
			CreatingGZoneID[ playerid ] = id;
			
			format( stringic, sizeof( stringic ), "%s", color );
			strmid( gZoneInfo[ id ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );
			
			CreatingGZone[ playerid ] = 1;
			SendInfoMessage( playerid, "Uneo si boju." );
			SendInfoMessage( playerid, "Koristi "col_white"LMB"col_balkanstory" da postavis pozicije." );
			SendInfoMessage( playerid, "Prvo sacuvaj poziciju levog donjeg ugla polja." );
		
		}
	}
	else if( dialogid == dialog_ORGCOLOR ) {
	
		if( !response ) return true;
		if( response ) {
		
			new id = GetNearestOrganization( playerid );
			new color[ 24 ], stringic[ 24 ];
			if( sscanf( inputtext, "s[24]", color ) ) ShowPlayerDialog( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
			
			format( stringic, sizeof( stringic ), "%s", color );
			strmid( OI[ id ][ oColor ], stringic, 0, strlen( stringic ), 255 );
			SaveOrganization( id );
			
			SendInfoMessage( playerid, "Promenili ste boju organizacije." );
		
		}
	
	}
	else if( dialogid == dialog_CREATERADAR ) {
	
		if( !response ) return true;
		if( response ) {
		
			new speed, ticket, radarID = NextRadarID( MAX_RADARS );
		
			if( sscanf( inputtext, "ii", speed, ticket ) ) return ShowPlayerDialog( playerid, dialog_CREATERADAR, DSI, D_NASLOV, "Unesite dozvoljenu brzinu i kaznu.\nPrimer: 70 132", D_ODABERI, D_NAZAD );
		
			new Float:Pos[ 4 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			GetPlayerFacingAngle( playerid, Pos[ 3 ] );
			
			radarInfo[ radarID ][ radarMaxSpeed ] = speed;
			radarInfo[ radarID ][ radarPrice ] = ticket;
			radarInfo[ radarID ][ radarPos ][ 0 ] = ( Pos[ 0 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 1 ] = ( Pos[ 1 ]+2 );
			radarInfo[ radarID ][ radarPos ][ 2 ] = Pos[ 2 ];
			radarInfo[ radarID ][ radarPos ][ 3 ] = 0.000;
			radarInfo[ radarID ][ radarPos ][ 4 ] = 0.000;
			radarInfo[ radarID ][ radarPos ][ 5 ] = 0.000;

			radarInfo[ radarID ][ radarObject ] = CreateDynamicObject( 18880, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0.0, 0.0, Pos[ 3 ] );
			Streamer_Update( playerid );
			PlayerEditObject( playerid, radarInfo[ radarID ][ radarObject ] ); EditRadar[ playerid ] = radarID;
			SaveRadar( radarID );

			SendInfoMessage( playerid, "Napravili ste radar. Maximalna brzina: %d kazna: $%d", speed, ticket );
			
		}
	}
	
	else if( dialogid == dialog_CREATESPORT )
	{
		if( !response ) return true;
		if( response )
		{

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ],vrsta;
			if( sscanf( inputtext, "is[50]", vrsta,nameaport ) ) return ShowPlayerDialog( playerid, dialog_CREATESPORT, DSI, D_NASLOV, "Unesite vrstu i ime port lokacije\nVrste: 1.BG 2.SA 3.ZG 4.Ostala mjesta", D_ODABERI, D_NAZAD );
			if(vrsta < 1 || vrsta > 4) return GRESKA( playerid, "Vrsta ne moze ispod 1 i preko 4!" );

			if(vrsta == 1)
			{
				for( new a = 0; a < MAX_BGSPORTS; a++ )
				{
					if( BGsupportInfo[ a ][ BGsupportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}
				if( id == -1 ) return GRESKA( playerid, "Nema vise mesta za kreiranje GM portova." );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				BGsupportInfo[ id ][ BGsupportID ] = id;
				BGsupportInfo[ id ][ BGsupportCreated ] = 1;
				BGsupportInfo[ id ][ BGsupportPos ][ 0 ] = PozX;
				BGsupportInfo[ id ][ BGsupportPos ][ 1 ] = PozY;
				BGsupportInfo[ id ][ BGsupportPos ][ 2 ] = PozZ;
				strmid( BGsupportInfo[ id ][ BGsupportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveBGSports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za GM port." );
			}
			if(vrsta == 2)
			{
				for( new a = 0; a < MAX_SASPORTS; a++ )
				{
					if( SAsupportInfo[ a ][ SAsupportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}
				if( id == -1 ) return GRESKA( playerid, "Nema vise mesta za kreiranje GM portova." );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				SAsupportInfo[ id ][ SAsupportID ] = id;
				SAsupportInfo[ id ][ SAsupportCreated ] = 1;
				SAsupportInfo[ id ][ SAsupportPos ][ 0 ] = PozX;
				SAsupportInfo[ id ][ SAsupportPos ][ 1 ] = PozY;
				SAsupportInfo[ id ][ SAsupportPos ][ 2 ] = PozZ;
				strmid( SAsupportInfo[ id ][ SAsupportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveSASports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za GM port." );
			}
			if(vrsta == 3)
			{
				for( new a = 0; a < MAX_ZGSPORTS; a++ )
				{
					if( ZGsupportInfo[ a ][ ZGsupportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}
				if( id == -1 ) return GRESKA( playerid, "Nema vise mesta za kreiranje GM portova." );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				ZGsupportInfo[ id ][ ZGsupportID ] = id;
				ZGsupportInfo[ id ][ ZGsupportCreated ] = 1;
				ZGsupportInfo[ id ][ ZGsupportPos ][ 0 ] = PozX;
				ZGsupportInfo[ id ][ ZGsupportPos ][ 1 ] = PozY;
				ZGsupportInfo[ id ][ ZGsupportPos ][ 2 ] = PozZ;
				strmid( ZGsupportInfo[ id ][ ZGsupportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveZGSports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za GM port." );
			}
			if(vrsta == 4)
			{
				for( new a = 0; a < MAX_OSSPORTS; a++ )
				{
					if( OSsupportInfo[ a ][ OSsupportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}
				if( id == -1 ) return GRESKA( playerid, "Nema vise mesta za kreiranje GM portova." );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				OSsupportInfo[ id ][ OSsupportID ] = id;
				OSsupportInfo[ id ][ OSsupportCreated ] = 1;
				OSsupportInfo[ id ][ OSsupportPos ][ 0 ] = PozX;
				OSsupportInfo[ id ][ OSsupportPos ][ 1 ] = PozY;
				OSsupportInfo[ id ][ OSsupportPos ][ 2 ] = PozZ;
				strmid( OSsupportInfo[ id ][ OSsupportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveOSSports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za GM port." );
			}

		}
	}
	
	
	else if( dialogid == dialog_CREATEAPORT )
	{
		if( !response ) return true;
		if( response )
		{

			new id = -1, Float:PozX, Float:PozY, Float:PozZ, nameaport[ 50 ],vrsta;
			if( sscanf( inputtext, "is[50]", vrsta,nameaport ) ) return ShowPlayerDialog( playerid, dialog_CREATEAPORT, DSI, D_NASLOV, "Unesite vrstu i ime port lokacije\nVrste: 1.BG 2.SA 3.ZG 4.Ostala mjesta\nPrimjer: 1 Opstina", D_ODABERI, D_NAZAD );
			if(vrsta < 1 || vrsta > 4) return GRESKA( playerid, "Vrsta ne moze ispod 1 i preko 4!" );

			if(vrsta == 1)
			{
				for( new a = 0; a < MAX_BGAPORTS; a++ )
				{
					if( AportBGInfo[ a ][ BGaportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}
				
				if( id == -1 ) return GRESKA( playerid, "Nema vise slotova za Admin BG port" );
				
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				AportBGInfo[ id ][ BGaportID ] = id;
				AportBGInfo[ id ][ BGaportCreated ] = 1;
				AportBGInfo[ id ][ BGaportPos ][ 0 ] = PozX;
				AportBGInfo[ id ][ BGaportPos ][ 1 ] = PozY;
				AportBGInfo[ id ][ BGaportPos ][ 2 ] = PozZ;
				strmid( AportBGInfo[ id ][ BGaportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveBGAports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za Admin TEAM port!" );
			}
			if(vrsta == 2)
			{
				for( new a = 0; a < MAX_SAAPORTS; a++ )
				{
					if( AportSAInfo[ a ][ SAaportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}

				if( id == -1 ) return GRESKA( playerid, "Nema vise slotova za Admin SA port!" );

				GetPlayerPos( playerid, PozX, PozY, PozZ );
				AportSAInfo[ id ][ SAaportID ] = id;
				AportSAInfo[ id ][ SAaportCreated ] = 1;
				AportSAInfo[ id ][ SAaportPos ][ 0 ] = PozX;
				AportSAInfo[ id ][ SAaportPos ][ 1 ] = PozY;
				AportSAInfo[ id ][ SAaportPos ][ 2 ] = PozZ;
				strmid( AportSAInfo[ id ][ SAaportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveSAAports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za Admin TEAM port!" );
			}
			if(vrsta == 3)
			{
				for( new a = 0; a < MAX_ZGAPORTS; a++ )
				{
					if( AportZGInfo[ a ][ ZGaportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}

				if( id == -1 ) return GRESKA( playerid, "Nema vise slotova za Admin ZG port!" );

				GetPlayerPos( playerid, PozX, PozY, PozZ );
				AportZGInfo[ id ][ ZGaportID ] = id;
				AportZGInfo[ id ][ ZGaportCreated ] = 1;
				AportZGInfo[ id ][ ZGaportPos ][ 0 ] = PozX;
				AportZGInfo[ id ][ ZGaportPos ][ 1 ] = PozY;
				AportZGInfo[ id ][ ZGaportPos ][ 2 ] = PozZ;
				strmid( AportZGInfo[ id ][ ZGaportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveZGAports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za Admin TEAM port!" );
			}
			if(vrsta == 4)
			{
				for( new a = 0; a < MAX_OSAPORTS; a++ )
				{
					if( AportOSInfo[ a ][ OSaportCreated ] != 1 )
					{
						id = a;
						break;
					} else continue;
				}

				if( id == -1 ) return GRESKA( playerid, "Nema vise slotova za Admin ZG port!" );

				GetPlayerPos( playerid, PozX, PozY, PozZ );
				AportOSInfo[ id ][ OSaportID ] = id;
				AportOSInfo[ id ][ OSaportCreated ] = 1;
				AportOSInfo[ id ][ OSaportPos ][ 0 ] = PozX;
				AportOSInfo[ id ][ OSaportPos ][ 1 ] = PozY;
				AportOSInfo[ id ][ OSaportPos ][ 2 ] = PozZ;
				strmid( AportOSInfo[ id ][ OSaportName ], nameaport, 0, strlen( nameaport ), 50 );
				SaveOSAports( );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu lokaciju za Admin TEAM port!" );
			}
			
			

		}
	}

	else if( dialogid == dialog_CREATEGPS )
	{
		if( !response ) return true;
		if( response )
		{

			new id = NextBGGPSID( MAX_BGGPS ), Float:PozX, Float:PozY, Float:PozZ, filename[ 60 ], namegps[ 50 ],vrsta;
			if( sscanf( inputtext, "is[50]",vrsta, namegps ) ) return ShowPlayerDialog( playerid, dialog_CREATEGPS, DSI, D_NASLOV, "Unesite vrstu i ime GPS lokacije!\nVrste: 1.BG 2.SA 3.ZG 4.Ostale", D_ODABERI, D_NAZAD );
			if(vrsta < 1 || vrsta > 4) return GRESKA( playerid, "Vrsta ne moze ispod 1 i preko 4!" );
			if(vrsta == 1)
			{
				format( filename, sizeof( filename ), F_BGGPS, id );
				if( fexist( filename ) ) return GRESKA( playerid, "ID te gps lokacije vec postoji!" );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				BGgpsInfo[ id ][ BGgpsPos ][ 0 ] = PozX;
				BGgpsInfo[ id ][ BGgpsPos ][ 1 ] = PozY;
				BGgpsInfo[ id ][ BGgpsPos ][ 2 ] = PozZ;
				strmid( BGgpsInfo[ id ][ BGgpsName ], namegps, 0, strlen( namegps ), 50 );
				BGGPS_Save( id );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu gps lokaciju." );
			}
			if(vrsta == 2)
			{
				format( filename, sizeof( filename ), F_SAGPS, id );
				if( fexist( filename ) ) return GRESKA( playerid, "ID te gps lokacije vec postoji!" );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				SAgpsInfo[ id ][ SAgpsPos ][ 0 ] = PozX;
				SAgpsInfo[ id ][ SAgpsPos ][ 1 ] = PozY;
				SAgpsInfo[ id ][ SAgpsPos ][ 2 ] = PozZ;
				strmid( SAgpsInfo[ id ][ SAgpsName ], namegps, 0, strlen( namegps ), 50 );
				SAGPS_Save( id );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu gps lokaciju." );
			}
			if(vrsta == 3)
			{
				format( filename, sizeof( filename ), F_ZGGPS, id );
				if( fexist( filename ) ) return GRESKA( playerid, "ID te gps lokacije vec postoji!" );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				ZGgpsInfo[ id ][ ZGgpsPos ][ 0 ] = PozX;
				ZGgpsInfo[ id ][ ZGgpsPos ][ 1 ] = PozY;
				ZGgpsInfo[ id ][ ZGgpsPos ][ 2 ] = PozZ;
				strmid( ZGgpsInfo[ id ][ ZGgpsName ], namegps, 0, strlen( namegps ), 50 );
				ZGGPS_Save( id );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu gps lokaciju." );
			}
			if(vrsta == 4)
			{
				format( filename, sizeof( filename ), F_OSGPS, id );
				if( fexist( filename ) ) return GRESKA( playerid, "ID te gps lokacije vec postoji!" );
				GetPlayerPos( playerid, PozX, PozY, PozZ );
				OSgpsInfo[ id ][ OSgpsPos ][ 0 ] = PozX;
				OSgpsInfo[ id ][ OSgpsPos ][ 1 ] = PozY;
				OSgpsInfo[ id ][ OSgpsPos ][ 2 ] = PozZ;
				strmid( OSgpsInfo[ id ][ OSgpsName ], namegps, 0, strlen( namegps ), 50 );
				OSGPS_Save( id );
				SendInfoMessage( playerid, "Uspjesno si kreirao novu gps lokaciju." );
			}
			
			
		}
	}
	//---------------------------------------------------------------------------
	else if( dialogid == dialog_CREATEGARAGE )
	{
		if( response )
		{
			new id = NextGarageID( MAX_GARAGES ), Float:PozX, Float:PozY, Float:PozZ, filename[ 40 ], vrsta[ 20 ],vrsta2,level,cijena;
			if( sscanf( inputtext, "iii", vrsta2,level,cijena ) ) return ShowPlayerDialog( playerid, dialog_CREATEGARAGE, DSI, D_NASLOV, "Unesite vrstu level i cijenu garaze.\nVrste: 1. Mala garaza 2. Srednja garaza 3. Velika garaza!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
			if( vrsta2 < 1 || vrsta2 > 3 ) return GRESKA( playerid, "Pogresna vrsta!" );
			if( cijena < 1 || cijena > 99999999) return GRESKA( playerid, "Cijena ne moze biti manja od 1 i veca od 99999999!" );
			if( level < 1 || level > 999) return GRESKA( playerid, "Level ne moze biti manji od 1 i veci od 999!" );

			GetPlayerPos( playerid, PozX, PozY, PozZ );
			format( filename, sizeof( filename ), F_GARAGE, id );
			if( fexist( filename ) ) return GRESKA( playerid, "ID te garaze vec postoji!" );

			garageInfo[ id ][ garagePos ][ 0 ] = PozX;
			garageInfo[ id ][ garagePos ][ 1 ] = PozY;
			garageInfo[ id ][ garagePos ][ 2 ] = PozZ;
			garageInfo[ id ][ garageOwned ] = false;
			strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), MAX_PLAYER_NAME );
			garageInfo[ id ][ garageLocked ] = false;
			garageInfo[ id ][ garageVW ] = id;
			garageInfo[ id ][ garagePrice ] = cijena;
			garageInfo[ id ][ garageLevel ] = level;

			if(vrsta2 == 1)
			{
				vrsta = "Mala garaza";
			}
			if(vrsta2 == 2)
			{
				vrsta = "Srednja garaza";
			}
			if(vrsta2 == 3)
			{
				vrsta = "Velika garaza";
			}

			garageInfo[ id ][ garageType ] = vrsta2;

			Garage_Save( id );
			new string[ 256 ];
			if( !garageInfo[ id ][ garageOwned ] ) {
				format( string, sizeof( string ), ""col_orange"[ GARAZA >> NA PRODAJU - "col_white"ID: %d ]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			}
			else if( garageInfo[ id ][ garageOwned ] ) {
				format( string, sizeof( string ), ""col_orange"[ GARAZA >> U VLASNISTVU - "col_white"ID: %d ]\n"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[ id ][ garageOwner ], vrsta, garageInfo[ id ][ garageLevel ] );
			}
			format( string, sizeof( string ), ""col_orange"Garaza na prodaju"col_white"[ID %d]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			garageInfo[ id ][ garage3D ] = CreateDynamic3DTextLabel( string, BELA, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );
			garageInfo[ id ][ garagePickup ] = CreateDynamicPickup( 19130, 1, garageInfo[ id ][ garagePos ][ 0 ], garageInfo[ id ][ garagePos ][ 1 ], garageInfo[ id ][ garagePos ][ 2 ], 0, 0 );
			if( !garageInfo[ id ][ garageOwned ] ) {
				format( string, sizeof( string ), ""col_orange"[ GARAZA >> NA PRODAJU - "col_white"ID: %d ]\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Cena garaze: "col_white"%d\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za kupovinu kucajte "col_white"/kupigarazu", id, vrsta, garageInfo[ id ][ garagePrice ], garageInfo[ id ][ garageLevel ] );
			}
			else if( garageInfo[ id ][ garageOwned ] ) {
				format( string, sizeof( string ), ""col_orange"[ GARAZA >> U VLASNISTVU - "col_white"ID: %d ]\n"col_orange"Vlasnik: "col_white"%s\n"col_orange"Tip garaze: "col_white"%s\n"col_orange"Potreban level: "col_white"%d\n"col_orange"Za ulaz koristite "col_white"/genter", id, garageInfo[ id ][ garageOwner ], vrsta, garageInfo[ id ][ garageLevel ] );
			}
			KreiraGarazu[ playerid ] = id;
			SendInfoMessage( playerid, "Uspjesno si kreirao garazu, sada koristi '/veh 560 1 1'." );
			SendInfoMessage( playerid, "Zauzmi poziciju i sacuvaj lokaciju vozila kada izadje iz garaze." );
			SendInfoMessage( playerid, "Za cuvanje pozicije koristi '/garagesave'." );

		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	//---------------------------------------------------------------------------
	else if( dialogid == dialog_CREATEGATE ) {
		if( !response ) return true;
		if( response ) {
		
			new g = NextGateID( MAX_GATES ),
				Float:x,
				Float:y,
				Float:z,
				Float:angle,
				model;
				
			GetPlayerPos( playerid, x, y, z ); GetPlayerFacingAngle( playerid, angle );
				
			if( sscanf( inputtext, "i", model ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE, DSI, D_NASLOV, "Unesite id objekta kapije.", D_ODABERI, D_NAZAD );

			GateData[ g ][ gateFor ] = 0;
			GateData[ g ][ gateOrgID ] = -1;
			GateData[ g ][ gateModel ] = model;
			GateData[ g ][ gateSpeed ] = 3.0;
			GateData[ g ][ gateRadius ] = 8.0;
			GateData[ g ][ gateOpened ] = false;
			GateData[ g ][ gateTime ] = 0;

			GateData[ g ][ gatePos ][ 0 ] = x + ( 3.0 * floatsin( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 1 ] = y + ( 3.0 * floatcos( -angle, degrees ) );
			GateData[ g ][ gatePos ][ 2 ] = z;
			GateData[ g ][ gatePos ][ 3 ] = 0.0;
			GateData[ g ][ gatePos ][ 4 ] = 0.0;
			GateData[ g ][ gatePos ][ 5 ] = angle;

			GateData[ g ][ gateMove ][ 0 ] = 0.0;
			GateData[ g ][ gateMove ][ 1 ] = 0.0;
			GateData[ g ][ gateMove ][ 2 ] = 0.0;
			GateData[ g ][ gateMove ][ 3 ] = 0.0;
			GateData[ g ][ gateMove ][ 4 ] = 0.0;
			GateData[ g ][ gateMove ][ 5 ] = 0.0;

			GateData[ g ][ gateInterior ] = GetPlayerInterior( playerid );
			GateData[ g ][ gateWorld ] = GetPlayerVirtualWorld( playerid );

			SaveGate( g );
			SendClientMessagee( playerid, UGBOJA, "Sada sacuvajte poziciju zatvorene kapije.");
			GateData[ g ][ gateObject ] = CreateDynamicObject( GateData[ g ][ gateModel ], GateData[ g ][ gatePos ][ 0 ], GateData[ g ][ gatePos ][ 1 ], GateData[ g ][ gatePos ][ 2 ], GateData[ g ][ gatePos ][ 3 ], GateData[ g ][ gatePos ][ 4 ], GateData[ g ][ gatePos ][ 5 ], GateData[ g ][ gateWorld ], GateData[ g ][ gateInterior ] );
			Streamer_Update( playerid );
			PlayerEditObject( playerid, GateData[ g ][ gateObject ] );
			EditDGate[ playerid ] = g;
		}
	}
	else if( dialogid == dialog_CREATEGATE_2 ) {
		if( !response ) return true;
		if( response ) {
			new g = EditDGate[ playerid ], Float:speed;
			if( sscanf( inputtext, "f", speed ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_2, DSI, D_NASLOV, "Unesite brzinu zatvaranja i otvaranja kapije( 0-20.0).", D_ODABERI, D_NAZAD );
			if( speed < 0.0 || speed > 20.0 ) return GRESKA( playerid, "Brzina otvaranja i zatvaranja vrata moze imat raspon od 0 do 20." );
			
			GateData[ g ][ gateSpeed ] = speed;
			SaveGate( g );
			ShowPlayerDialog( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
		}
	}
	else if( dialogid == dialog_CREATEGATE_3 ) {
		if( !response ) return true;
		if( response ) {
			new g = EditDGate[ playerid ], brzina;
			if( sscanf( inputtext, "i", brzina ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_3, DSI, D_NASLOV, "Unesite vreme posle koliko sekundi ce se zatvoriti kapija.", D_ODABERI, D_NAZAD );
			if( brzina < 0 || brzina > 60 ) return GRESKA( playerid, "Uneseno vreme ne moze biti manje od 0s ili vece od 60s." );

			GateData[ g ][ gateTime ] = brzina*1000;
			SaveGate( g );
			ShowPlayerDialog( playerid, dialog_CREATEGATE_5, DSL, "Za sta pravite ovu kapiju?", "Organizacija\nIgrac\nAdmine\nGM-ove\nVipove\nPromotere", "Izaberi", "Odustani" );
		}
	}
	else if( dialogid == dialog_CREATEGATE_5 ) {
	
		if( !response ) return true;
		if( response ) {
	
			new g = EditDGate[ playerid ];
		
			switch( listitem ) {
			
				case 0: {
				
					GateData[ g ][ gateFor ] = 1;
					SaveGate( g );
					ShowPlayerDialog( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );
				}
				case 1:  {
				
					GateData[ g ][ gateFor ] = 2;
					SaveGate( g );
					ShowPlayerDialog( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );
				}
				case 2:  {
				
					GateData[ g ][ gateFor ] = 3;
					SaveGate( g );
					SendClientMessagee( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za admine." );
				}
				case 3:  {

					GateData[ g ][ gateFor ] = 4;
					SaveGate( g );
					SendClientMessagee( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za GM." );
				}
				case 4:  {

					GateData[ g ][ gateFor ] = 5;
					SaveGate( g );
					SendClientMessagee( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za vipove." );
				}
				case 5:  {

					GateData[ g ][ gateFor ] = 6;
					SaveGate( g );
					SendClientMessagee( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za promotere." );
				}
			}
		}
	}
	else if( dialogid == dialog_CREATEGATE_6 ) {
		if( !response ) return true;
		if( response ) {
			new g = EditDGate[ playerid ], orga;
			if( sscanf( inputtext, "d", orga ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_6, DSI, D_NASLOV, "Unesite id organizacije za koju pravite kapiju.", D_ODABERI, D_NAZAD );

			GateData[ g ][ gateOrgID ] = orga;
			SaveGate( g );
			SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za organizaciju %s.", getOrgName( orga ) );
		}
	}
	else if( dialogid == dialog_CREATEGATE_4 ) {
		if( !response ) return true;
		if( response ) {
			new g = EditDGate[ playerid ], ime[ MAX_PLAYER_NAME ];
			if( sscanf( inputtext, "s[24]", ime ) ) return ShowPlayerDialog( playerid, dialog_CREATEGATE_4, DSI, D_NASLOV, "Unesite ime igraca koji moze kontrolisati ovu kapiju(FORMAT:Ime_Prezime).", D_ODABERI, D_NAZAD );

			strmid( GateData[ g ][ gateOwner ], ime, 0, strlen( ime ), MAX_PLAYER_NAME );
			SaveGate( g );
			SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste zavrsili kreiranje kapije za igraca %s.", ime );
		}
	}
	else if( dialogid == dialog_ASMAXMODEL )
	{
		if( !response ) return true;
		if( response )
		{
			new broj, as = GetNearestSalon( playerid );
			if( as == -1 ) return GRESKA( playerid, "Moras biti pored pickupa za kupnju u salonu." );
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			if( broj < 3 || broj > 16 ) return ShowPlayerDialog( playerid, dialog_ASMAXMODEL, DSI, D_NASLOV, "Unesite broj razlicith vrsti vozila koja ce se nalaziti u salonu(3-16)", D_ODABERI, D_NAZAD );
			AutoSalon[ as ][ aMaxVehModel ] = broj;
			SendClientMessageEx( playerid, UGBOJA, "Odabrao si %d vrste vozila.", broj );
			SaveSalon( as );
			if( broj == 3 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD ); }
			else if( broj == 4 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD ); }
			else if( broj == 5 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD ); }
			else if( broj == 6 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD ); }
			else if( broj == 7 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD ); }
			else if( broj == 8 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD ); }
			else if( broj == 9 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD ); }
			else if( broj == 10 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD ); }
			else if( broj > 10 ) { ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD ); }
		}
	}
	else if( dialogid == dialog_ASAMMOUNT ) {
		if( !response ) return true;
		if( response ) {
			new as = KreiranAutoSalon[ playerid ], model[ 50 ];
			if( as == -1 ) return GRESKA( playerid, "Ne kreiras nijedan salon." );
			switch( AutoSalon[ as ][ aMaxVehModel ] )
			{
				case 3:
				{
					if( sscanf( inputtext, "iii", model[ 0 ], model[ 1 ], model[ 2 ] ) )
					{
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 4: {
					if( sscanf( inputtext, "iiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 5: {
					if( sscanf( inputtext, "iiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 6: {
					if( sscanf( inputtext, "iiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 7: {
					if( sscanf( inputtext, "iiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 8: {
					if( sscanf( inputtext, "iiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 9: {
					if( sscanf( inputtext, "iiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 10: {
					if( sscanf( inputtext, "iiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 11: {
					if( sscanf( inputtext, "iiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 12: {
					if( sscanf( inputtext, "iiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 13: {
					if( sscanf( inputtext, "iiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 14: {
					if( sscanf( inputtext, "iiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 15: {
					if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) {
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
				case 16:
				{
					if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) )
					{
						new coordsstring[ 64 ];
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n\n" );
						strcat( DialogStrgEx, "__________________________________________________________________\n");
						for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ )
						{
							format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ] );
							strcat( DialogStrgEx, coordsstring );
						}
						ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						return true;
					}
				}
			}
			for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ )
			{
				if( model[ i ] < 1 )
				{
					new coordsstring[ 64 ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "Unesite za svaki model vozila, kolicinu.\nPrimer: 5 6 10 23\n" );
					strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1\n\n" );
					strcat( DialogStrgEx, "__________________________________________________________________\n");
					for( new a = 0; a < AutoSalon[ as ][ aMaxVehModel ]; a++ )
					{
						format( coordsstring, sizeof( coordsstring ), "Model %d - %s\n", (a+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ a ]- 400) ] );
						strcat( DialogStrgEx, coordsstring );
					}
					ShowPlayerDialog( playerid, dialog_ASAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					return true;
				}
				AutoSalon[ as ][ aVehAmmount ][ i ] = model[ i ];
			}
			SaveSalon( as );
			SendInfoMessage( playerid, "Uspjesno si kolicinu svakog modela vozila." );
			SendInfoMessage( playerid, "Zavrsio si sa kreiranjem auto salona." );
			KreiranAutoSalon[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_ASMODEL )
	{
		if( !response ) return true;
		if( response )
		{
			new as = GetNearestSalon( playerid );
			if( as == -1 ) return GRESKA( playerid, "Moras biti pored pickupa za kupovinu u salonu." );
			if( AutoSalon[ as ][ aMaxVehModel ] == 3 )
			{
				new model[ 3 ];
				if( sscanf( inputtext, "iii", model[ 0 ], model[ 1 ], model[ 2 ] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 3; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 4 )
			{
				new model[ 4 ];
				if( sscanf( inputtext, "iiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 4; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 5 )
			{
				new model[ 5 ];
				if( sscanf( inputtext, "iiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 5; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[ 4 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 6 )
			{
				new model[ 6 ];
				if( sscanf( inputtext, "iiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 6; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[ 4 ];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[ 5 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 7 )
			{
				new model[ 7 ];
				if( sscanf( inputtext, "iiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 7; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[ 4 ];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[ 5 ];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[ 6 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 8 )
			{
				new model[ 8 ];
				if( sscanf( inputtext, "iiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 8; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[ 4 ];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[ 5 ];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[ 6 ];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[ 7 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 9 )
			{
				new model[ 9 ];
				if( sscanf( inputtext, "iiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 9; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ];
				AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ];
				AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[ 4 ];
				AutoSalon[ as ][ aVehModel ][ 5 ] = model[ 5 ];
				AutoSalon[ as ][ aVehModel ][ 6 ] = model[ 6 ];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[ 7 ];
				AutoSalon[ as ][ aVehModel ][ 8 ] = model[ 8 ];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 10 )
			{
				new model[ 10 ];
				if( sscanf( inputtext, "iiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 10; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite deset modela vozila koja ce biti u salonu.\nPrimer: 522 560 422 401 411 523 527 564 562 523", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 11 )
			{
				new model[ 11 ];
				if( sscanf( inputtext, "iiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 11; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 12 )
			{
				new model[ 12 ];
				if( sscanf( inputtext, "iiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 12; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 13 )
			{
				new model[ 13 ];
				if( sscanf( inputtext, "iiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 13; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 14 )
			{
				new model[ 14 ];
				if( sscanf( inputtext, "iiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 14; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
				AutoSalon[ as ][ aVehModel ][ 13 ] = model[13];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 15 )
			{
				new model[ 15 ];
				if( sscanf( inputtext, "iiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 15; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
				AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14];
				SaveSalon( as );
			}
			else if( AutoSalon[ as ][ aMaxVehModel ] == 16 )
			{
				new model[ 16 ];
				if( sscanf( inputtext, "iiiiiiiiiiiiiiii", model[ 0 ], model[ 1 ], model[ 2 ], model[ 3 ], model[4], model[5], model[6], model[7], model[8], model[9], model[10], model[11], model[12], model[13], model[14], model[15] ) ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				for( new i = 0; i < 16; i++)
				{
					if( model[ i ] < 400 || model[ i ] > 611 ) return ShowPlayerDialog( playerid, dialog_ASMODEL, DSI, D_NASLOV, "Unesite modela vozila koliko ste i uneli pri biraju razlicitih vrsti.", D_ODABERI, D_NAZAD );
				}
				AutoSalon[ as ][ aVehModel ][ 0 ] = model[ 0 ];
				AutoSalon[ as ][ aVehModel ][ 1 ] = model[ 1 ]; AutoSalon[ as ][ aVehModel ][ 2 ] = model[ 2 ]; AutoSalon[ as ][ aVehModel ][ 3 ] = model[ 3 ];
				AutoSalon[ as ][ aVehModel ][ 4 ] = model[4]; AutoSalon[ as ][ aVehModel ][ 5 ] = model[5]; AutoSalon[ as ][ aVehModel ][ 6 ] = model[6];
				AutoSalon[ as ][ aVehModel ][ 7 ] = model[7]; AutoSalon[ as ][ aVehModel ][ 8 ] = model[8]; AutoSalon[ as ][ aVehModel ][ 9 ] = model[9];
				AutoSalon[ as ][ aVehModel ][ 10 ] = model[10]; AutoSalon[ as ][ aVehModel ][ 11 ] = model[11]; AutoSalon[ as ][ aVehModel ][ 12 ] = model[12];
				AutoSalon[ as ][ aVehModel ][ 13 ] = model[13]; AutoSalon[ as ][ aVehModel ][ 14 ] = model[14]; AutoSalon[ as ][ aVehModel ][ 15 ] = model[15];
				SaveSalon( as );
			}
			SendInfoMessage( playerid, "Uspjesno si sacuvao modele koji ce se prodavati u salonu." );
			SendClientMessagee( playerid, UGBOJA, "Kada izadjes na cisti prostor kucaj '/veh 560 1 1' da spawnas vozilo koje ce biti u izlogu za prodaju." );
			SendClientMessagee( playerid, UGBOJA, "Kada spawnas vozilo i nadjes lokaciju kucaj /asvozilo." );
		}
	}
	else if( dialogid == dialog_IZBRISISVE ) {
		if( !response ) return true;
		if( response ) {
			if( listitem == 0 ) {
				ShowPlayerDialog( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 1 ) {
				ShowPlayerDialog( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 2 ) {
				ShowPlayerDialog( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 3 ) {
				if( GetNearestContainer( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu kontejnera." );
				new i = GetNearestContainer( playerid );

				if( IsValidDynamicObject( KontInfo[ i ][ koObjID ] ) )
					DestroyDynamicObject( KontInfo[ i ][ koObjID ] );

				if( IsValidDynamic3DTextLabel( KontInfo[ i ][ KontText3D ] ) )
				{
					DestroyDynamic3DTextLabel( KontInfo[ i ][ KontText3D ] );
				}

				KontInfo[ i ][ koObjPos ][ 0 ] = 0;
				KontInfo[ i ][ koObjPos ][ 1 ] = 0;
				KontInfo[ i ][ koObjPos ][ 2 ] = 0;
				KontInfo[ i ][ koObjRot ][ 0 ] = 0;
				KontInfo[ i ][ koObjRot ][ 1 ] = 0;
				KontInfo[ i ][ koObjRot ][ 2 ] = 0;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), KO_FILE, i );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si kontejner. ID = %d.", i );
			}
			if( listitem == 4 )
			{
				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
				if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

				new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];

				Delete3DTextLabel( VehicleInfo[ autoid ][ v3DText ] );
				Dimi_DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
				ResetVehicle( autoid );
				ObrisiVozilo( autoid );
				SendInfoMessage( playerid, "Obrisao si vozilo. ID = %d.", autoid );
			}
			if( listitem == 5 )
			{
				if( GetNearestAtm( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu bankomata." );
				new i = GetNearestAtm( playerid );
				
				if( IsValidDynamicObject( atmInfo[ i ][ atmObject ] ) )
					DestroyDynamicObject( atmInfo[ i ][ atmObject ] );

				if( IsValidDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] ) ) DestroyDynamic3DTextLabel( atmInfo[ i ][ atmText3D ] );

				atmInfo[ i ][ atmPos ][ 0 ] = 0;
				atmInfo[ i ][ atmPos ][ 1 ] = 0;
				atmInfo[ i ][ atmPos ][ 2 ] = 0;
				atmInfo[ i ][ atmPos ][ 3 ] = 0;
				atmInfo[ i ][ atmPos ][ 4 ] = 0;
				atmInfo[ i ][ atmPos ][ 5 ] = 0;
				atmInfo[ i ][ atmPreseceneZice ] = false;
				atmInfo[ i ][ atmProbijenBios ] = false;
				atmInfo[ i ][ atmVremeDoRoba ] = 0;
				atmInfo[ i ][ atmExists ] = false;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), ATM_FILE, i );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si bankomat. ID = %d.", i );
			}
			if( listitem == 6 ) {
				new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
				if( as == -1 ) return GRESKA( playerid, "Moras biti pored pickupa za kupnju u salonu." );
					
				Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				ResetVehicle( slotid );
				ObrisiVozilo( slotid );

				if( IsValidDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] ) )
					DestroyDynamic3DTextLabel( AutoSalon[ as ][ AutoSalon3D ] );

				if( IsValidDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] ) )
					DestroyDynamicPickup( AutoSalon[ as ][ AutoSalonPickup ] );

				AutoSalon[ as ][ aPickupPos ][ 0 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 1 ] = 0.0;
				AutoSalon[ as ][ aPickupPos ][ 2 ] = 0.0;
				AutoSalon[ as ][ aVW ] = 0;
				AutoSalon[ as ][ aInt ] = 0;//edo majkara
				AutoSalon[ as ][ aVehBuyedPos ][ 0 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 1 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 2 ] = 0.0; AutoSalon[ as ][ aVehBuyedPos ][ 3 ] = 0.0;
				AutoSalon[ as ][ aCameraPos ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraPos ][ 2 ] = 0.0;
				AutoSalon[ as ][ aCameraLookAt ][ 0 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 1 ] = 0.0; AutoSalon[ as ][ aCameraLookAt ][ 2 ] = 0.0;
				//edited LEON
				AutoSalon[ as ][ aVehModel ][ 0 ] = 0; AutoSalon[ as ][ aVehModel ][ 1 ] = 0; AutoSalon[ as ][ aVehModel ][ 2 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 3 ] = 0; AutoSalon[ as ][ aVehModel ][ 4 ] = 0; AutoSalon[ as ][ aVehModel ][ 5 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 6 ] = 0; AutoSalon[ as ][ aVehModel ][ 7 ] = 0; AutoSalon[ as ][ aVehModel ][ 8 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 9 ] = 0; AutoSalon[ as ][ aVehModel ][ 10 ] = 0; AutoSalon[ as ][ aVehModel ][ 11 ] = 0; AutoSalon[ as ][ aVehModel ][ 12 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 13 ] = 0; AutoSalon[ as ][ aVehModel ][ 14 ] = 0; AutoSalon[ as ][ aVehModel ][ 15 ] = 0; AutoSalon[ as ][ aVehModel ][ 16 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 17 ] = 0; AutoSalon[ as ][ aVehModel ][ 18 ] = 0; AutoSalon[ as ][ aVehModel ][ 19 ] = 0; AutoSalon[ as ][ aVehModel ][ 20 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 21 ] = 0; AutoSalon[ as ][ aVehModel ][ 22 ] = 0; AutoSalon[ as ][ aVehModel ][ 23 ] = 0; AutoSalon[ as ][ aVehModel ][ 24 ] = 0;

				AutoSalon[ as ][ aVehModel ][ 25 ] = 0; AutoSalon[ as ][ aVehModel ][ 26 ] = 0; AutoSalon[ as ][ aVehModel ][ 27 ] = 0; AutoSalon[ as ][ aVehModel ][ 28 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 29 ] = 0; AutoSalon[ as ][ aVehModel ][ 30 ] = 0; AutoSalon[ as ][ aVehModel ][ 31 ] = 0; AutoSalon[ as ][ aVehModel ][ 32 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 33 ] = 0; AutoSalon[ as ][ aVehModel ][ 34 ] = 0; AutoSalon[ as ][ aVehModel ][ 35 ] = 0; AutoSalon[ as ][ aVehModel ][ 36 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 37 ] = 0; AutoSalon[ as ][ aVehModel ][ 38 ] = 0; AutoSalon[ as ][ aVehModel ][ 39 ] = 0; AutoSalon[ as ][ aVehModel ][ 40 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 41 ] = 0; AutoSalon[ as ][ aVehModel ][ 42 ] = 0; AutoSalon[ as ][ aVehModel ][ 43 ] = 0; AutoSalon[ as ][ aVehModel ][ 44 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 45 ] = 0; AutoSalon[ as ][ aVehModel ][ 46 ] = 0; AutoSalon[ as ][ aVehModel ][ 47 ] = 0; AutoSalon[ as ][ aVehModel ][ 49 ] = 0;
				AutoSalon[ as ][ aVehModel ][ 49 ] = 0;

				new asFile[ 50 ];
				format( asFile, sizeof( asFile ), AS_FILE, as );
				if( fexist( asFile ) ) { fremove( asFile ); }

				SendInfoMessage( playerid, "Obrisao si autosalon. ID = %d.", as );
			}
			if( listitem == 7 ) {
				new string[ 15 ],
						portid = GetNearestOrgPortID( playerid ),
							orgid = GetNearestOrgIDPort( playerid );

				if( portid == -1 || orgid == -1 ) return GRESKA( playerid, "U blizini nema organizacijskih portova" );

				if( IsValidDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 0 ] ) )
					DestroyDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 0 ] );

				if( IsValidDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 1 ] ) )
					DestroyDynamicPickup( PortOP[ orgid ][ portid ][ Pickup ][ 1 ] );

				PortOP[ orgid ][ portid ][ Pos1 ][ 0 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos1 ][ 1 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos1 ][ 2 ] = 0.0;
				PortOP[ orgid ][ portid ][ Int ][ 0 ] = 0;
				PortOP[ orgid ][ portid ][ VW ][ 0 ] = 0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 0 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 1 ] = 0.0;
				PortOP[ orgid ][ portid ][ Pos2 ][ 2 ] = 0.0;
				PortOP[ orgid ][ portid ][ Int ][ 1 ] = 0;
				PortOP[ orgid ][ portid ][ VW ][ 1 ] = 0;

				new pFile[ 40 ];
				format( pFile, sizeof( pFile ), PORT_FILE, orgid );
				new INI:File = INI_Open( pFile );

				format( string, sizeof( string ), "Pos1X%d", portid );
				INI_WriteFloat( File, string, 0.0);

				format( string, sizeof( string ), "Pos1Y%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos1Z%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Int1%d", portid );
				INI_WriteInt( File, string, 0 );

				format( string, sizeof( string ), "VW1%d", portid );
				INI_WriteInt( File, string, 0 );

				format( string, sizeof( string ), "Pos2X%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos2Y%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Pos2Z%d", portid );
				INI_WriteFloat( File, string, 0.0 );

				format( string, sizeof( string ), "Int2%d", portid );
				INI_WriteInt( File, string, 0 );

				format( string, sizeof( string ), "VW2%d", portid );
				INI_WriteInt( File, string, 0 );

				INI_Close( File );

				SendInfoMessage( playerid, "Obrisao si port za orgu. ID = %d.", orgid );
			}
			if( listitem == 8 ) {
				if( GetNearestHotel( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu hotela." );
				new h = GetNearestHotel( playerid );

				if( IsValidDynamicPickup( hotelInfo[ h ][ hPickup ] ) )
					DestroyDynamicPickup( hotelInfo[ h ][ hPickup ] );

				if( IsValidDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] ) )
					DestroyDynamic3DTextLabel( hotelInfo[ h ][ h3DText ] );

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), HOTEL_FILE, h );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si hotel. ID = %d.", h );
			}
			if( listitem == 9 ) {
			
				if( NearestGate( playerid ) == -1 ) return GRESKA( playerid, "Moras biti pored kapije." );
				new g = NearestGate( playerid );
				
				if( IsValidDynamicObject( GateData[ g ][ gateObject ] ) )
					DestroyDynamicObject( GateData[ g ][ gateObject ] );
					
				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), GATE_FILE, g );
				if( fexist( fstring ) ) { fremove( fstring ); }
				
				SendInfoMessage( playerid, "Obrisao si kapiju. ID = %d.", g );
			}
			if( listitem == 10 ) {
				if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu imanja." );
				new id = GetNearestField( playerid );

				if( IsValidDynamicPickup( fieldInfo[ id ][ fieldPickup ] ) )
					DestroyDynamicPickup( fieldInfo[ id ][ fieldPickup ] );

				if( IsValidDynamic3DTextLabel( fieldInfo[ id ][ field3D ] ) )
					DestroyDynamic3DTextLabel( fieldInfo[ id ][ field3D ] );
					
				if( IsValidDynamicObject( fieldInfo[ id ][ fieldObject ] ) )
					DestroyDynamicObject( fieldInfo[ id ][ fieldObject ] );

				// edit ovo dodano = kad ovde brises imanje proveravas i vozilo li je valid pa onda delete..
				
				if( fieldInfo[ id ][ fieldTractorID ] != -1 &&
					VehicleInfo[ fieldInfo[ id ][ fieldTractorID ] ][ vModel ] != 0 &&
					VehicleInfo[ fieldInfo[ id ][ fieldTractorID ] ][ vID ] != INVALID_VEHICLE_ID ) {
					
					Dimi_DestroyVehicle( VehicleInfo[ fieldInfo[ id ][ fieldTractorID ] ][ vID ] );
					ResetVehicle( fieldInfo[ id ][ fieldTractorID ] );
					ObrisiVozilo( fieldInfo[ id ][ fieldTractorID ] );
				} 
				
				if( fieldInfo[ id ][ fieldAdditionID ] != -1 &&
					VehicleInfo[ fieldInfo[ id ][ fieldAdditionID ] ][ vModel ] != 0 &&
					VehicleInfo[ fieldInfo[ id ][ fieldAdditionID ] ][ vID ] != INVALID_VEHICLE_ID ) {

					Dimi_DestroyVehicle( VehicleInfo[ fieldInfo[ id ][ fieldAdditionID ] ][ vID ] );
					ResetVehicle( fieldInfo[ id ][ fieldAdditionID ] );
					ObrisiVozilo( fieldInfo[ id ][ fieldAdditionID ] );
				}
				
				if( fieldInfo[ id ][ fieldTruckID ] != -1 &&
					VehicleInfo[ fieldInfo[ id ][ fieldTruckID ] ][ vModel ] != 0 &&
					VehicleInfo[ fieldInfo[ id ][ fieldTruckID ] ][ vID ] != INVALID_VEHICLE_ID ) {

					Dimi_DestroyVehicle( VehicleInfo[ fieldInfo[ id ][ fieldTruckID ] ][ vID ] );
					ResetVehicle( fieldInfo[ id ][ fieldTruckID ] );
					ObrisiVozilo( fieldInfo[ id ][ fieldTruckID ] );
				}
				
				ResetField( id );
				
				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_FIELD, id );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si imanje. ID = %d.", id );
			}
			if( listitem == 11 ) {
				if( GetNearestGarage( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu garaze." );
				new id = GetNearestGarage( playerid );

				if( IsValidDynamicPickup( garageInfo[ id ][ garagePickup ] ) )
					DestroyDynamicPickup( garageInfo[ id ][ garagePickup ] );

				if( IsValidDynamic3DTextLabel( garageInfo[ id ][ garage3D ] ) )
					DestroyDynamic3DTextLabel( garageInfo[ id ][ garage3D ] );

				ResetGarage( id );

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_GARAGE, id );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si garazu. ID = %d.", id );
			}
			if( listitem == 12 ) {
			
				if( GetNearestRadar( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu radara." );
				new id = GetNearestRadar( playerid );

				if( IsValidDynamicObject( radarInfo[ id ][ radarObject ] ) )
					DestroyDynamicObject( radarInfo[ id ][ radarObject ] );

				radarInfo[ id ][ radarMaxSpeed ] = 0;
				radarInfo[ id ][ radarPrice ] = 0;
				radarInfo[ id ][ radarPos ][ 0 ] = 0;
				radarInfo[ id ][ radarPos ][ 1 ] = 0;
				radarInfo[ id ][ radarPos ][ 2 ] = 0;
				radarInfo[ id ][ radarPos ][ 3 ] = 0;
				radarInfo[ id ][ radarPos ][ 4 ] = 0;
				radarInfo[ id ][ radarPos ][ 5 ] = 0;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_RADARS, id );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si radar. ID = %d.", id );
			}
			if( listitem == 13 ) {
			
				if( GetNearestGZone( playerid ) == -1 ) return GRESKA( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

				if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) )
					IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );
			
				if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) )
					DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );
					
				if( IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] ) )
					IsValidDynamicArea( gZoneInfo[ id ][ gZoneRectAngle ] );
				
				GZone_Reset( id );
			
				GangZoneHideForAll( gZoneInfo[ id ][ gZoneID ] );
				GangZoneDestroy( gZoneInfo[ id ][ gZoneID ] );
				
				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_GZONE, id );
				if( fexist( fstring ) ) { fremove( fstring ); }
				
				SendInfoMessage( playerid, "Obrisao si gangzonu. ID = %d.", id );
			
			}
			if( listitem == 14 ) {
			
				if( GetNearestPresent( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu poklona." );
				new i = GetNearestPresent( playerid );

				if( IsValidDynamicPickup( presentsInfo[ i ][ presObject ] ) )
					DestroyDynamicPickup( presentsInfo[ i ][ presObject ] );

				if( IsValidDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] ) )
					DestroyDynamic3DTextLabel( presentsInfo[ i ][ pres3d ] );

				presentsInfo[ i ][ presPos ][ 0 ] = 0;
				presentsInfo[ i ][ presPos ][ 1 ] = 0;
				presentsInfo[ i ][ presPos ][ 2 ] = 0;
				presentsInfo[ i ][ presPos ][ 3 ] = 0;
				presentsInfo[ i ][ presPos ][ 4 ] = 0;
				presentsInfo[ i ][ presPos ][ 5 ] = 0;
				presentsInfo[ i ][ presTaken ] = true;
				presentsInfo[ i ][ presPlaced ] = false;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_PRESENTS, i );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si poklon. ID = %d.", i );
			}
			if( listitem == 15 ) {

				if( GetNearestCTree( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu jelke." );
				new i = GetNearestCTree( playerid );

				if( IsValidDynamicObject( CTree[ i ][ ctObject ] ) )
					DestroyDynamicObject( CTree[ i ][ ctObject ] );

				if( IsValidDynamic3DTextLabel( CTree[ i ][ ct3d ] ) )
					DestroyDynamic3DTextLabel( CTree[ i ][ ct3d ] );

				CTree[ i ][ ctPos ][ 0 ] = 0;
				CTree[ i ][ ctPos ][ 1 ] = 0;
				CTree[ i ][ ctPos ][ 2 ] = 0;
				CTree[ i ][ ctPos ][ 3 ] = 0;
				CTree[ i ][ ctPos ][ 4 ] = 0;
				CTree[ i ][ ctPos ][ 5 ] = 0;
				CTree[ i ][ ctPlaced ] = false;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_CTREES, i );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si jelku. ID = %d.", i );
			}
			if( listitem == 16 ) {

				if( GetNearestXOrb( playerid ) == -1 ) return GRESKA( playerid, "Moras biti blizu lampe." );
				new i = GetNearestXOrb( playerid );

				if( IsValidDynamicObject( XmasOrbs[ i ][ xoObject ] ) )
					DestroyDynamicObject( XmasOrbs[ i ][ xoObject ] );

				XmasOrbs[ i ][ xoPos ][ 0 ] = 0;
				XmasOrbs[ i ][ xoPos ][ 1 ] = 0;
				XmasOrbs[ i ][ xoPos ][ 2 ] = 0;
				XmasOrbs[ i ][ xoPos ][ 3 ] = 0;
				XmasOrbs[ i ][ xoPos ][ 4 ] = 0;
				XmasOrbs[ i ][ xoPos ][ 5 ] = 0;
				XmasOrbs[ i ][ xoPlaced ] = false;

				new fstring[ 64 ];
				format( fstring, sizeof( fstring ), F_XORBS, i );
				if( fexist( fstring ) ) { fremove( fstring ); }

				SendInfoMessage( playerid, "Obrisao si lampu. ID = %d.", i );
			}
		}
	}
	else if( dialogid == dialog_IZMENISVE )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem == 0 ) {
				ShowPlayerDialog( playerid, dialog_ORGEDIT, DSL, D_NASLOV, "Promeni Ime\nPromeni Interior\nPromeni Rankove\nPromeni Tip\nPromeni muske skinove\nPromeni Skracenicu\nNapravi DutyPoint\nNapravi Equipment Point\nNapravi Port point\nPromeni zenske skinove\nPromeni max broj clanova\nRefreshaj organizaciju\nKreiraj sef\nPromeni boju orge\nZakljucaj organizaciju\nIzaberi org vrstu droge\nKreiraj drug factory\nKreiraj garazu", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 1 ) {
				ShowPlayerDialog( playerid, dialog_FEDIT, DSL, D_NASLOV, "Promeni Ime\nOtkljucaj firmu\nZakljucaj firmu\nProdaj firmu\nPromeni kordinate izlaza\nPromeni vrstu firme", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 2 ) {
				ShowPlayerDialog( playerid, dialog_VEDIT, DSL, D_NASLOV, "Promeni cijenu\nParkiraj vozilo\nProdaj vozilo\nPromeni boju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 3 ) {
				ShowPlayerDialog( playerid, dialog_IEDIT, DSL, D_NASLOV, "Promeni cijenu\nOtkljucaj imovinu\nZakljucaj imovinu\nProdaj imovinu", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 4 ) {
				ShowPlayerDialog( playerid, dialog_HEDIT, DSL, D_NASLOV, "Promeni cijenu\nPromeni level\nProdaj hotel", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 5 ) {
				ShowPlayerDialog( playerid, dialog_IMEDIT, DSL, D_NASLOV, "Promeni cijenu\nPromeni level\nProdaj imanje\nDodaj traktor\nDodaj prikljucak za traktor\nDodaj kamion", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 6 ) {
				ShowPlayerDialog( playerid, dialog_GEDIT, DSL, D_NASLOV, "Promeni cijenu\nPromeni level\nProdaj garazu", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 7 ) {
				ShowPlayerDialog( playerid, dialog_GPSEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 8 ) {
				ShowPlayerDialog( playerid, dialog_APORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 9 ) {
				ShowPlayerDialog( playerid, dialog_SPORTEDIT, DSL, D_NASLOV, "Promeni ime\nPromeni poziciju", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 10 ) {
				ShowPlayerDialog( playerid, dialog_AUTOSEDIT, DSL, D_NASLOV, "Dodaj kolicinu modela", D_ODABERI, D_ODUSTANI ); }
			if( listitem == 11 ) {
				ShowPlayerDialog( playerid, dialog_GANGZEDIT, DSL, D_NASLOV, "Daj vlasnistvo zone bandi\nDa li zona moze da se zauzima?\nOslobodi zonu\nPromeni boju zone\nPostavi pickup ovde", D_ODABERI, D_ODUSTANI ); }
		}
	}
	else if( dialogid == dialog_GANGZID ) {

		if( !response ) return true;
		if( response ) {
		
			new organizacija, ImaFajl[ 50 ];
				
			if( sscanf( inputtext, "i", organizacija ) ) return ShowPlayerDialog( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );

			format( ImaFajl, sizeof( ImaFajl ), O_FILE, organizacija );
			if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji u bazi podataka." );
		
			new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return GRESKA( playerid, "Moras biti pored teritorije." );

			gZoneInfo[ gZone__ID ][ gZoneGangID ] = organizacija;
			gZoneInfo[ gZone__ID ][ gZoneTaken ] = true;

			GZone_Refresh( gZone__ID );

			GZone_Save( gZone__ID );
			
			SendInfoMessage( playerid, "Ova zona je sad u vlasnistvu organizacije ID %d.", organizacija );
		}
	}
	else if( dialogid == dialog_GANGZCOLOREDIT ) {

		if( !response ) return true;
		if( response ) {

			new color[24], stringic[24];
			if( sscanf( inputtext, "s[24]", color ) ) return ShowPlayerDialog( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );

			new gZone__ID = GetNearestGZone( playerid );
			if( gZone__ID == -1 ) return GRESKA( playerid, "Moras biti pored teritorije." );

			format( stringic, sizeof( stringic ), "%s", color );
			strmid( gZoneInfo[ gZone__ID ][ gZoneColor ], stringic, 0, strlen( stringic ), 255 );

			GangZoneHideForAll( gZoneInfo[ gZone__ID ][ gZoneID ] );
			
			format( stringic, sizeof( stringic ), "0x%s66", gZoneInfo[ gZone__ID ][ gZoneColor ] );
			GangZoneShowForAll( gZoneInfo[ gZone__ID ][ gZoneID ], HexToInt( stringic ) );

			GZone_Save( gZone__ID );

			SendInfoMessage( playerid, "Uneo si boju." );

		}
	}
	else if( dialogid == dialog_GANGZEDIT ) {
	
		if( !response ) return true;
		if( response ) {
		
			if( listitem == 0 ) {
			
				new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return GRESKA( playerid, "Moras biti pored teritorije." );
				ShowPlayerDialog( playerid, dialog_GANGZID, DSI, D_NASLOV, "Unesi ID orge kojoj dajete vlasnistvo.", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 1 ) {

				new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return GRESKA( playerid, "Moras biti pored teritorije." );
				if( !gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {
				
					gZoneInfo[ gZone__ID ][ gZoneTakeable ] = true;
					SendInfoMessage( playerid, "Postavio si zonu ID - %d, da moze da se zauzima.", gZone__ID );
					GZone_Save( gZone__ID );
				}
				else if( gZoneInfo[ gZone__ID ][ gZoneTakeable ] ) {

					gZoneInfo[ gZone__ID ][ gZoneTakeable ] = false;
					SendInfoMessage( playerid, "Postavio si zonu ID - %d, da ne moze da se zauzima.", gZone__ID );
					GZone_Save( gZone__ID );
				}
			}
			if( listitem == 2 ) {
			
				new gZone__ID = GetNearestGZone( playerid );
				if( gZone__ID == -1 ) return GRESKA( playerid, "Moras biti pored teritorije." );

				gZoneInfo[ gZone__ID ][ gZoneGangID ] = -1;
				gZoneInfo[ gZone__ID ][ gZoneTaken ] = false;

				GZone_Refresh( gZone__ID );

				GZone_Save( gZone__ID );
				
				SendInfoMessage( playerid, "Ova zona je sad slobodna." );
			
			}
			if( listitem == 3 ) {
			
				ShowPlayerDialog( playerid, dialog_GANGZCOLOREDIT, DSI, D_NASLOV, "Unesite boju za gang zonu.\nPrimer: FF2244", D_ODABERI, D_NAZAD );
			}
			if( listitem == 4 ) {
			
				new Float:Pos[ 3 ];

				GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

				if( GetNearestGZone( playerid ) == -1 ) return GRESKA( playerid, "Moras biti u teritoriji." );
				new id = GetNearestGZone( playerid );

				if( IsValidDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] ) )
					DestroyDynamic3DTextLabel( gZoneInfo[ id ][ gZone3D ] );

				if( IsValidDynamicPickup( gZoneInfo[ id ][ gZonePickup ] ) )
					DestroyDynamicPickup( gZoneInfo[ id ][ gZonePickup ] );

				gZoneInfo[ id ][ gZonePickupPos ][ 0 ] = Pos[ 0 ];
				gZoneInfo[ id ][ gZonePickupPos ][ 1 ] = Pos[ 1 ];
				gZoneInfo[ id ][ gZonePickupPos ][ 2 ] = Pos[ 2 ];

				gZoneInfo[ id ][ gZonePickup ] = CreateDynamicPickup( 1313, 1, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 0, 0 );
				gZoneInfo[ id ][ gZone3D ] = CreateDynamic3DTextLabel( ""col_white"[ TERITORIJA ]\nTeritorija je "col_balkanstory"slobodna"col_white"\nAko zelis da je zauzmes kucaj "col_balkanstory"/zauzmi", BELA, gZoneInfo[ id ][ gZonePickupPos ][ 0 ], gZoneInfo[ id ][ gZonePickupPos ][ 1 ], gZoneInfo[ id ][ gZonePickupPos ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0 );

				GZone_Save( id );

			}
		}
	}
	else if( dialogid == dialog_AUTOSEDIT ) {
		if( !response ) return true;
		if( response ) {
			if( listitem ==  0 ) {
				new as = GetNearestSalon( playerid );
				if( as == -1 ) return GRESKA( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

				new coordsstring[ 64 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
				strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
				for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
					if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
						format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
						strcat( DialogStrgEx, coordsstring );
					}
				}
				ShowPlayerDialog( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
	}
	else if( dialogid == dialog_ASEDITAMMOUNT ) {
		if( !response ) return true;
		if( response ) {
			new as = GetNearestSalon( playerid ), model, kolicina, model2;
			if( as == -1 ) return GRESKA( playerid, "Moras biti pored pickupa za kupovinu u salonu." );

			if( sscanf( inputtext, "dd", model, kolicina ) ) {
			
				new coordsstring[ 64 ];
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, "Unesite za broj modela vozila i kolicinu.\nPrimer: 1 4\n" );
				strcat( DialogStrgEx, "Kolicina ne moze ici ispod 1.Kolicina koju unesete dodaje se sa postojecom\n\n" );
				for( new i = 0; i < AutoSalon[ as ][ aMaxVehModel ]; i++ ) {
					if( AutoSalon[ as ][ aVehModel ][ i ] != 0 ) {
						format( coordsstring, sizeof( coordsstring ), "Model %d - %s - %d komada\n", (i+1), ImeVozila[ (AutoSalon[ as ][ aVehModel ][ i ]- 400) ], AutoSalon[ as ][ aVehAmmount ][ i ] );
						strcat( DialogStrgEx, coordsstring );
					}
				}
				ShowPlayerDialog( playerid, dialog_ASEDITAMMOUNT, DSI, D_NASLOV, DialogStrgEx, D_ODABERI, D_NAZAD );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return 1;
			}
			if( kolicina < 1 ) return GRESKA( playerid, "Kolicina ne moze ici ispod 1." );
			if( model < 1 ) return GRESKA( playerid, "Model ne moze ici ispod 1." );
			if( model > AutoSalon[ as ][ aMaxVehModel ] ) return GRESKA( playerid, "Uneli ste broj nepostojeceg modela." );
			model2 = model-1;
			
			AutoSalon[ as ][ aVehAmmount ][ model2 ] += kolicina;
			SaveSalon( as );
			SendInfoMessage( playerid, "Dodao si jos %d %s koja mogu da se kupe.", kolicina, ImeVozila[ (AutoSalon[ as ][ aVehModel ][ model2 ]- 400) ] );
		}
	}
	else if( dialogid == dialog_SPORTEDIT )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem ==  0 )
			{
				ShowPlayerDialog( playerid, dialog_IZMENAIMENASPORT, DSL, "Izaberi grad porta", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 )
			{
				ShowPlayerDialog( playerid, dialog_IZMENAPOZSPORT, DSL, "Izaberi grad porta", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
		}
	}

	else if( dialogid == dialog_IZMENAPOZSPORT )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
			
				case 0:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGSPORTS; i++ )
					{
						if( BGsupportInfo[ i ][ BGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGsupportInfo[ i ][ BGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMJENAPOZSPORTABG, DSL, "Beogradski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
			
				case 1:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SASPORTS; i++ )
					{
						if( SAsupportInfo[ i ][ SAsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAsupportInfo[ i ][ SAsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMJENAPOZSPORTASA, DSL, "Sarajevski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 2:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGSPORTS; i++ )
					{
						if( ZGsupportInfo[ i ][ ZGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGsupportInfo[ i ][ ZGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMJENAPOZSPORTAZG, DSL, "Zagrebacki portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 3:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSSPORTS; i++ )
					{
						if( OSsupportInfo[ i ][ OSsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSsupportInfo[ i ][ OSsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZMJENAPOZSPORTAOS, DSL, "Ostale lokacije portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
			
			}

		}
		
	}


	else if( dialogid == dialog_IZMJENAPOZSPORTABG )
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			BGsupportInfo[ IDaport ][ BGsupportPos ][ 0 ] = Pos[ 0 ];
			BGsupportInfo[ IDaport ][ BGsupportPos ][ 1 ] = Pos[ 1 ];
			BGsupportInfo[ IDaport ][ BGsupportPos ][ 2 ] = Pos[ 2 ];
			SaveBGSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GM porta '%s' na tvoju poziciju.", BGsupportInfo[ IDaport ][ BGsupportName ] );
		}
	}
	
	else if( dialogid == dialog_IZMJENAPOZSPORTASA )
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			SAsupportInfo[ IDaport ][ SAsupportPos ][ 0 ] = Pos[ 0 ];
			SAsupportInfo[ IDaport ][ SAsupportPos ][ 1 ] = Pos[ 1 ];
			SAsupportInfo[ IDaport ][ SAsupportPos ][ 2 ] = Pos[ 2 ];
			SaveSASports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GM porta '%s' na tvoju poziciju.", SAsupportInfo[ IDaport ][ SAsupportName ] );
		}
	}

	else if( dialogid == dialog_IZMJENAPOZSPORTAZG )
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			ZGsupportInfo[ IDaport ][ ZGsupportPos ][ 0 ] = Pos[ 0 ];
			ZGsupportInfo[ IDaport ][ ZGsupportPos ][ 1 ] = Pos[ 1 ];
			ZGsupportInfo[ IDaport ][ ZGsupportPos ][ 2 ] = Pos[ 2 ];
			SaveZGSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GM porta '%s' na tvoju poziciju.", ZGsupportInfo[ IDaport ][ ZGsupportName ] );
		}
	}

	else if( dialogid == dialog_IZMJENAPOZSPORTAOS )
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			OSsupportInfo[ IDaport ][ OSsupportPos ][ 0 ] = Pos[ 0 ];
			OSsupportInfo[ IDaport ][ OSsupportPos ][ 1 ] = Pos[ 1 ];
			OSsupportInfo[ IDaport ][ OSsupportPos ][ 2 ] = Pos[ 2 ];
			SaveOSSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GM porta '%s' na tvoju poziciju.", OSsupportInfo[ IDaport ][ OSsupportName ] );
		}
	}













	else if( dialogid == dialog_IZMENAIMENASPORT )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
			
				case 0:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGSPORTS; i++ )
					{
						if( BGsupportInfo[ i ][ BGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGsupportInfo[ i ][ BGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITIMENASPORTBG, DSL, "Beogradski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				
				}
				case 1:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SASPORTS; i++ )
					{
						if( SAsupportInfo[ i ][ SAsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAsupportInfo[ i ][ SAsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITIMENASPORTSA, DSL, "Sarajevski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 2:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGSPORTS; i++ )
					{
						if( ZGsupportInfo[ i ][ ZGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGsupportInfo[ i ][ ZGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITIMENASPORTZG, DSL, "Zagrebacki portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 3:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSSPORTS; i++ )
					{
						if( OSsupportInfo[ i ][ OSsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSsupportInfo[ i ][ OSsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITIMENASPORTOS, DSL, "Ostale lokacije portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
			
			}
	
		}
		
	}
	
	else if( dialogid == dialog_EDITIMENASPORTBG )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTBG, DSI, D_NASLOV, "Unesite novo ime izabranog GM porta.", D_ODABERI, D_ODUSTANI );
	
		}
	}
	
	else if( dialogid == dialog_IZMJENJENOIMESPORTBG )
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTBG, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu GM port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( BGsupportInfo[ id ][ BGsupportName ], aportname, 0, strlen( aportname ), 50 );
			SaveBGSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_EDITIMENASPORTSA )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTSA, DSI, D_NASLOV, "Unesite novo ime izabranog GM porta.", D_ODABERI, D_ODUSTANI );

		}
	}

	else if( dialogid == dialog_IZMJENJENOIMESPORTSA )
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTSA, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu GM port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( SAsupportInfo[ id ][ SAsupportName ], aportname, 0, strlen( aportname ), 50 );
			SaveSASports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
	}
	

	else if( dialogid == dialog_EDITIMENASPORTZG )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTZG, DSI, D_NASLOV, "Unesite novo ime izabranog GM porta.", D_ODABERI, D_ODUSTANI );

		}
	}

	else if( dialogid == dialog_IZMJENJENOIMESPORTZG )
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTZG, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu GM port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( ZGsupportInfo[ id ][ ZGsupportName ], aportname, 0, strlen( aportname ), 50 );
			SaveZGSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
	}
	
	
	
	else if( dialogid == dialog_EDITIMENASPORTOS )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTOS, DSI, D_NASLOV, "Unesite novo ime izabranog GM porta.", D_ODABERI, D_ODUSTANI );

		}
	}

	else if( dialogid == dialog_IZMJENJENOIMESPORTOS )
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENJENOIMESPORTOS, DSI, D_NASLOV, "Unesite novo ime izabranog support porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu GM port lokaciju." );
			new id = gpsid[ playerid ];

			strmid( OSsupportInfo[ id ][ OSsupportName ], aportname, 0, strlen( aportname ), 50 );
			SaveOSSports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
	}
	
	else if( dialogid == dialog_APORTEDIT )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem ==  0 )
			{
				ShowPlayerDialog( playerid, dialog_IZMENAIMENAAPORT, DSL, "Izaberite grad porta", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 )
			{
				ShowPlayerDialog( playerid, dialog_EDITAPORTPOZICIJA, DSL, "Izaberite grad porta", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	
	else if( dialogid == dialog_EDITAPORTPOZICIJA )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGAPORTS; i++ )
					{
						if( AportBGInfo[ i ][ BGaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportBGInfo[ i ][ BGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAAPORTPOZBG, DSL, "Beogradski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SAAPORTS; i++ )
					{
						if( AportSAInfo[ i ][ SAaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportSAInfo[ i ][ SAaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAAPORTPOZSA, DSL, "Sarajevski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGAPORTS; i++ )
					{
						if( AportZGInfo[ i ][ ZGaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportZGInfo[ i ][ ZGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAAPORTPOZZG, DSL, "Zagrebacki portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 3://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSAPORTS; i++ )
					{
						if( AportOSInfo[ i ][ OSaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportOSInfo[ i ][ OSaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAAPORTPOZOS, DSL, "OStale lokacije portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}

			}

		}
	}
	
	else if( dialogid == dialog_EDITAAPORTPOZBG )//Promjenjena pozicija Beogradskih
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			AportBGInfo[ IDaport ][ BGaportPos ][ 0 ] = Pos[ 0 ];
			AportBGInfo[ IDaport ][ BGaportPos ][ 1 ] = Pos[ 1 ];
			AportBGInfo[ IDaport ][ BGaportPos ][ 2 ] = Pos[ 2 ];
			SaveBGAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju ADMIN TEAM porta '%s' na tvoju poziciju.", AportBGInfo[ IDaport ][ BGaportName ] );
		}
	}
	
	else if( dialogid == dialog_EDITAAPORTPOZSA )//Promjenjena pozicija Sarajevskih
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			AportSAInfo[ IDaport ][ SAaportPos ][ 0 ] = Pos[ 0 ];
			AportSAInfo[ IDaport ][ SAaportPos ][ 1 ] = Pos[ 1 ];
			AportSAInfo[ IDaport ][ SAaportPos ][ 2 ] = Pos[ 2 ];
			SaveSAAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju ADMIN TEAM porta '%s' na tvoju poziciju.", AportSAInfo[ IDaport ][ SAaportName ] );
		}
	}
	
	else if( dialogid == dialog_EDITAAPORTPOZZG )//Promjenjena pozicija Zagrebackih
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			AportZGInfo[ IDaport ][ ZGaportPos ][ 0 ] = Pos[ 0 ];
			AportZGInfo[ IDaport ][ ZGaportPos ][ 1 ] = Pos[ 1 ];
			AportZGInfo[ IDaport ][ ZGaportPos ][ 2 ] = Pos[ 2 ];
			SaveZGAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju ADMIN TEAM porta '%s' na tvoju poziciju.", AportZGInfo[ IDaport ][ ZGaportName ] );
		}
	}
	else if( dialogid == dialog_EDITAAPORTPOZOS )//Promjenjena pozicija Ostalih
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			AportOSInfo[ IDaport ][ OSaportPos ][ 0 ] = Pos[ 0 ];
			AportOSInfo[ IDaport ][ OSaportPos ][ 1 ] = Pos[ 1 ];
			AportOSInfo[ IDaport ][ OSaportPos ][ 2 ] = Pos[ 2 ];
			SaveOSAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju ADMIN TEAM porta '%s' na tvoju poziciju.", AportOSInfo[ IDaport ][ OSaportName ] );
		}
	}
	
	//-----------------------------------------------------
	else if( dialogid == dialog_IZMENAIMENAAPORT )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGAPORTS; i++ )
					{
						if( AportBGInfo[ i ][ BGaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportBGInfo[ i ][ BGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAPORTABG, DSL, "Beogradski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SAAPORTS; i++ )
					{
						if( AportSAInfo[ i ][ SAaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportSAInfo[ i ][ SAaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAPORTASA, DSL, "Sarajevski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGAPORTS; i++ )
					{
						if( AportZGInfo[ i ][ ZGaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportZGInfo[ i ][ ZGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAPORTAZG, DSL, "Zagrebacki portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 3://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSAPORTS; i++ )
					{
						if( AportOSInfo[ i ][ OSaportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportOSInfo[ i ][ OSaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_EDITAPORTAOS, DSL, "OStale lokacije portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}

			}

		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTABG )//unos imena za Beograd
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_EDITAAPORTIMEBG, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTASA )//unos imena za Sarajevo
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_EDITAPORTIMESA, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTAZG )//unos imena za Zagreb
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_EDITAPORTIMEZG, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTAOS )//unos imena za Ostalo
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_EDITAPORTIMEOS, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAAPORTIMEBG )//izmjenio BG
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_EDITAAPORTIMEBG, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabran ADMIN TEAM port lokaciju." );
			new id = gpsid[ playerid ];
			strmid( AportBGInfo[ id ][ BGaportName ], aportname, 0, strlen( aportname ), 50 );
			SaveBGAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime ADMIN TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
		
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTIMESA )//izmjenio SA
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_EDITAPORTIMESA, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabran ADMIN TEAM port lokaciju." );
			new id = gpsid[ playerid ];
			strmid( AportSAInfo[ id ][ SAaportName ], aportname, 0, strlen( aportname ), 50 );
			SaveSAAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime ADMIN TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}
	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTIMEZG )//izmjenio ZG
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_EDITAPORTIMEZG, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabran ADMIN TEAM port lokaciju." );
			new id = gpsid[ playerid ];
			strmid( AportZGInfo[ id ][ ZGaportName ], aportname, 0, strlen( aportname ), 50 );
			SaveZGAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime ADMIN TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}

	}
	//-------------------------------------------------------------------------
	else if( dialogid == dialog_EDITAPORTIMEOS )//izmjenio OStalo
	{
		if( !response ) return true;
		if( response )
		{
			new aportname[ 50 ];
			if( sscanf( inputtext, "s[50]", aportname ) ) return ShowPlayerDialog( playerid, dialog_EDITAPORTIMEOS, DSI, D_NASLOV, "Unesite novo ime izabranog ADMIN TEAM porta.", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabran ADMIN TEAM port lokaciju." );
			new id = gpsid[ playerid ];
			strmid( AportOSInfo[ id ][ OSaportName ], aportname, 0, strlen( aportname ), 50 );
			SaveOSAports( );
			SendInfoMessage( playerid, "Uspjesno si promenio ime ADMIN TEAM porta u '%s'.", aportname );
			gpsid[ playerid ] = -1;
		}

	}
	
	
	
	else if( dialogid == dialog_IZMENAPOZAPORT )
	{
		if( !response ) return true;
		if( response )
		{
			new IDaport = listitem, Float:Pos[ 3 ];

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

			AportBGInfo[ IDaport ][ BGaportPos ][ 0 ] = Pos[ 0 ];
			AportBGInfo[ IDaport ][ BGaportPos ][ 1 ] = Pos[ 1 ];
			AportBGInfo[ IDaport ][ BGaportPos ][ 2 ] = Pos[ 2 ];

			SaveBGAports( );

			SendInfoMessage( playerid, "Uspjesno si promenio poziciju ADMIN TEAM porta '%s' na tvoju poziciju.", AportBGInfo[ IDaport ][ BGaportName ] );
		}
	}
	else if( dialogid == dialog_GPSEDIT )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem ==  0 )
			{
				ShowPlayerDialog( playerid, dialog_IZMENAIMENAGPS, DSL, "Izaberi grad", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 )
			{
				ShowPlayerDialog( playerid, dialog_IZMENAPOZGPS, DSL, "Izaberi grad", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
		} 
	}
	
	else if( dialogid == dialog_IZMENAPOZGPS )
	{
		if( !response ) return true;
		if( response )
		{

			switch(listitem)
			{
			
				case 0:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_BGGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_BGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGgpsInfo[ i ][ BGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PROMJENAPOZGPSBG, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_SAGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_SAGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAgpsInfo[ i ][ SAgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PROMJENAPOZGPSSA, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_ZGGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_ZGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGgpsInfo[ i ][ ZGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PROMJENAPOZGPSZG, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 3:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_OSGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_OSGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSgpsInfo[ i ][ OSgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PROMJENAPOZGPSOS, DSL, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
			
			
			}

		}
	}
	
	else if( dialogid == dialog_PROMJENAPOZGPSBG )
	{
		if( !response ) return true;
		if( response )
		{
			new IDgps = listitem+1, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			BGgpsInfo[ IDgps ][ BGgpsPos ][ 0 ] = Pos[ 0 ];
			BGgpsInfo[ IDgps ][ BGgpsPos ][ 1 ] = Pos[ 1 ];
			BGgpsInfo[ IDgps ][ BGgpsPos ][ 2 ] = Pos[ 2 ];
			BGGPS_Save( IDgps );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", BGgpsInfo[ IDgps ][ BGgpsName ] );
		}
	}
	
	else if( dialogid == dialog_PROMJENAPOZGPSSA )
	{
		if( !response ) return true;
		if( response )
		{
			new IDgps = listitem+1, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			SAgpsInfo[ IDgps ][ SAgpsPos ][ 0 ] = Pos[ 0 ];
			SAgpsInfo[ IDgps ][ SAgpsPos ][ 1 ] = Pos[ 1 ];
			SAgpsInfo[ IDgps ][ SAgpsPos ][ 2 ] = Pos[ 2 ];
			SAGPS_Save( IDgps );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", SAgpsInfo[ IDgps ][ SAgpsName ] );
		}
	}
	else if( dialogid == dialog_PROMJENAPOZGPSZG )
	{
		if( !response ) return true;
		if( response )
		{
			new IDgps = listitem+1, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			ZGgpsInfo[ IDgps ][ ZGgpsPos ][ 0 ] = Pos[ 0 ];
			ZGgpsInfo[ IDgps ][ ZGgpsPos ][ 1 ] = Pos[ 1 ];
			ZGgpsInfo[ IDgps ][ ZGgpsPos ][ 2 ] = Pos[ 2 ];
			ZGGPS_Save( IDgps );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", ZGgpsInfo[ IDgps ][ ZGgpsName ] );
		}
	}
	else if( dialogid == dialog_PROMJENAPOZGPSOS )
	{
		if( !response ) return true;
		if( response )
		{
			new IDgps = listitem+1, Float:Pos[ 3 ];
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			OSgpsInfo[ IDgps ][ OSgpsPos ][ 0 ] = Pos[ 0 ];
			OSgpsInfo[ IDgps ][ OSgpsPos ][ 1 ] = Pos[ 1 ];
			OSgpsInfo[ IDgps ][ OSgpsPos ][ 2 ] = Pos[ 2 ];
			OSGPS_Save( IDgps );
			SendInfoMessage( playerid, "Uspjesno si promenio poziciju GPS lokacije '%s' na tvoju poziciju.", OSgpsInfo[ IDgps ][ OSgpsName ] );
		}
	}
	
	
	
	
	
	else if( dialogid == dialog_IZMENAIMENAGPS )
	{
		if( !response ) return true;
		if( response )
		{

			switch(listitem)
			{
			
				case 0:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_BGGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_BGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGgpsInfo[ i ][ BGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRAGPSPOZBG, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
				
				}
				case 1:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_SAGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_SAGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAgpsInfo[ i ][ SAgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRAGPSPOZSA, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 2:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_ZGGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_ZGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGgpsInfo[ i ][ ZGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRAGPSPOZZG, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 3:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_OSGPS; i++ )
					{
						new filename[ 60 ];
						format( filename, sizeof( filename ), F_OSGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSgpsInfo[ i ][ OSgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRAGPSPOZOS, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
			
			}
		}
	}
	
	else if( dialogid == dialog_BIRAGPSPOZBG )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem+1;
			ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSBG, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
		}
	}
	
	else if( dialogid == dialog_BIRAGPSPOZSA )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem+1;
			ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSSA, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
		}
	}
	
	else if( dialogid == dialog_BIRAGPSPOZZG )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem+1;
			ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSZG, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
		}
	}
	
	else if( dialogid == dialog_BIRAGPSPOZOS )
	{
		if( !response ) return true;
		if( response )
		{
			gpsid[ playerid ] = listitem+1;
			ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSOS, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
		}
	}
	
	
	else if( dialogid == dialog_IZMJENAIMENAGPSBG )
	{
		if( !response ) return true;
		if( response )
		{
			new gpsname[ 50 ];
			if( sscanf( inputtext, "s[50]", gpsname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSBG, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu gps lokaciju." );
			new filename[ 60 ];
			format( filename, sizeof( filename ), F_BGGPS, gpsid[ playerid ] );
			if( !fexist( filename ) ) return GRESKA( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );
			strmid( BGgpsInfo[ gpsid[ playerid ] ][ BGgpsName ], gpsname, 0, strlen( gpsname ), 50 );
			BGGPS_Save( gpsid[ playerid ] );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
		}
	}
	
	
	else if( dialogid == dialog_IZMJENAIMENAGPSSA )
	{
		if( !response ) return true;
		if( response )
		{
			new gpsname[ 50 ];
			if( sscanf( inputtext, "s[50]", gpsname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSSA, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu gps lokaciju." );
			new filename[ 60 ];
			format( filename, sizeof( filename ), F_SAGPS, gpsid[ playerid ] );
			if( !fexist( filename ) ) return GRESKA( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );
			strmid( SAgpsInfo[ gpsid[ playerid ] ][ SAgpsName ], gpsname, 0, strlen( gpsname ), 50 );
			SAGPS_Save( gpsid[ playerid ] );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
		}
	}
	
	else if( dialogid == dialog_IZMJENAIMENAGPSZG )
	{
		if( !response ) return true;
		if( response )
		{
			new gpsname[ 50 ];
			if( sscanf( inputtext, "s[50]", gpsname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSZG, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu gps lokaciju." );
			new filename[ 60 ];
			format( filename, sizeof( filename ), F_ZGGPS, gpsid[ playerid ] );
			if( !fexist( filename ) ) return GRESKA( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );
			strmid( ZGgpsInfo[ gpsid[ playerid ] ][ ZGgpsName ], gpsname, 0, strlen( gpsname ), 50 );
			ZGGPS_Save( gpsid[ playerid ] );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
		}
	}
	
	else if( dialogid == dialog_IZMJENAIMENAGPSOS )
	{
		if( !response ) return true;
		if( response )
		{
			new gpsname[ 50 ];
			if( sscanf( inputtext, "s[50]", gpsname ) ) return ShowPlayerDialog( playerid, dialog_IZMJENAIMENAGPSOS, DSI, D_NASLOV, "Unesite novo ime gps lokacije", D_ODABERI, D_ODUSTANI );
			if( gpsid[ playerid ] == -1 ) return GRESKA( playerid, "Nemas izabranu gps lokaciju." );
			new filename[ 60 ];
			format( filename, sizeof( filename ), F_OSGPS, gpsid[ playerid ] );
			if( !fexist( filename ) ) return GRESKA( playerid, "Izabrana GPS lokacija ne postoji u bazi podataka." );
			strmid( OSgpsInfo[ gpsid[ playerid ] ][ OSgpsName ], gpsname, 0, strlen( gpsname ), 50 );
			OSGPS_Save( gpsid[ playerid ] );
			SendInfoMessage( playerid, "Uspjesno si promenio ime GPS lokacije u '%s'.", gpsname );
			gpsid[ playerid ] = -1;
		}
	}
	
	
	else if( dialogid == dialog_GEDIT ) {
		if( !response ) return true;
		if( response ) {
			if( listitem ==  0 ) {
				ShowPlayerDialog( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu garaze!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 ) {
				ShowPlayerDialog( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  2 ) {
				new id = GetNearestGarage( playerid );
				if( GetNearestGarage( playerid ) == -1 ) return GRESKA( playerid, "Nema garaze u blizini!");

				new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "ADMIN TEAM %s je prodao garazu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				garageInfo[ id ][ garageOwned ] = false;
				strmid( garageInfo[ id ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
				Garage_Save( id );
				SendInfoMessage( playerid, "Garaza uspjesno prodana!" );
				Garage_Refresh( id );
			}
		}
	}
	else if( dialogid == dialog_GEPRICE && response ) {
		new cena, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return GRESKA( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwned ] == true ) return GRESKA( playerid, "Ne mozes da izmenis cijenu kupljene garaze." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_GEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu garaze!", D_ODABERI, D_ODUSTANI );
		garageInfo[ garaza ][ garagePrice ] = cena; Garage_Save( garaza ); Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste cijenu garaze. ID = %d | Cena = %d.", garaza, cena );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio cijenu garaze(ID:%d) u %d", ImeIgraca( playerid ), garaza, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_GELEVEL && response ) {
		new level, garaza = GetNearestGarage( playerid );
		if( GetNearestGarage( playerid ) == -1 ) return GRESKA( playerid, "Nema garaze u vasoj blizini!" );
		if( garageInfo[ garaza ][ garageOwned ] == true ) return GRESKA( playerid, "Ne mozes da izmenis level kupljene garaze." );
		if( sscanf( inputtext, "d", level ) ) return ShowPlayerDialog( playerid, dialog_GELEVEL, DSI, D_NASLOV, "Unesite zeljeni level garaze!", D_ODABERI, D_ODUSTANI );
		garageInfo[ garaza ][ garageLevel ] = level; Garage_Save( garaza ); Garage_Refresh( garaza );
		SendInfoMessage( playerid, "Promenili ste level garaze ID = %d | Level = %d.", garaza, level );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio level garaze(ID:%d) u %d", ImeIgraca( playerid ), garaza, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IMEDIT ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
			
				case 0: {
					ShowPlayerDialog( playerid, dialog_IMEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu imanja!", D_ODABERI, D_ODUSTANI );
				}
				case 1: {
					ShowPlayerDialog( playerid, dialog_IMELEVEL, DSI, D_NASLOV, "Unesite zeljeni level imanja!", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
					new id = GetNearestField( playerid );
					if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u blizini!");

					new string1[128], ifile[ 128 ];
					format( string1, sizeof( string1 ), "Admin %s je prodao imanje ID %d na buy", ImeIgraca( playerid ), id );
					LogSave( "Ostalo/LogEdit.log", string1 );

					new ownerid = GetPlayerIdFromName( fieldInfo[ id ][ fieldOwner ] );

					if( IsPlayerConnected( GetPlayerIdFromName( fieldInfo[ id ][ fieldOwner ] ) ) )
					{
						PlayerInfo[ownerid][xFieldID] = -1;
						SendInfoMessage(ownerid,"Vase imanje je prodano od strane administratora!");
					}

					format( ifile, sizeof( ifile ), I_FILE, fieldInfo[ id ][ fieldOwner ] ); 
					new INI:fieldownerf = INI_Open( ifile );
					INI_SetTag( fieldownerf, "Informacije" );
					INI_WriteInt( fieldownerf, "FieldID", -1);
					INI_Close( fieldownerf );

					fieldInfo[ id ][ fieldOwned ] = false;
					strmid( fieldInfo[ id ][ fieldOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
					Field_Save( id );
					SendInfoMessage( playerid, "Imanje uspjesno prodano!" );
					Field_Refresh( id );
				}
				case 3: {
					new fieldID = GetNearestField( playerid );
					if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u blizini!");
					
					if( fieldInfo[ fieldID ][ fieldTractorID ] != -1) return GRESKA( playerid, "Ovom imanju je vec dodan traktor!" );
					
					if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Morate biti u traktoru, stvorite komandom '/veh 531 1 1'. " );
					
					new vehicleID  = GetPlayerVehicleID( playerid );
					
					new Float:Pos[ 4 ];
					GetVehiclePos( vehicleID, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( vehicleID, Pos[ 3 ] );

					for( new i = 1; i < MAX_CARS; i++ ) {

						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), V_FILE, i);
						if( !fexist( fileauta ) ) {

			
							VehicleInfo[ i ][ vOwned ] = 0;
							VehicleInfo[ i ][ vNeaktivnost ] = 0;
							VehicleInfo[ i ][ vKilometri ] = 0;
							VehicleInfo[ i ][ vMetri ] = 0;
							VehicleInfo[ i ][ vPrice ] = 0;
							strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
							VehicleInfo[ i ][ vLocked ] = 1;
							VehicleInfo[ i ][ vLokacijaX ] = Pos[ 0 ];
							VehicleInfo[ i ][ vLokacijaY ] = Pos[ 1 ];
							VehicleInfo[ i ][ vLokacijaZ ] = Pos[ 2 ];
							VehicleInfo[ i ][ vLokacijaA ] = Pos[ 3 ];
							VehicleInfo[ i ][ vVirtualWorld ] = 0;
							VehicleInfo[ i ][ vInterior ] = 0;
							VehicleInfo[ i ][ vUsage ] = IMANJE_VOZILO;
							VehicleInfo[ i ][ vJob ] = -1;
							VehicleInfo[ i ][ vOrganization ] = -1;
							VehicleInfo[ i ][ vFuelProperty ] = fieldID;
							VehicleInfo[ i ][ vColor1 ] = 4;
							VehicleInfo[ i ][ vColor2 ] = 4;
							VehicleInfo[ i ][ vModel ] = 531;
							VehicleInfo[ i ][ vReg ] = 1;
							VehicleInfo[ i ][ vRegVreme ] = 0;
							VehicleInfo[ i ][ vTeh ] = 1;
							VehicleInfo[ i ][ vGPS ] = 0;
							VehicleInfo[ i ][ vOsiguranje ] = 5;
							VehicleInfo[ i ][ vLock ] = 5;
							VehicleInfo[ i ][ vAlarm ] = 4;
							VehicleInfo[ i ][ vTuned ] = 0;
							VehicleInfo[ i ][ vNeon ] = 0;
							VehicleInfo[ i ][ vImobilizator ] = 5;
							VehicleInfo[ i ][ vSpoiler ] = 0;
							VehicleInfo[ i ][ vHood ] = 0;
							VehicleInfo[ i ][ vRoof ] = 0;
							VehicleInfo[ i ][ vSkirt ] = 0;
							VehicleInfo[ i ][ vLamps ] = 0;
							VehicleInfo[ i ][ vNitro ] = 0;
							VehicleInfo[ i ][ vExhaust ] = 0;
							VehicleInfo[ i ][ vWheels ] = 0;
							VehicleInfo[ i ][ vStereo ] = 0;
							VehicleInfo[ i ][ vHydraulics ] = 0;
							VehicleInfo[ i ][ vFrontBumper ] = 0;
							VehicleInfo[ i ][ vRearBumper ] = 0;
							VehicleInfo[ i ][ vVents ] = 0;
							VehicleInfo[ i ][ vPaintJob ] = 255;
							VehicleInfo[ i ][ vProvera ] = i;
							VehicleInfo[ i ][ vMaterijali ] = 0;
							#if nerp_droga == 1
							VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
							VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
							#endif
							VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

							Dimi_DestroyVehicle( vehicleID );
							AdminVozilo[ playerid ] = -1;

							VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, IMANJE_VOZILO, -1, -1, VehicleInfo[ i ][ vFuelProperty ], VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
							SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], GetPlayerVirtualWorld( playerid ) );
							LinkVehicleToInterior( VehicleInfo[ i ][ vID ], GetPlayerInterior( playerid ) );

							if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
							else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
							else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
							else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;

							VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
							UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
							SaveVehicle( i );
							carspawntimer = 1;
							SetTimer("AntiSpawnCrash", 3000, 0);

							fieldInfo[ fieldID ][ fieldTractorID ] = i;
							Field_Save( fieldID );
							
							SendInfoMessage( playerid, "Uspjesno ste kreirali traktor za imanje ID: %d.", fieldID );

							break;
						}
					}
				}
				case 4: {
					new fieldID = GetNearestField( playerid );
					if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u blizini!");

					if( fieldInfo[ fieldID ][ fieldAdditionID ] != -1) return GRESKA( playerid, "Ovom imanju je vec dodan prikljucak za traktor!" );

					if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Morate biti u nekom vozilu, stvorite komandom '/veh 560 1 1'. " );

					new vehicleID  = GetPlayerVehicleID( playerid );

					new Float:Pos[ 4 ];
					GetVehiclePos( vehicleID, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( vehicleID, Pos[ 3 ] );

					for( new i = 1; i < MAX_CARS; i++ ) {

						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), V_FILE, i);
						if( !fexist( fileauta ) ) {


							VehicleInfo[ i ][ vOwned ] = 0;
							VehicleInfo[ i ][ vNeaktivnost ] = 0;
							VehicleInfo[ i ][ vKilometri ] = 0;
							VehicleInfo[ i ][ vMetri ] = 0;
							VehicleInfo[ i ][ vPrice ] = 0;
							strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
							VehicleInfo[ i ][ vLocked ] = 1;
							VehicleInfo[ i ][ vLokacijaX ] = Pos[ 0 ];
							VehicleInfo[ i ][ vLokacijaY ] = Pos[ 1 ];
							VehicleInfo[ i ][ vLokacijaZ ] = Pos[ 2 ];
							VehicleInfo[ i ][ vLokacijaA ] = Pos[ 3 ];
							VehicleInfo[ i ][ vVirtualWorld ] = 0;
							VehicleInfo[ i ][ vInterior ] = 0;
							VehicleInfo[ i ][ vUsage ] = IMANJE_VOZILO;
							VehicleInfo[ i ][ vJob ] = -1;
							VehicleInfo[ i ][ vOrganization ] = -1;
							VehicleInfo[ i ][ vFuelProperty ] = fieldID;
							VehicleInfo[ i ][ vColor1 ] = 4;
							VehicleInfo[ i ][ vColor2 ] = 4;
							VehicleInfo[ i ][ vModel ] = 610;
							VehicleInfo[ i ][ vReg ] = 1;
							VehicleInfo[ i ][ vRegVreme ] = 0;
							VehicleInfo[ i ][ vTeh ] = 1;
							VehicleInfo[ i ][ vGPS ] = 0;
							VehicleInfo[ i ][ vOsiguranje ] = 5;
							VehicleInfo[ i ][ vLock ] = 5;
							VehicleInfo[ i ][ vAlarm ] = 4;
							VehicleInfo[ i ][ vTuned ] = 0;
							VehicleInfo[ i ][ vNeon ] = 0;
							VehicleInfo[ i ][ vImobilizator ] = 5;
							VehicleInfo[ i ][ vSpoiler ] = 0;
							VehicleInfo[ i ][ vHood ] = 0;
							VehicleInfo[ i ][ vRoof ] = 0;
							VehicleInfo[ i ][ vSkirt ] = 0;
							VehicleInfo[ i ][ vLamps ] = 0;
							VehicleInfo[ i ][ vNitro ] = 0;
							VehicleInfo[ i ][ vExhaust ] = 0;
							VehicleInfo[ i ][ vWheels ] = 0;
							VehicleInfo[ i ][ vStereo ] = 0;
							VehicleInfo[ i ][ vHydraulics ] = 0;
							VehicleInfo[ i ][ vFrontBumper ] = 0;
							VehicleInfo[ i ][ vRearBumper ] = 0;
							VehicleInfo[ i ][ vVents ] = 0;
							VehicleInfo[ i ][ vPaintJob ] = 255;
							VehicleInfo[ i ][ vProvera ] = i;
							VehicleInfo[ i ][ vMaterijali ] = 0;
							#if nerp_droga == 1
							VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
							VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
							#endif
							VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

							Dimi_DestroyVehicle( vehicleID );
							AdminVozilo[ playerid ] = -1;

							VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, IMANJE_VOZILO, -1, -1, VehicleInfo[ i ][ vFuelProperty ], VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
							SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], GetPlayerVirtualWorld( playerid ) );
							LinkVehicleToInterior( VehicleInfo[ i ][ vID ], GetPlayerInterior( playerid ) );

							if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
							else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
							else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
							else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;

							VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
							UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
							SaveVehicle( i );
							carspawntimer = 1;
							SetTimer("AntiSpawnCrash", 3000, 0);

							fieldInfo[ fieldID ][ fieldAdditionID ] = i;
							Field_Save( fieldID );

							SendInfoMessage( playerid, "Uspjesno ste kreirali prikljucak za traktor za imanje ID: %d.", fieldID );

							break;
						}
					}
				}
				case 5: {
					new fieldID = GetNearestField( playerid );
					if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u blizini!");

					if( fieldInfo[ fieldID ][ fieldTruckID ] != -1) return GRESKA( playerid, "Ovom imanju je vec dodan kamion!" );

					if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Morate biti u kamionu, stvorite komandom '/veh 578 1 1'. " );

					new vehicleID  = GetPlayerVehicleID( playerid );

					new Float:Pos[ 4 ];
					GetVehiclePos( vehicleID, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( vehicleID, Pos[ 3 ] );

					for( new i = 1; i < MAX_CARS; i++ ) {

						new fileauta[ 40 ];
						format(fileauta, sizeof( fileauta ), V_FILE, i);
						if( !fexist( fileauta ) ) {


							VehicleInfo[ i ][ vOwned ] = 0;
							VehicleInfo[ i ][ vNeaktivnost ] = 0;
							VehicleInfo[ i ][ vKilometri ] = 0;
							VehicleInfo[ i ][ vMetri ] = 0;
							VehicleInfo[ i ][ vPrice ] = 0;
							strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
							VehicleInfo[ i ][ vLocked ] = 1;
							VehicleInfo[ i ][ vLokacijaX ] = Pos[ 0 ];
							VehicleInfo[ i ][ vLokacijaY ] = Pos[ 1 ];
							VehicleInfo[ i ][ vLokacijaZ ] = Pos[ 2 ];
							VehicleInfo[ i ][ vLokacijaA ] = Pos[ 3 ];
							VehicleInfo[ i ][ vVirtualWorld ] = 0;
							VehicleInfo[ i ][ vInterior ] = 0;
							VehicleInfo[ i ][ vUsage ] = IMANJE_VOZILO;
							VehicleInfo[ i ][ vJob ] = -1;
							VehicleInfo[ i ][ vOrganization ] = -1;
							VehicleInfo[ i ][ vFuelProperty ] = fieldID;
							VehicleInfo[ i ][ vColor1 ] = 4;
							VehicleInfo[ i ][ vColor2 ] = 4;
							VehicleInfo[ i ][ vModel ] = 578;
							VehicleInfo[ i ][ vReg ] = 1;
							VehicleInfo[ i ][ vRegVreme ] = 0;
							VehicleInfo[ i ][ vTeh ] = 1;
							VehicleInfo[ i ][ vGPS ] = 0;
							VehicleInfo[ i ][ vOsiguranje ] = 5;
							VehicleInfo[ i ][ vLock ] = 5;
							VehicleInfo[ i ][ vAlarm ] = 4;
							VehicleInfo[ i ][ vTuned ] = 0;
							VehicleInfo[ i ][ vNeon ] = 0;
							VehicleInfo[ i ][ vImobilizator ] = 5;
							VehicleInfo[ i ][ vSpoiler ] = 0;
							VehicleInfo[ i ][ vHood ] = 0;
							VehicleInfo[ i ][ vRoof ] = 0;
							VehicleInfo[ i ][ vSkirt ] = 0;
							VehicleInfo[ i ][ vLamps ] = 0;
							VehicleInfo[ i ][ vNitro ] = 0;
							VehicleInfo[ i ][ vExhaust ] = 0;
							VehicleInfo[ i ][ vWheels ] = 0;
							VehicleInfo[ i ][ vStereo ] = 0;
							VehicleInfo[ i ][ vHydraulics ] = 0;
							VehicleInfo[ i ][ vFrontBumper ] = 0;
							VehicleInfo[ i ][ vRearBumper ] = 0;
							VehicleInfo[ i ][ vVents ] = 0;
							VehicleInfo[ i ][ vPaintJob ] = 255;
							VehicleInfo[ i ][ vProvera ] = i;
							VehicleInfo[ i ][ vMaterijali ] = 0;
							#if nerp_droga == 1
							VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
							VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
							#endif
							VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;

							Dimi_DestroyVehicle( vehicleID );
							AdminVozilo[ playerid ] = -1;

							VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, IMANJE_VOZILO, -1, -1, VehicleInfo[ i ][ vFuelProperty ], VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
							SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], GetPlayerVirtualWorld( playerid ) );
							LinkVehicleToInterior( VehicleInfo[ i ][ vID ], GetPlayerInterior( playerid ) );

							if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
							else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
							else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
							else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;

							VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
							UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
							SaveVehicle( i );
							carspawntimer = 1;
							SetTimer("AntiSpawnCrash", 3000, 0);

							fieldInfo[ fieldID ][ fieldTruckID ] = i;
							Field_Save( fieldID );

							SendInfoMessage( playerid, "Uspjesno ste kreirali kamion za imanje ID: %d.", fieldID );

							break;
						}
					}
				}
			}
		}
	}
	else if( dialogid == dialog_IMEPRICE && response ) {
		new cena, imanje = GetNearestField( playerid );
		if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u vasoj blizini!" );
		if( fieldInfo[ imanje ][ fieldOwned ] == true ) return GRESKA( playerid, "Ne mozes da izmenis cijenu kupljenog imanja." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_IMEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu imanja!", D_ODABERI, D_ODUSTANI );
		fieldInfo[ imanje ][ fieldPrice ] = cena; Field_Save( imanje ); Field_Refresh( imanje );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenu imanja. ID = %d | Cena = %d.", imanje, cena );

		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio cijenu imanja(ID:%d) u %d", ImeIgraca( playerid ), imanje, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IMELEVEL && response ) {
		new level, imanje = GetNearestField( playerid );
		if( GetNearestField( playerid ) == -1 ) return GRESKA( playerid, "Nema imanja u vasoj blizini!" );
		if( fieldInfo[ imanje ][ fieldOwned ] == true ) return GRESKA( playerid, "Ne mozes da izmenis level kupljenog imanja." );
		if( sscanf( inputtext, "d", level ) ) return ShowPlayerDialog( playerid, dialog_IMELEVEL, DSI, D_NASLOV, "Unesite zeljeni level imanja!", D_ODABERI, D_ODUSTANI );
		fieldInfo[ imanje ][ fieldLevel ] = level; Field_Save( imanje ); Field_Refresh( imanje );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste level imanja ID = %d | Level = %d.", imanje, level );
		new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promenio level imanja(ID:%d) u %d", ImeIgraca( playerid ), imanje, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HEDIT ) {
		if( !response ) return true;
		if( response ) {
			if( listitem ==  0 ) {
				ShowPlayerDialog( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu hotela!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 ) {
				ShowPlayerDialog( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  2 ) {
				new id = GetNearestHotel( playerid );
				if( GetNearestHotel( playerid ) == -1 ) return GRESKA( playerid, "Nema hotela u blizini!");

				new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Admin %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogEdit.log", string1 );

				hotelInfo[ id ][ hOwned ] = 0;
				strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
				hotelInfo[ id ][ hLocked ] = 0;
				SaveHotel( id );
				SendInfoMessage( playerid, "Hotel uspjesno prodaa!" );
				HotelRefresh( id );
			}
		}
	}
	else if( dialogid == dialog_HEPRICE && response ) {
		new cena, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return GRESKA( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwned ] == 1 ) return GRESKA( playerid, "Ne mozes da izmenis cijenu kupljenog hotela." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_HEPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu hotela!", D_ODABERI, D_ODUSTANI );
		hotelInfo[ hotel ][ hPrice ] = cena; SaveHotel( hotel ); HotelRefresh( hotel );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenu hotel. ID = %d | Cena = %d.", hotel, cena );
		new string[ 128 ];
		format( string, sizeof( string ), "Admin %s je promenio cijenu hotela(ID:%d) u %d", ImeIgraca( playerid ), hotel, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_HELEVEL && response ) {
		new level, hotel = GetNearestHotel( playerid );
		if( GetNearestHotel( playerid ) == -1 ) return GRESKA( playerid, "Nema hotela u vasoj blizini!" );
		if( hotelInfo[ hotel ][ hOwned ] == 1 ) return GRESKA( playerid, "Ne mozes da izmenis level kupljenog hotela." );
		if( sscanf( inputtext, "d", level ) ) return ShowPlayerDialog( playerid, dialog_HELEVEL, DSI, D_NASLOV, "Unesite zeljeni level hotela!", D_ODABERI, D_ODUSTANI );
		hotelInfo[ hotel ][ hLevel ] = level; SaveHotel( hotel ); HotelRefresh( hotel );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste level hotela ID = %d | Level = %d.", hotel, level );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio level hotela(ID:%d) u %d", ImeIgraca( playerid ), hotel, level );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IEDIT ) {
		if( !response ) return true;
		if( response ) {
			if( listitem ==  0 ) {
				ShowPlayerDialog( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu imovine!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  1 ) {
				ShowPlayerDialog( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
			if( listitem ==  2 ) {
				ShowPlayerDialog( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
			if( listitem ==  3 ) {
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1339 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				ShowPlayerDialog( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_ICPRICE && response ) {
		new cena, imovina = GetNearestProperty( playerid );
		if( GetNearestProperty( playerid ) == -1 ) return GRESKA( playerid, "Nema imovine u vasoj blizini!" );
		if( II[ imovina ][ iOwned ] == 1 ) return GRESKA( playerid, "Ne mozes da izmenis cijenu kupljene kuce." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_ICPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu imovine!", D_ODABERI, D_ODUSTANI );
		II[ imovina ][ iPrice ] = cena; SaveProperty( imovina );
		SendClientMessageEx( playerid, ZUTA, "Promenili ste cijenu imovine. ID = %d | Cena = %d.", imovina, cena );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je promenio cijenu imovine(ID:%d) u %d", ImeIgraca( playerid ), imovina, cena );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_IOPEN && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_IOPEN, DSI, D_NASLOV, "Unesite id imovine koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta imovina ne postoji." );
		II[ id ][ iLocked ] = 0; announcement( playerid, "Imovina ~g~otkljucana!", 3000, 3 );
		SaveProperty( id ) ;
		SendInfoMessage( playerid, "Otkljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ICLOSE && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ICLOSE, DSI, D_NASLOV, "Unesite id imovine koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta imovina ne postoji." );
		II[ id ][ iLocked ] = 1; announcement( playerid, "Imovina ~r~zakljucana!", 3000, 3 );
		SaveProperty( id ) ;
		SendInfoMessage( playerid, "Zakljucali ste imovinu(ID: %d )!", id );
	}
	else if( dialogid == dialog_ISELL && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ISELL, DSI, D_NASLOV, "Unesti id imovine koju zelite prodati", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta imovina ne postoji." );
		II[ id ][ iOwned ] = 0;
		II[ id ][ iNeaktivnost ] = 0;
		strmid( II[ id ][ iOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
		SaveProperty( id ); PropertyRefresh( id );
		SendInfoMessage( playerid, "Prodali ste imovinu(ID: %d )!", id );
		new string[ 128 ]; 
		format( string, sizeof( string ), "Admin %s je prodao imovinu(ID:%d)", ImeIgraca( playerid ), id );
		LogSave( "Ostalo/LogEdit.log", string );
	}
	else if( dialogid == dialog_VEDIT )
	{
		if( !response ) return true;
		if( response )
		{
			if( listitem ==  0 )
			{
				ShowPlayerDialog( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu vozila!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem == 1 )
			{
				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
				if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

				new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ], Float:Pos[ 4 ];

				GetVehiclePos( VehicleInfo[ autoid ][ vID ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
				GetVehicleZAngle( VehicleInfo[ autoid ][ vID ], Pos[ 3 ] );

				VehicleInfo[ autoid ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
				VehicleInfo[ autoid ][ vInterior ] = GetPlayerInterior( playerid );

				VehicleInfo[ autoid ][ vLokacijaX ] = Pos[ 0 ];
				VehicleInfo[ autoid ][ vLokacijaY ] = Pos[ 1 ];
				VehicleInfo[ autoid ][ vLokacijaZ ] = Pos[ 2 ];
				VehicleInfo[ autoid ][ vLokacijaA ] = Pos[ 3 ];
				Delete3DTextLabel( VehicleInfo[ autoid ][ v3DText ] );
				VehicleInfo[ autoid ][ Validv3DText ] = false;
				
				DestroyVehicle( VehicleInfo[ autoid ][ vID ] );
				VehicleInfo[ autoid ][ vID ] = Dimi_CreateVehicle( autoid, VehicleInfo[ autoid ][ vUsage ], VehicleInfo[ autoid ][ vOrganization ], VehicleInfo[ autoid ][ vJob ], VehicleInfo[ autoid ][ vFuelProperty ], VehicleInfo[ autoid ][ vModel ], VehicleInfo[ autoid ][ vLokacijaX ], VehicleInfo[ autoid ][ vLokacijaY ], VehicleInfo[ autoid ][ vLokacijaZ ]+1.0, VehicleInfo[ autoid ][ vLokacijaA ], VehicleInfo[ autoid ][ vColor1 ], VehicleInfo[ autoid ][ vColor2 ], 300000 );
				LinkVehicleToInterior( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vInterior ] );
				SetVehicleVirtualWorld( VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vVirtualWorld ] );

				TuneVehicle( autoid );

				SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 0, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
				if( IsVehicleBajs( VehicleInfo[ autoid ][ vID ] ) )
				{
					SetVehicleParamsEx( VehicleInfo[ autoid ][ vID ], 1, 0, 0, VehicleInfo[ autoid ][ vLocked ], 0, 0, 0 );
				}

				SaveVehicle( autoid );
				SetVehicleLabels( autoid );
				SendInfoMessage( playerid, "Preparkirali ste vozilo. ID = %d.", autoid );

			}
			if( listitem == 2 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1339 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
				if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );

				new izbor = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];

				new Float:vehx, Float:vehy, Float:vehz, Float:veha;
				new novacena = VehPrice[ VehicleInfo[ izbor ][ vModel ] - 400 ][ 1 ];//prava cijena kolko kosta u salonu
				new polovnacena = novacena/2; //pola od prave
				new polovnacena2 = novacena/4;
				new zadnjacena = polovnacena+polovnacena2;
				GetVehiclePos(izbor, vehx, vehy, vehz);
				GetVehicleZAngle(izbor, veha);

				strmid( VehicleInfo[ izbor ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );

				SendInfoMessage( playerid, "Prodali ste vozilo. ID = %d.", izbor );

				SavePlayer( playerid );
				Delete3DTextLabel( VehicleInfo[ izbor ][ v3DText ] );
				VehicleInfo[ izbor ][ Validv3DText ] = false;
				Dimi_DestroyVehicle( VehicleInfo[ izbor ][ vID ] );

				VehicleInfo[ izbor ][ vVirtualWorld ] = 0;
				VehicleInfo[ izbor ][ vInterior ] = 0;
				
				VehicleInfo[ izbor ][ vReg ] = 0;
				VehicleInfo[ izbor ][ vTeh ] = 0;
				VehicleInfo[ izbor ][ vRegVreme ] = 0;

				VehicleInfo[ izbor ][ vOwned ] = 0;
				VehicleInfo[ izbor ][ vNeaktivnost ] = 0;
				VehicleInfo[ izbor ][ vLocked ] = 0;
				VehicleInfo[ izbor ][ vPrice ] = zadnjacena;

				VehicleInfo[ izbor ][ vLokacijaX ] = vehx;
				VehicleInfo[ izbor ][ vLokacijaY ] = vehy;
				VehicleInfo[ izbor ][ vLokacijaZ ] = vehz;
				VehicleInfo[ izbor ][ vLokacijaA ] = veha;
				VehicleInfo[ izbor ][ vUsage ] = NAPRODAJU_VOZILO;

				VehicleInfo[ izbor ][ vID ] = Dimi_CreateVehicle( izbor, NAPRODAJU_VOZILO, -1, -1, -1, VehicleInfo[ izbor ][ vModel ], VehicleInfo[ izbor ][ vLokacijaX ], VehicleInfo[ izbor ][ vLokacijaY ], VehicleInfo[ izbor ][ vLokacijaZ ]+1.0, VehicleInfo[ izbor ][ vLokacijaA ], VehicleInfo[ izbor ][ vColor1 ], VehicleInfo[ izbor ][ vColor2 ], 300000 );
				LinkVehicleToInterior( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vInterior ] );
				SetVehicleVirtualWorld( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vVirtualWorld ] );
				SetVehicleLabels( izbor );
				SetTablice( izbor );
				TuneVehicle( izbor );

				SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 0, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
				if( IsVehicleBajs( VehicleInfo[ izbor ][ vID ] ) )
				{
					SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 1, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
				}

				SaveVehicle( izbor );

			}
			if( listitem == 3 )
			{
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");

				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
				if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

				ShowPlayerDialog( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_VCOLOR && response ) {
		new boja1, boja2;

		if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
		if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side vozilu." );

		if( sscanf( inputtext, "dd", boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VCOLOR, DSI, D_NASLOV, "Unesite zeljeni ide boje1 i id boje 1. Primer: 2 2!", D_ODABERI, D_ODUSTANI );

		new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];


		VehicleInfo[ autoid ][ vColor1 ] = boja1; VehicleInfo[ autoid ][ vColor2 ] = boja2;
		SaveVehicle( autoid );

		ChangeVehicleColor( VehicleInfo[ autoid ][ vID ], boja1, boja2 );

		SendInfoMessage( playerid, "Prebojali ste vozilo. ID = %d. u boje %d %d", autoid, boja1, boja2 );
	}
	else if( dialogid == dialog_VPRICE && response )
	{
		new cena;

		if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Niste u vozilu!" );
		if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] == -1 ) return GRESKA( playerid, "Da bi koristili ovu komandu morate biti u server side privatnom vozilu." );
		if( sscanf( inputtext, "d", cena ) ) return ShowPlayerDialog( playerid, dialog_VPRICE, DSI, D_NASLOV, "Unesite zeljenu cijenu vozila!", D_ODABERI, D_ODUSTANI );

		new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
		Delete3DTextLabel( VehicleInfo[ autoid ][ v3DText ] );
		VehicleInfo[ autoid ][ Validv3DText ] = false;
		
		VehicleInfo[ autoid ][ vPrice ] = cena;
		SaveVehicle( autoid );
		SetVehicleLabels( autoid );
		SendInfoMessage( playerid, "Promenili ste cijenu vozila. ID = %d | Cena = %d.", autoid, cena );
	}
	else if( dialogid == dialog_FEDIT ) {
		if( !response ) return true;
		if( response ) {
			if( listitem ==  0 ) {
				ShowPlayerDialog( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI ); }
			if( listitem ==  1 ) {
				ShowPlayerDialog( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI ); }
			if( listitem ==  2 ) {
				ShowPlayerDialog( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI ); }
			if( listitem ==  3 ) {
				//if( PlayerInfo[ playerid ][ xAdmin ] < 1338 ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju.");
				ShowPlayerDialog( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  4 ) {
			
				ShowPlayerDialog( playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI );
			}
			if( listitem ==  5 ) {
			
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n" );
				strcat( DialogStrgEx, "Vrste: 1. 24/7 2. Firma bez ulaza 3. Burg 4. Cluckin Bell 5. Binco 6. Zip 7. Victim 8. Suburban\n" );
				strcat( DialogStrgEx, "9. Gun Shop 10. Gym 11. Bar 12. Restoran 13. Pizza 14. Nocni klub\n" );
				strcat( DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa\n" );
				strcat( DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n" );
				strcat( DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. 32. Market Roda" );
				
				ShowPlayerDialog( playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
	}
	else if( dialogid == dialog_FEDITTYPE && response ) {
	
		new id, vrsta, ImaFajl[ 40 ];
		if(sscanf( inputtext, "ii", id, vrsta ) ) {
			
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			strcat( DialogStrgEx, ""col_white"Unesite id firme i broj vrste firme koju zelite.\n" );
			strcat( DialogStrgEx, "Vrste: 1. 24/7 2. Firma bez ulaza 3. Burg 4. Cluckin Bell 5. Binco 6. Zip 7. Victim 8. Suburban\n" );
			strcat( DialogStrgEx, "9. Gun Shop 10. Gym 11. Bar 12. Restoran 13. Pizza 14. Nocni klub\n" );
			strcat( DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa\n" );
			strcat( DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n" );
			strcat( DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. 32. Market Roda" );

			ShowPlayerDialog( playerid, dialog_FEDITTYPE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			
			return true;
		}
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );
		
		BussinesInfo[ id ][ bType ] = vrsta;
		
		SaveBussines( id ) ; Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promenili vrstu firme(ID: %d )!", id );
	
	}
	else if( dialogid == dialog_FCORDEXIT && response ) {
		new id, Float:x, Float:y, Float:z, interior, vw, ImaFajl[ 40 ];
		if(sscanf( inputtext, "ifffii", id, x, y, z, interior, vw ) ) return ShowPlayerDialog( playerid, dialog_FCORDEXIT, DSI, D_NASLOV, "Unesite id firme, kordinate x,y,z, int i vw\nPrimer: 2, 1323.2, 625.2, -2314, 0 1!", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );

		BussinesInfo[ id ][ bInInt ] = interior;
		BussinesInfo[ id ][ bExitX ] = x;
		BussinesInfo[ id ][ bExitY ] = y;
		BussinesInfo[ id ][ bExitZ ] = z;
		BussinesInfo[ id ][ bInVW ] = vw;
		
		SaveBussines( id ) ; Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste promenili izlazne kordinate firme(ID: %d )!", id );
	}
	else if( dialogid == dialog_FNAME && response ) {
		new id, ime[ 64 ], ImaFajl[ 40 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return ShowPlayerDialog( playerid, dialog_FNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime firme!", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );
		strmid( BussinesInfo[ id ][ bName ], ime, 0, strlen( ime ), 128);
		SaveBussines( id ) ; Bussines_Refresh( id );
		SendInfoMessage( playerid, "Promenili ste ime firme(ID: %d ) u %s!", id, ime );
	}
	else if( dialogid == dialog_FOPEN && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FOPEN, DSI, D_NASLOV, "Unesite id firme koju zelite otkljucati.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bLocked ] = 0; announcement( playerid, "Firma ~g~otkljucana!", 3000, 3 );
		SaveBussines( id ) ;
		SendInfoMessage( playerid, "Otkljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FCLOSE && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FCLOSE, DSI, D_NASLOV, "Unesite id firme koju zelite zakljucati.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bLocked ] = 1; announcement( playerid, "Firma ~r~zakljucana!", 3000, 3 );
		SaveBussines( id ) ;
		SendInfoMessage( playerid, "Zakljucali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_FSELL && response ) {
		new id, ImaFajl[ 40 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FSELL, DSI, D_NASLOV, "Unesti id firme koju zelite prodati", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );
		BussinesInfo[ id ][ bOwned ] = 0;
		strmid( BussinesInfo[ id ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
		SaveBussines( id ); 
		BussinesInfo[ id ][ bNeaktivnost ] = 0;
		BussinesInfo[ id ][ bFacture ] = 100;
		Bussines_Refresh( id );
		SendInfoMessage( playerid, "Prodali ste firmu(ID: %d )!", id );
	}
	else if( dialogid == dialog_VCREATE )
	{
		if( response )
		{
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_VCREATE, DSI, D_NASLOV, "Unesite id zeljenog vozila, id boje1, id boje2!", D_ODABERI, D_NAZAD );
			//if( VehPrice[ idauta-400 ][ 1 ] == 0 ) return GRESKA( playerid, "Vozilo sa tim IDem se ne moze kreirati zbog nedefinisane cijene." );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ )
			{
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) )
				{
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					if( VehPrice[ idauta-400 ][ 1 ] == 0 )
					{
						scminfo(playerid, "Ovo vozilo nema definisanu cenu, stoga cemu cena biti postavljena na 1$. [/server]");
						VehicleInfo[ i ][ vPrice ] = 1;
					}
					else 
					{
						VehicleInfo[ i ][ vPrice ] = VehPrice[ idauta- 400 ][ 1 ];
					}
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vUsage ] = NAPRODAJU_VOZILO;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vJob ] = 1;
					VehicleInfo[ i ][ vOrganization ] = 1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 0;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 0;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 0;
					VehicleInfo[ i ][ vAlarm ] = 0;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 0;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, NAPRODAJU_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali vozilo na prodaju: ID Auta: %d, Cena: %d",idauta, VehPrice[ idauta- 400 ][ 1 ] );
					carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
					SetVehicleLabels( VehicleInfo[ i ][ vID ] );
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) )
					{
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_PCREATE  )
	{
		if( response )
		{
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, posao, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iiii", idauta, posao, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7.Bus vozac\n8.Mehanicar 9.Farmer 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 15. Masinovodja", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_PCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id posla, id boje1, id boje2.\nID posla: 1. Kosac Trave 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7.Bus vozac\n8.Mehanicar 9.Farmer 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 15. Masinovodja", D_ODABERI, D_NAZAD );
			if( posao < 1 || posao > MAX_JOBS ) return GRESKA( playerid, "Pogresan id posla!" );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ )
			{
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) )
				{
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = POSLOVNO_VOZILO;
					VehicleInfo[ i ][ vJob ] = posao;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, POSLOVNO_VOZILO, -1, posao, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali poslovno vozilo: ID Auta: %d, PosaoID: %d",idauta,posao );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) )
					{
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					
					#if NERP_ZIMSKI_MOD  == 1
					if( posao == POSAO_KOMUNALAC && idauta == 455 )
					{
					
						SnowObjects[ VehicleInfo[ i ][ vID ] ] = true;

						SnowObject1[ VehicleInfo[ i ][ vID ] ] = CreateDynamicObject( 19601, 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( SnowObject1[ VehicleInfo[ i ][ vID ] ], VehicleInfo[ i ][ vID ], 0.000000, 4.200001, -1.049999, 13.500000, 0.000000, 180.000 );
						
						SnowObject2[ VehicleInfo[ i ][ vID ] ] = CreateDynamicObject( 18646, 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( SnowObject2[ VehicleInfo[ i ][ vID ] ], VehicleInfo[ i ][ vID ], 0.749999, 1.575000, 1.725000, 0.000000, 0.000000, 0.000000 );
					
					}
					#endif
					
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_GRCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_GRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za gradonacelnikovo vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = GRADONACELNIKOVO_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, GRADONACELNIKOVO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali gradonacelnikovo vozilo: ID Auta: %d.",idauta );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_IVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_IVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za izlozbeno vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = IZLOZBENO_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1 
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, IZLOZBENO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali izlozbeno vozilo: ID Auta: %d.",idauta );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		} 
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_VVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1) {
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = VIP_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, VIP_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali vip vozilo: ID Auta: %d.",idauta );
					SetVehicleLabels( i );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_POLVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1) {
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_VVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za vip vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = POLAGANJE_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, POLAGANJE_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali polaganje vozilo: ID Auta: %d.",idauta );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_PRCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1) {
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_PRCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za promotersko vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = PROMOTER_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1 
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, PROMOTER_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali promotersko vozilo: ID Auta: %d.",idauta );
					SetVehicleLabels( i );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_AVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1) {
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_AVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za Admin vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = ADMIN_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, ADMIN_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali Admin vozilo: ID Auta: %d.",idauta );
					SetVehicleLabels( i );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_HVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1) {
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GM vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_HVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za GM vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = HELPER_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif 
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, HELPER_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali GM vozilo: ID Auta: %d.",idauta );
					SetVehicleLabels( i );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_OVCREATE  ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, orga, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iiii", idauta, orga, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_OVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta, id organizacije, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( orga < 1 ) return GRESKA( playerid, "Pogresan id organizacije(1+)!" );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			new ImaFajl[ 40 ];
			format( ImaFajl, sizeof( ImaFajl ), O_FILE, orga );
			if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = ORGANIZACIJSKO_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = orga;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, ORGANIZACIJSKO_VOZILO, orga, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali organizacijsko vozilo: ID Auta: %d, OrgID: %d",idauta,orga );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_RVCREATE ) {
		if( response ) {
			if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kreirati vozilo, limit vozila na serveru je dosegnut.");
			new idauta, Float:PozX, Float:PozY, Float:PozZ, Float:PozA, boja1, boja2;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			GetPlayerFacingAngle( playerid, PozA );
			if(carspawntimer == 1)
			{
				SendClientMessagee( playerid, CRVENA, "Pokusajte za 3 sekunde. (Anticrash)");
				return 1;
			}
			if( sscanf( inputtext, "iii", idauta, boja1, boja2 ) ) return ShowPlayerDialog( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( idauta < 400 || idauta > 611 ) return ShowPlayerDialog( playerid, dialog_RVCREATE, DSI, D_NASLOV, "Unesite id zeljenog auta za rent vozilo, id boje1, id boje2.", D_ODABERI, D_NAZAD );
			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");
			for( new i = 1; i < MAX_CARS; i++ ) {
				new fileauta[ 40 ];
				format(fileauta, sizeof( fileauta ), V_FILE, i);
				if( !fexist( fileauta ) ) {
					VehicleInfo[ i ][ vOwned ] = 0;
					VehicleInfo[ i ][ vNeaktivnost ] = 0;
					VehicleInfo[ i ][ vKilometri ] = 0;
					VehicleInfo[ i ][ vMetri ] = 0;
					VehicleInfo[ i ][ vPrice ] = 0;
					strmid( VehicleInfo[ i ][ vOwner ], "Drzava", 0, strlen("Drzava"), 32);
					VehicleInfo[ i ][ vLocked ] = 0;
					VehicleInfo[ i ][ vLokacijaX ] = PozX;
					VehicleInfo[ i ][ vLokacijaY ] = PozY;
					VehicleInfo[ i ][ vLokacijaZ ] = PozZ;
					VehicleInfo[ i ][ vLokacijaA ] = PozA;
					VehicleInfo[ i ][ vVirtualWorld ] = 0;
					VehicleInfo[ i ][ vInterior ] = 0;
					VehicleInfo[ i ][ vUsage ] = RENTANO_VOZILO;
					VehicleInfo[ i ][ vJob ] = -1;
					VehicleInfo[ i ][ vOrganization ] = -1;
					VehicleInfo[ i ][ vFuelProperty ] = -1;
					VehicleInfo[ i ][ vColor1 ] = boja1;
					VehicleInfo[ i ][ vColor2 ] = boja2;
					VehicleInfo[ i ][ vModel ] = idauta;
					VehicleInfo[ i ][ vReg ] = 1;
					VehicleInfo[ i ][ vRegVreme ] = 0;
					VehicleInfo[ i ][ vTeh ] = 1;
					VehicleInfo[ i ][ vGPS ] = 0;
					VehicleInfo[ i ][ vOsiguranje ] = 5;
					VehicleInfo[ i ][ vLock ] = 5;
					VehicleInfo[ i ][ vAlarm ] = 4;
					VehicleInfo[ i ][ vTuned ] = 0;
					VehicleInfo[ i ][ vNeon ] = 0;
					VehicleInfo[ i ][ vImobilizator ] = 5;
					VehicleInfo[ i ][ vSpoiler ] = 0;
					VehicleInfo[ i ][ vHood ] = 0;
					VehicleInfo[ i ][ vRoof ] = 0;
					VehicleInfo[ i ][ vSkirt ] = 0;
					VehicleInfo[ i ][ vLamps ] = 0;
					VehicleInfo[ i ][ vNitro ] = 0;
					VehicleInfo[ i ][ vExhaust ] = 0;
					VehicleInfo[ i ][ vWheels ] = 0;
					VehicleInfo[ i ][ vStereo ] = 0;
					VehicleInfo[ i ][ vHydraulics ] = 0;
					VehicleInfo[ i ][ vFrontBumper ] = 0;
					VehicleInfo[ i ][ vRearBumper ] = 0;
					VehicleInfo[ i ][ vVents ] = 0;
					VehicleInfo[ i ][ vPaintJob ] = 255;
					VehicleInfo[ i ][ vProvera ] = i;
					VehicleInfo[ i ][ vMaterijali ] = 0;
					#if nerp_droga == 1
					VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
					VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
					#endif
					VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
					VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
					VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
					VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, RENTANO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
					VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); 
					UnLockCar( VehicleInfo[ i ][ vID ] ); ResetVehicleStatistics( VehicleInfo[ i ][ vID ] ); SetTablice( VehicleInfo[ i ][ vID ] );
					SaveVehicle( i ); SendInfoMessage( playerid, "Uspjesno ste kreirali rent vozilo: ID Auta: %d",idauta );
					SetVehicleLabels( i );
					carspawntimer = 1;
					SetTimer("AntiSpawnCrash", 3000, 0);
					SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
					}

					if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
					else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
					else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
					else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_ORGEDIT ) {
		if( listitem ==  0 ) {
			ShowPlayerDialog( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  1 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  2 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGRANKS, DSL, D_NASLOV, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  3 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  4 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  5 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LShowPlayerDialog", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  6 ) {
			ShowPlayerDialog( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  7 ) {
			ShowPlayerDialog( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI ); }
		if( listitem ==  8 ) {
			ShowPlayerDialog( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 9 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 10 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 11 ) {
			new orgid = GetNearestOrganization( playerid );
			if( orgid == -1 ) 
				return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			Orge3D(orgid);
			SendInfoMessage(playerid, "Ova organizacija je uspesno osvezena!");
			
		}
		if( listitem == 12 ) {
			if( inOrgInt[ playerid ] == -1 ) return GRESKA( playerid, "Morate biti u interijeru organizacije organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];
			
			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			OI[ id ][ oSafePos ][ 0 ] = Pos[ 0 ];
			OI[ id ][ oSafePos ][ 1 ] = Pos[ 1 ];
			OI[ id ][ oSafePos ][ 2 ] = Pos[ 2 ];

			if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
				DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

			if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
				DestroyDynamicPickup( OrgSafePickup[ id ] );

			new string[ 128 ];
			format( string, sizeof( string ), ""col_balkanstory"|| %s ||\n"col_white"Da otvorite sef\n"col_balkanstory"/orgsef", OI[ id ][ oName ] );
			OrgSafe3d[ id ] = CreateDynamic3DTextLabel( string, -1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0);
			OrgSafePickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oSafePos ][ 0 ], OI[ id ][ oSafePos ][ 1 ], OI[ id ][ oSafePos ][ 2 ], OI[ id ][ oVw ], OI[ id ][ oInt ], -1, 20.0 );

			SaveOrganization( id );
			SendInfoMessage( playerid, "Napravili ste sef za orgu %s.", OI[ id ][ oName ] );
			Orge3D(id);
		}
		if( listitem == 13 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			ShowPlayerDialog( playerid, dialog_ORGCOLOR, DSI, D_NASLOV, "Unesite boju za organizaciju(Vezano za zone ). Primer: FF00FF", D_ODABERI, D_ODUSTANI );
		}
		if( listitem == 14 ) {
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			
			new id = GetNearestOrganization( playerid );
			
			if( !OI[ id ][ oSuspended ] ) {
			
				OI[ id ][ oSuspended ] = true;
				SendInfoMessage( playerid, "Zakljucao si organizaciju %s. ", OI[ id ][ oName ] );
			}
			else if( OI[ id ][ oSuspended ] ) {

				OI[ id ][ oSuspended ] = false;
				SendInfoMessage( playerid, "Otkljucao si organizaciju %s. ", OI[ id ][ oName ] );
			}
			
			SaveOrganization( id );
		}
		if(listitem == 15)
		{
			#if nerp_droga == 1
			if( GetNearestOrganization( playerid ) == -1 ) return GRESKA( playerid, "Morate biti na pickupu organizacije." );
			new id = GetNearestOrganization( playerid );
			
			if( OI[ id ][ oTip ] == ORG_TIP_MAFIJA ) {
				ShowPlayerDialog( playerid, dialog_ORGDRUGCHOSE, DSL, "Izaberi org vrstu droge", "Kokain\nPlavi Methamphetamine", D_ODABERI, D_ODUSTANI );
			}
			else if( OI[ id ][ oTip ] == ORG_TIP_BANDA || OI[ id ][ oTip ] == ORG_TIP_SR || OI[ id ][ oTip ] == ORG_TIP_MC ) {
				ShowPlayerDialog( playerid, dialog_ORGDRUGCHOSE_2, DSL, "Izaberi org vrstu droge", "Marihuana\nMethamphetamine", D_ODABERI, D_ODUSTANI );
			}
			else GRESKA( playerid, "Ova opcija moze da se koristi samo za bande, bajkere, racere i mafije." );
			#endif
		}
		if( listitem == 16 ) // org drug factory 
		{
			if( inOrgInt[ playerid ] == -1 ) return GRESKA( playerid, "Morate biti u interijeru organizacije organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			OI[ id ][ oDrugFactoryPos ][ 0 ] = Pos[ 0 ];
			OI[ id ][ oDrugFactoryPos ][ 1 ] = Pos[ 1 ];
			OI[ id ][ oDrugFactoryPos ][ 2 ] = Pos[ 2 ];

			Orge3D(id);
			SaveOrganization( id );
			SendInfoMessage( playerid, "Napravili ste drug factory za orgu %s.", OI[ id ][ oName ] );
		}
		if( listitem == 17 ) // org garage 
		{
			if( inOrgInt[ playerid ] == -1 ) return GRESKA( playerid, "Morate biti u interijeru organizacije organizacije." );
			new id = inOrgInt[ playerid ], Float:Pos[ 3 ];

			GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			OI[ id ][ oGaragePos ][ 0 ] = Pos[ 0 ];
			OI[ id ][ oGaragePos ][ 1 ] = Pos[ 1 ];
			OI[ id ][ oGaragePos ][ 2 ] = Pos[ 2 ];

			Orge3D(id);
			SaveOrganization( id );
			SendInfoMessage( playerid, "Napravili ste garazu za orgu %s.", OI[ id ][ oName ] );
		}
	}
	else if( dialogid == dialog_ORGRANKS ) {
		if(listitem ==  0) {
			ShowPlayerDialog( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
		if(listitem ==  1) {
			ShowPlayerDialog( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
		if(listitem ==  2) {
			ShowPlayerDialog( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
		if(listitem ==  3) {
			ShowPlayerDialog( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
		if(listitem ==  4) {
			ShowPlayerDialog( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
		if(listitem ==  5) {
			ShowPlayerDialog( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGNAME && response ) {
		new id, ime[ ORG_IME ], ImaFajl[ 40 ];
		if(sscanf( inputtext, "is[64]", id, ime ) ) return ShowPlayerDialog( playerid, dialog_ORGNAME, DSI, D_NASLOV, "Unesite id i zeljeno ime vase organizacije!", D_ODABERI, D_ODUSTANI);
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oName ], ime, 0, strlen( ime ), ORG_IME);
			SaveOrganization( id ); Orge3D( id );
			SendInfoMessage( playerid, "Promenili ste ime organizacije(ID: %d ) u %s!", id, ime ); }
	}
	else if( dialogid == dialog_ORGDUTYP && response ) {
		new id, ImaFajl[ 40 ], Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGDUTYP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite duty point.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oTip ] != ORG_TIP_PD ) return GRESKA( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
		OI[ id ][ oDutyPoint ][ 0 ] = Pos[ 0 ];
		OI[ id ][ oDutyPoint ][ 1 ] = Pos[ 1 ];
		OI[ id ][ oDutyPoint ][ 2 ] = Pos[ 2 ];
		OI[ id ][ oDutyInt ] = GetPlayerInterior( playerid );
		OI[ id ][ oDutyVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
			DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );

		OrgDuty3D[ id ] = CreateDynamic3DTextLabel( ""col_balkanstory"|| DUZNOST ||\n"col_white"Da odete na duznost\n"col_balkanstory"/duty\n/undercover", -1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0);
		DutyPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oDutyPoint ][ 0 ], OI[ id ][ oDutyPoint ][ 1 ], OI[ id ][ oDutyPoint ][ 2 ], OI[ id ][ oDutyVW ], OI[ id ][ oDutyInt ], -1, 20.0 );

		SaveOrganization( id );
		SendInfoMessage( playerid, "Kreirali ste duty point za organizaciju (ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGEQUIPP && response ) {
		new id, ImaFajl[ 40 ], Float:Pos[ 3 ];
		if(sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGEQUIPP, DSI, D_NASLOV, "Unesti ID organizacije za koju pravite equipment point.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oTip ] != ORG_TIP_PD ) return GRESKA( playerid, "Samo organizacije tipa PD/SWAT/FBI." );
		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		OI[ id ][ oEquipPoint ][ 0 ] = Pos[ 0 ];
		OI[ id ][ oEquipPoint ][ 1 ] = Pos[ 1 ];
		OI[ id ][ oEquipPoint ][ 2 ] = Pos[ 2 ];
		OI[ id ][ oEquipInt ] = GetPlayerInterior( playerid );
		OI[ id ][ oEquipVW ] = GetPlayerVirtualWorld( playerid );

		if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
			DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );

		OrgEquip3D[ id ] = CreateDynamic3DTextLabel(""col_balkanstory"|| OPREMA ||\n"col_white"Da uzmete opremu\n"col_balkanstory"/oprema", -1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], 5, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0);
		EquipPointPickup[ id ] = CreateDynamicPickup( 1239, 1, OI[ id ][ oEquipPoint ][ 0 ], OI[ id ][ oEquipPoint ][ 1 ], OI[ id ][ oEquipPoint ][ 2 ], OI[ id ][ oEquipVW ], OI[ id ][ oEquipInt ], -1, 20.0 );

		SaveOrganization( id );
		SendInfoMessage( playerid, "Kreirali ste equipment point za organizaciju (ID: %d )!", id );
	}
	else if( dialogid == dialog_ORGPORTP && response ) {
		new id, string[ 15 ], ImaFajl[ 40 ], Float:Pos[ 3 ], int1, vw1, Float:x, Float:y, Float:z;
		if( sscanf( inputtext, "ifffii", id, x, y, z, int1, vw1 ) ) return ShowPlayerDialog( playerid, dialog_ORGPORTP, DSI, D_NASLOV, "Unesti ID orge, pozicije, int i virtual world gde ce se portati as ovog mesta\n\nPrimer: 12 2323.123 756.341 12.24 2 3.", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );
		if( OI[ id ][ oMaxPort ] == 10 ) return GRESKA( playerid, "Ta organizacija vec ima 10 portova." );

		GetPlayerPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 0 ] = Pos[ 0 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 1 ] = Pos[ 1 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 2 ] = Pos[ 2 ];
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 0 ] = GetPlayerInterior( playerid );
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 0 ] = GetPlayerVirtualWorld( playerid );

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 0 ] = x;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 1 ] = y;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 2 ] = z;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 1 ] = int1;
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 1 ] = vw1;

		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pickup ][ 0 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos1 ][ 2 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 0 ], -1, 20.0 );
		PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pickup ][ 1 ] = CreateDynamicPickup( 1239, 1, PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 0 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Pos2 ][ 2 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ VW ][ 1 ], PortOP[ id ][ OI[ id ][ oMaxPort ] ][ Int ][ 1 ], -1, 20.0 );

		new pFile[ 40 ];
		format( pFile, sizeof( pFile ), PORT_FILE, id );
		new INI:File = INI_Open( pFile );

		format( string, sizeof( string ), "Pos1X%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 0 ] );

		format( string, sizeof( string ), "Pos1Y%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 1 ] );

		format( string, sizeof( string ), "Pos1Z%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, Pos[ 2 ] );

		format( string, sizeof( string ), "Int1%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, GetPlayerInterior( playerid ) );

		format( string, sizeof( string ), "VW1%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, GetPlayerVirtualWorld( playerid ) );

		format( string, sizeof( string ), "Pos2X%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, x );

		format( string, sizeof( string ), "Pos2Y%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, y );

		format( string, sizeof( string ), "Pos2Z%d", OI[ id ][ oMaxPort ] );
		INI_WriteFloat( File, string, z );

		format( string, sizeof( string ), "Int2%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, int1 );

		format( string, sizeof( string ), "VW2%d", OI[ id ][ oMaxPort ] );
		INI_WriteInt( File, string, vw1 );

		INI_Close( File );

		OI[ id ][ oMaxPort ]++;
		SaveOrganization( id );
	}
	else if( dialogid == dialog_ORGDELETE && response ) {
		new id, ImaFajl[40];
		if( !IsNumeric( inputtext ) ) return GRESKA( playerid, "Unesi samo ID orge!" );
		if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_ORGDELETE, DSI, D_NASLOV, "Unesite id organizacije koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta organizacija ne postoji." );

		Delete3DTextLabel( Org3D[ id ] );

		if( IsValidDynamicPickup( OrgPickup[ id ] ) )
			DestroyDynamicPickup( OrgPickup[ id ] );
		
		if( IsValidDynamic3DTextLabel( OrgSafe3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgSafe3d[ id ] );

		if( IsValidDynamicPickup( OrgSafePickup[ id ] ) )
			DestroyDynamicPickup( OrgSafePickup[ id ] );
			
		if( IsValidDynamic3DTextLabel( OrgField3d[ id ] ) )
			DestroyDynamic3DTextLabel( OrgField3d[ id ] );

		if( IsValidDynamicPickup( OrgFieldPickup[ id ] ) )
			DestroyDynamicPickup( OrgFieldPickup[ id ] );
			
		if( IsValidDynamic3DTextLabel( OrgEquip3D[ id ] ) )
			DestroyDynamic3DTextLabel( OrgEquip3D[ id ] );

		if( IsValidDynamicPickup( EquipPointPickup[ id ] ) )
			DestroyDynamicPickup( EquipPointPickup[ id ] );
			
		if( IsValidDynamic3DTextLabel( OrgDuty3D[ id ] ) )
			DestroyDynamic3DTextLabel( OrgDuty3D[ id ] );

		if( IsValidDynamicPickup( DutyPointPickup[ id ] ) )
			DestroyDynamicPickup( DutyPointPickup[ id ] );
			
		OI[ id ][ oPozExtX ] = 0;
		OI[ id ][ oPozExtY ] = 0;
		OI[ id ][ oPozExtZ ] = 0;
			
		fremove( ImaFajl );
		SendInfoMessage( playerid, "Uspjesno ste izbrisali organizaciju id %d", id );
	}
	else if( dialogid == dialog_FDELETE && response ) {
		new id, ImaFajl[40];
		if( !IsNumeric( inputtext ) ) return GRESKA( playerid, "Unesi samo ID firme!" );
		if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_FDELETE, DSI, D_NASLOV, "Unesite id firme koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), F_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta firma ne postoji." );

		if( IsValidDynamicPickup( FirmaPickup[ id ] ) )
			DestroyDynamicPickup( FirmaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( FirmaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( FirmaLabel[ id ] );

		format( globalstring, sizeof( globalstring ), F_FILE, id );
		fremove( globalstring );

		SendInfoMessage( playerid, "Uspjesno ste izbrisali firmu id %d", id );
	}
	else if( dialogid == dialog_IMDELETE && response ) {
		new id, ImaFajl[ 40 ];
		if( !IsNumeric( inputtext ) ) return GRESKA( playerid, "Unesi samo ID imovine!" );
		if( sscanf( inputtext, "i", id ) ) return ShowPlayerDialog( playerid, dialog_IMDELETE, DSI, D_NASLOV, "Unesite id imovine koju zelite obrisati!", D_ODABERI, D_ODUSTANI );
		format( ImaFajl, sizeof( ImaFajl ), IM_FILE, id );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ta imovina ne postoji." );

		II[ id ][ iExit ][ 0 ] = 0.0;
		II[ id ][ iExit ][ 1 ] = 0.0;
		II[ id ][ iExit ][ 2 ] = 0.0;
		II[ id ][ iEnter ][ 0 ] = 0.0;
		II[ id ][ iEnter ][ 1 ] = 0.0;
		II[ id ][ iEnter ][ 2 ] = 0.0;

		if( IsValidDynamicPickup( ImovinaPickup[ id ] ) )
			DestroyDynamicPickup( ImovinaPickup[ id ] );

		if( IsValidDynamic3DTextLabel( ImovinaLabel[ id ] ) )
			DestroyDynamic3DTextLabel( ImovinaLabel[ id ] );

		format( globalstring, sizeof( globalstring ), IM_FILE, id );
		fremove( globalstring );
		SendInfoMessage( playerid, "Uspjesno ste izbrisali imovinu id %d", id );
	}
	//----------------------------------------------------------------------------
	else if( dialogid == dialog_KREIRANJEKUCE )
	{
		if( response )
		{
			new im = SledeciIDImovine( MAX_IMOVINA ), vrsta,cijena,level, Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];
			
			if( sscanf( inputtext, "iii", vrsta,level,cijena ) ) return ShowPlayerDialog( playerid, dialog_KREIRANJEKUCE, DSI, D_NASLOV, "Unesite vrstu level i cijenu kuce.\nVrste: 1. Mala kuca 2. Srednja Kuca 3. Velika kuca 4. Vila!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
			if( vrsta < 1 || vrsta > 4 ) return GRESKA( playerid, "Pogresna vrsta!" );
			if( cijena < 1 || cijena > 99999999) return GRESKA( playerid, "Cijena ne moze biti manja od 1 i veca od 99999999!" );
			if( level < 1 || level > 999) return GRESKA( playerid, "Level ne moze biti manji od 1 i veci od 999!" );

			GetPlayerPos( playerid, PozX, PozY, PozZ );
			format( iimovine, sizeof( iimovine ), IM_FILE, im );
			if( fexist( iimovine ) ) return GRESKA( playerid, "ID te imovine vec postoji!" );
			if( vrsta == MALA_KUCA )//EDITEDD LEON
			{
				II[ im ][ iExit ][ 0 ] = MALA_KUCA_X;
				II[ im ][ iExit ][ 1 ] = MALA_KUCA_Y;
				II[ im ][ iExit ][ 2 ] = MALA_KUCA_Z;
				II[ im ][ iInterior ] = MALA_KUCA_INT;
				II[ im ][ iVrsta ] = MALA_KUCA;
			}
			else if( vrsta == SREDNJA_KUCA )
			{
				II[ im ][ iExit ][ 0 ] = SREDNJA_KUCA_X;
				II[ im ][ iExit ][ 1 ] = SREDNJA_KUCA_Y;
				II[ im ][ iExit ][ 2 ] = SREDNJA_KUCA_Z;
				II[ im ][ iInterior ] = SREDNJA_KUCA_INT;
				II[ im ][ iVrsta ] = SREDNJA_KUCA;
			}
			else if( vrsta == VELIKA_KUCA )
			{
				II[ im ][ iExit ][ 0 ] = VELIKA_KUCA_X;
				II[ im ][ iExit ][ 1 ] = VELIKA_KUCA_Y;
				II[ im ][ iExit ][ 2 ] = VELIKA_KUCA_Z;
				II[ im ][ iInterior ] = VELIKA_KUCA_INT;
				II[ im ][ iVrsta ] = VELIKA_KUCA;
			}
			else if( vrsta == VILA_KUCA )
			{
				II[ im ][ iExit ][ 0 ] = VILA_KUCA_X;
				II[ im ][ iExit ][ 1 ] = VILA_KUCA_Y;
				II[ im ][ iExit ][ 2 ] = VILA_KUCA_Z;
				II[ im ][ iInterior ] = VILA_KUCA_INT;
				II[ im ][ iVrsta ] = VILA_KUCA;
			}
			II[ im ][ iUsage ] = IMOVINA_KUCA;
			II[ im ][ iPrice ] = cijena;
			II[ im ][ iOwned ] = 0;
			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
			II[ im ][ iEnter ][ 2 ] = PozZ;
			II[ im ][ iLocked ] = 0;
			II[ im ][ iVW ] = im;
			II[ im ][ iOrmar ] = 0;
			II[ im ][ iLevel ] = level;
			strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iSkin ][ 0 ] = 0;
			II[ im ][ iSkin ][ 1 ] = 0;
			II[ im ][ iSkin ][ 2 ] = 0;
			II[ im ][ iMats ] = 0;
			II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			#if nerp_droga == 1
			II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
			II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
			II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
			II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
			#endif
			II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
			SaveProperty( im );
			format( string, sizeof( string ),"{D50000}[ KUCA >> NA PRODAJU ]\nCijena: {FFFFFF}%d$\n{D50000}Vrsta: {FFFFFF}%s\n{D50000}Level: {FFFFFF}%d\n{D50000}Broj: {FFFFFF}%d\n{D50000}Adresa: {FFFFFF}%s\n{D50000}Da kupite kucu: {FFFFFF}/kupikucu",II[ im ][ iPrice ],GetVrstaKuce( II[ im ][ iVrsta ] ),II[ im ][ iLevel ],im,II[ im ][ iAdress ] );
			ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			ImovinaPickup[ im ] = CreateDynamicPickup(19522, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			SendInfoMessage( playerid, "Uspjesno si kreirao kucu." );
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	//---------------------------------------------------------------------------
	else if( dialogid == dialog_KREIRANJESTANA )
	{
		if( response )
		{
			print("Response dialoga kreiranja stana");
			new im = SledeciIDImovine( MAX_IMOVINA ), vrsta,cijena,level, Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];

			if( sscanf( inputtext, "iii", vrsta,level,cijena ) ) return ShowPlayerDialog( playerid, dialog_KREIRANJESTANA, DSI, D_NASLOV, "Unesite vrstu level i cijenu stana.\nVrste: 1. Mali stan 2. Srednji stan 3. Veliki stan!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
			if( vrsta < 1 || vrsta > 3 ) return GRESKA( playerid, "Pogresna vrsta!" );
			if( cijena < 1 || cijena > 99999999) return GRESKA( playerid, "Cijena ne moze biti manja od 1 i veca od 99999999!" );
			if( level < 1 || level > 999) return GRESKA( playerid, "Level ne moze biti manji od 1 i veci od 999!" );
			print("Prosao provjere za kreiranje");
			format( iimovine, sizeof( iimovine ), IM_FILE, im );
			if( fexist( iimovine ) ) return GRESKA( playerid, "ID te imovine vec postoji!" );
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			print("Krecu vrste stanova");
			if( vrsta == MALI_STAN )//EDITEDD LEON
			{
				II[ im ][ iExit ][ 0 ] = MALI_STAN_X;
				II[ im ][ iExit ][ 1 ] = MALI_STAN_Y;
				II[ im ][ iExit ][ 2 ] = MALI_STAN_Z;
				II[ im ][ iInterior ] = MALI_STAN_INT;
				II[ im ][ iVrsta ] = MALI_STAN;
				print("Izabrao mali stan");
			}
			else if( vrsta == SREDNJI_STAN )
			{
				II[ im ][ iExit ][ 0 ] = SREDNJI_STAN_X;
				II[ im ][ iExit ][ 1 ] = SREDNJI_STAN_Y;
				II[ im ][ iExit ][ 2 ] = SREDNJI_STAN_Z;
				II[ im ][ iInterior ] = SREDNJI_STAN_INT;
				II[ im ][ iVrsta ] = SREDNJI_STAN;
				print("Izabrao srednji stan");
			}
			else if( vrsta == VELIKI_STAN )
			{
				II[ im ][ iExit ][ 0 ] = VELIKI_STAN_X;
				II[ im ][ iExit ][ 1 ] = VELIKI_STAN_Y;
				II[ im ][ iExit ][ 2 ] = VELIKI_STAN_Z;
				II[ im ][ iInterior ] = VELIKI_STAN_INT;
				II[ im ][ iVrsta ] = VELIKI_STAN;
				print("Izabrao veliki stan");
			}
			
			II[ im ][ iUsage ] = IMOVINA_STAN;
			II[ im ][ iPrice ] = cijena;
			II[ im ][ iOwned ] = 0;
			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
			II[ im ][ iEnter ][ 2 ] = PozZ;
			II[ im ][ iLocked ] = 0;
			II[ im ][ iVW ] = im;
			II[ im ][ iLevel ] = level;
			strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iOrmar ] = 0;
			II[ im ][ iSkin ][ 0 ] = 0;
			II[ im ][ iSkin ][ 1 ] = 0;
			II[ im ][ iSkin ][ 2 ] = 0;
			II[ im ][ iMats ] = 0;
			II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			#if nerp_droga == 1
			II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
			II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
			II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
			II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
			#endif
			II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
			print("Ide save stana");
			SaveProperty( im );
			format( string, sizeof( string ),"{FF8040}[ STAN >> NA PRODAJU ]\nCijena: {FFFFFF}%d$\n{FF8040}Vrsta: {FFFFFF}%s\n{FF8040}Level: {FFFFFF}%d\n{FF8040}Broj: {FFFFFF}%d\n{FF8040}Adresa: {FFFFFF}%s\n{FF8040}Da kupite stan: {FFFFFF}/kupistan",II[ im ][ iPrice ],GetVrstaStana( II[ im ][ iVrsta ] ), II[ im ][ iLevel ],im, II[ im ][ iAdress ] );
			ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			ImovinaPickup[ im ] = CreateDynamicPickup(19523, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			print("Zavrseno kreiranje");
			SendInfoMessage( playerid, "Kreirali ste stan!" );

		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	//--------------------------------------------------------------------------

	else if( dialogid == dialog_KREIRANJEVIKENDICE )
	{
		if( response )
		{
			new im = SledeciIDImovine( MAX_IMOVINA ), vrsta,cijena,level, Float:PozX, Float:PozY, Float:PozZ, string[ 256 ], iimovine[ 40 ];

			if( sscanf( inputtext, "iii", vrsta,level,cijena ) ) return ShowPlayerDialog( playerid, dialog_KREIRANJEVIKENDICE, DSI, D_NASLOV, "Unesite vrstu level i cijenu vikendice.\nVrste: 1. Mala vikendica 2. Srednja vikendica 3. Velika vikendica!\nPrimjer 1 5 10000", D_ODABERI, D_NAZAD );
			if( vrsta < 1 || vrsta > 3 ) return GRESKA( playerid, "Pogresna vrsta!" );
			if( cijena < 1 || cijena > 99999999) return GRESKA( playerid, "Cijena ne moze biti manja od 1 i veca od 99999999!" );
			if( level < 1 || level > 999) return GRESKA( playerid, "Level ne moze biti manji od 1 i veci od 999!" );

			if( vrsta == MALA_VIKENDICA )//EDITEDD LEON
			{
				II[ im ][ iExit ][ 0 ] = MALA_VIKENDICA_X;
				II[ im ][ iExit ][ 1 ] = MALA_VIKENDICA_Y;
				II[ im ][ iExit ][ 2 ] = MALA_VIKENDICA_Z;
				II[ im ][ iInterior ] = MALA_VIKENDICA_INT;
				II[ im ][ iVrsta ] = MALA_VIKENDICA;
			}
			else if( vrsta == SREDNJA_VIKENDICA )
			{
				II[ im ][ iExit ][ 0 ] = SREDNJA_VIKENDICA_X;
				II[ im ][ iExit ][ 1 ] = SREDNJA_VIKENDICA_Y;
				II[ im ][ iExit ][ 2 ] = SREDNJA_VIKENDICA_Z;
				II[ im ][ iInterior ] = SREDNJA_VIKENDICA_INT;
				II[ im ][ iVrsta ] = SREDNJA_VIKENDICA;
			}
			else if( vrsta == VELIKA_VIKENDICA )
			{
				II[ im ][ iExit ][ 0 ] = VELIKA_VIKENDICA_X;
				II[ im ][ iExit ][ 1 ] = VELIKA_VIKENDICA_Y;
				II[ im ][ iExit ][ 2 ] = VELIKA_VIKENDICA_Z;
				II[ im ][ iInterior ] = VELIKA_VIKENDICA_INT;
				II[ im ][ iVrsta ] = VELIKA_VIKENDICA;
			}

			GetPlayerPos( playerid, PozX, PozY, PozZ );
			format( iimovine, sizeof( iimovine ), IM_FILE, im );
			if( fexist( iimovine ) ) return GRESKA( playerid, "ID te imovine vec postoji!" );
			II[ im ][ iUsage ] = IMOVINA_VIKENDICA;
			II[ im ][ iPrice ] = cijena;
			II[ im ][ iOwned ] = 0;
			II[ im ][ iNeaktivnost ] = 0;
			strmid( II[ im ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			II[ im ][ iEnter ][ 0 ] = PozX;
			II[ im ][ iEnter ][ 1 ] = PozY;
			II[ im ][ iEnter ][ 2 ] = PozZ;
			II[ im ][ iLocked ] = 0;
			II[ im ][ iVW ] = im;
			II[ im ][ iLevel ] = level;
			strmid( II[ im ][ iAdress ], UlicaImovine( im ), 0, strlen( UlicaImovine( im ) ), 32);
			II[ im ][ iOrmar ] = 0;
			II[ im ][ iSkin ][ 0 ] = 0;
			II[ im ][ iSkin ][ 1 ] = 0;
			II[ im ][ iSkin ][ 2 ] = 0;
			II[ im ][ iMats ] = 0;
			II[ im ][ iSafeStatus ] = 0; II[ im ][ iSafePass ] = 0;
			II[ im ][ iOruzje ][ 0 ] = 0; II[ im ][ iOruzje ][ 1 ] = 0; II[ im ][ iOruzje ][ 2 ] = 0; II[ im ][ iOruzje ][ 3 ] = 0;
			II[ im ][ iMunicija ][ 0 ] = 0; II[ im ][ iMunicija ][ 1 ] = 0; II[ im ][ iMunicija ][ 2 ] = 0; II[ im ][ iMunicija ][ 3 ] = 0;
			#if nerp_droga == 1
			II[ im ][ iDrug ][ 0 ] = 0; II[ im ][ iDrug ][ 1 ] = 0; II[ im ][ iDrug ][ 2 ] = 0; II[ im ][ iDrug ][ 3 ] = 0; II[ im ][ iDrug ][ 4 ] = 0;
			II[ im ][ iDrug ][ 5 ] = 0; II[ im ][ iDrug ][ 6 ] = 0; II[ im ][ iDrug ][ 7 ] = 0; II[ im ][ iDrug ][ 8 ] = 0; II[ im ][ iDrug ][ 9 ] = 0;
			II[ im ][ iDrugCode ][ 0 ] = 0; II[ im ][ iDrugCode ][ 1 ] = 0; II[ im ][ iDrugCode ][ 2 ] = 0; II[ im ][ iDrugCode ][ 3 ] = 0; II[ im ][ iDrugCode ][ 4 ] = 0;
			II[ im ][ iDrugCode ][ 5 ] = 0; II[ im ][ iDrugCode ][ 6 ] = 0; II[ im ][ iDrugCode ][ 7 ] = 0; II[ im ][ iDrugCode ][ 8 ] = 0; II[ im ][ iDrugCode ][ 9 ] = 0;
			#endif
			II[ im ][ iDoorLevel ] = 0; II[ im ][ iAlarm ] = 0; II[ im ][ iLockLevel ] = 0; II[ im ][ iTime ] = 0; II[ im ][ iPizzaTime ] = 0;
			SaveProperty( im );
			format( string, sizeof( string ),"{FFFF00}[ VIKENDICA >> NA PRODAJU ]\nCijena: {FFFFFF}%d$\n{FFFF00}Vrsta: {FFFFFF}%s\n{FFFF00}Level: {FFFFFF}%d\n{FFFF00}Broj: {FFFFFF}%d\n{FFFF00}Adresa: {FFFFFF}%s\n{FFFF00}Da kupite vikendicu: {FFFFFF}/kupivikendicu",II[ im ][ iPrice ],GetVrstaVikendice( II[ im ][ iVrsta ] ), II[ im ][ iLevel ],im, II[ im ][ iAdress ] );
			ImovinaLabel[ im ] = CreateDynamic3DTextLabel( string, 0x33CCFFAA, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			ImovinaPickup[ im ] = CreateDynamicPickup(19524, 1, II[ im ][ iEnter ][ 0 ], II[ im ][ iEnter ][ 1 ], II[ im ][ iEnter ][ 2 ] );
			SendInfoMessage( playerid, "Uspjesno si kreirao vikendicu." );

		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	//----------------------------------------------------------------------------
	else if( dialogid == dialog_FCREATE )
	{
		if( response )
		{
			new IDFirme = SledeciIDFirme( MAX_BUSSINES ), vrsta,level,cijena, Float:PozX, Float:PozY, Float:PozZ, f_string[ 300 ], ffirme[ 40 ];
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			
			if( sscanf( inputtext, "iii", vrsta,level,cijena ) )
			{
			
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Unesite vrstu level cijenu firme.\n" );
				strcat( DialogStrgEx, "Vrste: 0. 24/7 1. Burg 2. Cluckin Bell 3. Binco 4. Firma bez ulaza 5. Zip 6. Victim 7. Suburban\n" );
				strcat( DialogStrgEx, "8. Bar 9. Gym 10. Gun Shop 11. MRestoran 12. VRestoran 13. Pizza 14. Nocni klub\n" );
				strcat( DialogStrgEx, "15. Disco 16. Electronic Shop 17. Trafika 18.Firma za posao 19. Rent firma 20. Pumpa\n" );
				strcat( DialogStrgEx, "21. Javna Kuca 22. Kladionica 23. Oglas 24. Telekom 25. Pay 'n' Spray 26. Komunalije\n" );
				strcat( DialogStrgEx, "27. Vodovod 28. Elektrana 29. Lutrija 30. Casino 31. Neon Shop 32. Roda" );

				ShowPlayerDialog( playerid, dialog_FCREATE, DSI, D_NASLOV, DialogStrgEx, "U redu", "" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				return 1;
			}

			format( ffirme, sizeof( ffirme ), F_FILE, IDFirme );
			if( fexist( ffirme ) ) return GRESKA( playerid, "ID te firme vec postoji!" );
			if( vrsta < 0 || vrsta > 32 ) return GRESKA( playerid, "Pogresna vrsta!" );

			BussinesInfo[ IDFirme ][ bOwned ] = 0;
			BussinesInfo[ IDFirme ][ bNeaktivnost ] = 0;
			BussinesInfo[ IDFirme ][ bFacture ] = 100;
			BussinesInfo[ IDFirme ][ bReket ] = -1;
			BussinesInfo[ IDFirme ][ bReketTime ] = 0;
			BussinesInfo[ IDFirme ][ bEnterX ] = PozX;
			BussinesInfo[ IDFirme ][ bEnterY ] = PozY;
			BussinesInfo[ IDFirme ][ bEnterZ ] = PozZ;
			BussinesInfo[ IDFirme ][ bLocked ] = 0;
			BussinesInfo[ IDFirme ][ bLevel ] = level;
			BussinesInfo[ IDFirme ][ bJobID ] = 0;
			if( vrsta == 0 ) { // 24/7 Market
				BussinesInfo[ IDFirme ][ bInInt ] = 18;
				BussinesInfo[ IDFirme ][ bExitX ] = -30.9076;
				BussinesInfo[ IDFirme ][ bExitY ] = -92.0104;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1003.5469;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Prodavnica", 0, strlen( "Prodavnica" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_MARKET;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 1 ) { // Burg 
				BussinesInfo[ IDFirme ][ bInInt ] = 10;
				BussinesInfo[ IDFirme ][ bExitX ] = 1197.5361;
				BussinesInfo[ IDFirme ][ bExitY ] = -916.4236;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1059.4139;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Burg", 0, strlen( "Burg" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_BURG;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 2 ) { // Clucking Bell
				BussinesInfo[ IDFirme ][ bInInt ] = 9;
				BussinesInfo[ IDFirme ][ bExitX ] = 365.0046;
				BussinesInfo[ IDFirme ][ bExitY ] = -11.8387;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1001.8516;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Cluckin Bell", 0, strlen( "Cluckin Bell" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_CLUCK;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 3 ) { // Binco
				BussinesInfo[ IDFirme ][ bInInt ] = 15;
				BussinesInfo[ IDFirme ][ bExitX ] = 207.7204;
				BussinesInfo[ IDFirme ][ bExitY ] = -110.5464;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1005.132812;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Binco", 0, strlen( "Binco" ), 128);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_BINCO;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 4 ) { // Bez ulaza firme
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Promeni Ime!", 0, strlen( "Promeni Ime!" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_JFIRMA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 5 ) { // Zip
				BussinesInfo[ IDFirme ][ bInInt ] = 18;
				BussinesInfo[ IDFirme ][ bExitX ] = 161.410293;
				BussinesInfo[ IDFirme ][ bExitY ] = -96.687202;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Zip", 0, strlen( "Zip" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_ZIP;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 6 ) { // Victim
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
				BussinesInfo[ IDFirme ][ bExitX ] = 227.342803;
				BussinesInfo[ IDFirme ][ bExitY ] = -8.243800;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1002.210876;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Victim", 0, strlen( "Victim" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_VICTIM;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 7 ) { // Suburban
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
				BussinesInfo[ IDFirme ][ bExitX ] = 203.895294;
				BussinesInfo[ IDFirme ][ bExitY ] = -50.656700;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1001.804687;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Suburban", 0, strlen( "Suburban" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_SUBURBAN;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 8 ) { // Bar
				BussinesInfo[ IDFirme ][ bInInt ] = 11;
				BussinesInfo[ IDFirme ][ bExitX ] = 501.870788;
				BussinesInfo[ IDFirme ][ bExitY ] = -67.582000;
				BussinesInfo[ IDFirme ][ bExitZ ] = 998.757812;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Bar", 0, strlen( "Bar" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_BAR;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 9 ) { // Gym
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
				BussinesInfo[ IDFirme ][ bExitX ] = 772.359375;
				BussinesInfo[ IDFirme ][ bExitY ] = -5.515697;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1000.728576;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Gym", 0, strlen( "Gym" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_GYM;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 10 ) { // Gun Shop
				BussinesInfo[ IDFirme ][ bLevel ] = 10;
				BussinesInfo[ IDFirme ][ bInInt ] = 7;
				BussinesInfo[ IDFirme ][ bExitX ] = 315.762786;
				BussinesInfo[ IDFirme ][ bExitY ] = -143.661193;
				BussinesInfo[ IDFirme ][ bExitZ ] = 999.601623;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Gun Shop", 0, strlen( "Gun Shop" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_GUNSHOP;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 11 ) { // MRestoran
				BussinesInfo[ IDFirme ][ bInInt ] = 4;
				BussinesInfo[ IDFirme ][ bExitX ] = 460.265411;
				BussinesInfo[ IDFirme ][ bExitY ] = -88.611503;
				BussinesInfo[ IDFirme ][ bExitZ ] = 999.554687;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Mali Restoran", 0, strlen( "Mali Restoran" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 12 ) { // VRestoran
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
				BussinesInfo[ IDFirme ][ bExitX ] = -794.850280;
				BussinesInfo[ IDFirme ][ bExitY ] = 489.279693;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1376.195312;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Veliki Restoran", 0, strlen( "Veliki Restoran" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_RESTORAN;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 13 ) { // Pizza
				BussinesInfo[ IDFirme ][ bInInt ] = 5;
				BussinesInfo[ IDFirme ][ bExitX ] = 372.2682;
				BussinesInfo[ IDFirme ][ bExitY ] = -133.5108;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1001.4922;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Well stacked pizza", 0, strlen( "Well stacked pizza" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_PIZZA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 14 ) { // Nocni klub
				BussinesInfo[ IDFirme ][ bInInt ] = 3;
				BussinesInfo[ IDFirme ][ bExitX ] = -2636.5781;
				BussinesInfo[ IDFirme ][ bExitY ] = 1402.7936;
				BussinesInfo[ IDFirme ][ bExitZ ] = 906.4609;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Nocni klub", 0, strlen( "Nocni klub" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_NKLUB;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 15 ) { // Diskoteka
				BussinesInfo[ IDFirme ][ bInInt ] = 17;
				BussinesInfo[ IDFirme ][ bExitX ] = 493.439300;
				BussinesInfo[ IDFirme ][ bExitY ] = -24.916900;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1000.671875;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Diskoteka", 0, strlen( "Diskoteka" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_DISCO;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 16 ) { // Electronic Shop
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 1149.0861;
				BussinesInfo[ IDFirme ][ bExitY ] = -1912.6389;
				BussinesInfo[ IDFirme ][ bExitZ ] = -40.6107;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Electronic Shop", 0, strlen( "Electronic Shop" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_ELEKTRONIK;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme; }
			else if( vrsta == 17 ) { // Trafika
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Trafika", 0, strlen( "Trafika" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_TRAFIKA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 18 ) { // Firma za posao
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_POSAO;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
				ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. Kosac Trave 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7. Bus vozac 8. Mehanicar 9. Farmer\n 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 14. P. Namestaja 15. Masinovodja", D_ODABERI, D_ODUSTANI );
			} 
			else if( vrsta == 19 ) { // Rent
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Rent a vehicle", 0, strlen( "Rent a vehicle" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_RENT;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 20 ) { // Pumpa
				BussinesInfo[ IDFirme ][ bInInt ] = 6;
				BussinesInfo[ IDFirme ][ bExitX ] = -27.3661;
				BussinesInfo[ IDFirme ][ bExitY ] = -58.0692;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1003.5469;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Pumpa", 0, strlen( "Pumpa" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_PUMPA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 21 ) { // Javna Kuca
				BussinesInfo[ IDFirme ][ bInInt ] = 6; 
				BussinesInfo[ IDFirme ][ bExitX ] = -2385.0266;
				BussinesInfo[ IDFirme ][ bExitY ] = 999.6372;
				BussinesInfo[ IDFirme ][ bExitZ ] = -20.5350;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Javna Kuca", 0, strlen( "Javna Kuca" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_JAVNAK;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 22 ) { // Kladionica 1670.2212,-1340.9077,20163.0254
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
				BussinesInfo[ IDFirme ][ bExitX ] = 1670.2212;
				BussinesInfo[ IDFirme ][ bExitY ] = -1340.9077;
				BussinesInfo[ IDFirme ][ bExitZ ] = 20163.0254;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Kladionica", 0, strlen( "Kladionica" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_KLAD;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 23 ) { // Oglas 1702.6136, 296.6979, 1004.9880
				BussinesInfo[ IDFirme ][ bInInt ] = 1;
				BussinesInfo[ IDFirme ][ bExitX ] = 1702.6136;
				BussinesInfo[ IDFirme ][ bExitY ] = 296.6979;
				BussinesInfo[ IDFirme ][ bExitZ ] = 1004.9880;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Oglas", 0, strlen( "Oglas" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_OGLAS;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 24 ) { // Telekom
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Telekom", 0, strlen( "Telekom" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_TELEKOM;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 25 ) { // Pay 'n' Spray
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Pay 'n' Spray", 0, strlen( "Pay 'n' Spray" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_PAYSPRAY;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 26 ) { // Komunalije
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Komunalije", 0, strlen( "Komunalije" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_KOMUNALIJE;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 27 ) { // Vodovod
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Vodovod", 0, strlen( "Vodovod" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_VODOVOD;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 28 ) { // Elektrana
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Elektrana", 0, strlen( "Elektrana" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_ELEKTRANA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 29 ) { // Lutrija
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Lutrija", 0, strlen( "Lutrija" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_LUTRIJA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 30 ) { // Casino t
				BussinesInfo[ IDFirme ][ bInInt ] = 3;
				BussinesInfo[ IDFirme ][ bExitX ] = 1141.8010;
				BussinesInfo[ IDFirme ][ bExitY ] = -50.7018;
				BussinesInfo[ IDFirme ][ bExitZ ] = 996.5208;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Casino", 0, strlen( "Casino" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_CASINO;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 31 ) { // Neon Shop
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Neon Shop", 0, strlen( "Neon Shop" ), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_NEON;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			else if( vrsta == 32 ) { // Roda
				BussinesInfo[ IDFirme ][ bInInt ] = 0;
				BussinesInfo[ IDFirme ][ bExitX ] = 0;
				BussinesInfo[ IDFirme ][ bExitY ] = 0;
				BussinesInfo[ IDFirme ][ bExitZ ] = 0;
				BussinesInfo[ IDFirme ][ bPrice ] = cijena;
				strmid( BussinesInfo[ IDFirme ][ bName ], "Market Roda", 0, strlen( "Market Roda"), 64);
				BussinesInfo[ IDFirme ][ bType ] = VRSTA_RODA;
				BussinesInfo[ IDFirme ][ bInVW ] = IDFirme;
			}
			
			BussinesInfo[ IDFirme ][ bMoney ] = 0;
			BussinesInfo[ IDFirme ][ bInt ] = GetPlayerInterior( playerid );
			BussinesInfo[ IDFirme ][ bVW ] = GetPlayerVirtualWorld( playerid );
			strmid( BussinesInfo[ IDFirme ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			SaveBussines( IDFirme );

			format(f_string,sizeof(f_string), ""col_yelow"[ FIRMA >> NA PRODAJU ]\nCijena: {FFFFFF}%d$\n"col_yelow"Vrsta: {FFFFFF}%s\n"col_yelow"Level: {FFFFFF}%d\n"col_yelow"Broj: {FFFFFF}%d\n"col_yelow"Adresa: {FFFFFF}%s\n"col_yelow"Da kupite firmu: {FFFFFF}/kupifirmu",BussinesInfo[ IDFirme ][ bPrice ],getBussinesType( IDFirme ),BussinesInfo[ IDFirme ][ bLevel ],IDFirme,UliceFirme( IDFirme ) );


			FirmaLabel[ IDFirme ] = CreateDynamic3DTextLabel( f_string, 0x33CCFFAA, PozX, PozY, PozZ, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1);
			FirmaPickup[ IDFirme ] = CreateDynamicPickup( 1274, 1, PozX, PozY, PozZ ); Bussines_Refresh( IDFirme );
			SendInfoMessage( playerid, "Uspjesno si kreirao firmu." );
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_CREATEJOBBUSSINES  ) {
		if( !response ) return 1;
		if( response ) {
			new jobid, IDFirme = GetNearestBussines( playerid ), stringic[ 64 ];
			if( sscanf( inputtext, "d", jobid ) ) return ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. Kosac 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7. Bus vozac 8. Mehanicar 9. Farmer\n 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 14. P. Namestaja 15. Masinovodja", D_ODABERI, D_ODUSTANI );
			if( jobid < 1 || jobid > MAX_JOBS || jobid == 7 ) return ShowPlayerDialog( playerid, dialog_CREATEJOBBUSSINES, DSI, D_NASLOV, "Unesite id posla koji zelite za ovu firmu. ID poslova:\n\n1. 2. Gradjevinar 3. Rudar 4. Komunalac 5. Tempo Dostava 6. Pilot 7. Bus vozac 8. Mehanicar 9. Farmer\n 10. Dostavljac pizze 11. Taxista 12. Prevoznik Novca 13. Ribar 14. P. Namestaja 15. Masinovodja", D_ODABERI, D_ODUSTANI );
			
			format( stringic, sizeof( stringic ), "Firma - %s", getJobName( jobid ) );
			strmid( BussinesInfo[ IDFirme ][ bName ], stringic, 0, strlen( stringic ), 64);
			BussinesInfo[ IDFirme ][ bJobID ] = jobid;
			SaveBussines( IDFirme ); Bussines_Refresh( IDFirme );
		}
	}
	else if( dialogid == dialog_ORGCREATE  )
	{
		if( response )
		{
			new ime[ ORG_IME ], fileorge[ 40 ], Float:PozX, Float:PozY, Float:PozZ;
			GetPlayerPos( playerid, PozX, PozY, PozZ );
			if(sscanf( inputtext, "s[64]", ime ) ) return ShowPlayerDialog( playerid, dialog_ORGCREATE, DSI, D_NASLOV, "Unesite zeljeno ime vase organizacije!", D_ODABERI, D_NAZAD);
			for( new id = 1; id < MAX_ORG; id++ )
			{
				format(fileorge, sizeof( fileorge ), O_FILE, id);
				if( !fexist( fileorge ) )
				{
					strmid(OI[ id ][ oName ], ime, 0, strlen(ime), ORG_IME);
					OI[ id ][oID] = id;
					OI[ id ][oCreated] = 1;

					strmid( OI[ id ][ oLider1 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER );
					strmid( OI[ id ][ oLider2 ], "Niko", 0, strlen( "Niko" ), ORG_LIDER );

					strmid( OI[ id ][ oClan1 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan10 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan11 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan12 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan13 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan14 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan15 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan16 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan17 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan18 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan19 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan20 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan21 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan22 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan23 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan24 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan25 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan26 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan27 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan28 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan29 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );
					strmid( OI[ id ][ oClan30 ], "Niko", 0, strlen("Niko" ), ORG_CLAN );

					OI[ id ][ oPozExtX ] = PozX; OI[ id ][ oPozExtY ] = PozY; OI[ id ][ oPozExtZ ] = PozZ;

					OI[ id ][ oSavez ] = -1;

					OrgKreiranje[ playerid ] = id;
					SaveOrganization( id) ;
					new string[ 256 ];
					format( string, sizeof( string ),""col_balkanstory"|| %s ||\n"col_white"Da udjete koristite\n"col_balkanstory"F", OI[ id ][ oName ] );
					Org3D[ id ] = Create3DTextLabel( string, -1, OI[ id ][ oPozExtX ], OI[ id ][ oPozExtY ], OI[ id ][ oPozExtZ ], 25, 0, 1);
					OrgPickup[ id ] = CreateDynamicPickup(19133, 1, PozX, PozY, PozZ);
					ShowPlayerDialog( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LShowPlayerDialog", D_ODABERI, D_ODUSTANI );
					break;
				}
			}
		}
		else { ShowPlayerDialog( playerid, dialog_NAPRAVISVE, DSL, D_NASLOV, "Organizacije\nVozila\nFirmu\nKontejner\nKuca\nStan\nVikendica\nEvent\nBankomat\nAuto salon\nHotel\nKapija\nImanje\nGaraza\nGPS Lokacija\nAdmin port\nSupp port\nRadar\nGang Zona\nPoklon\nJelka\nLampa\nPumpa\nParking", D_ODABERI, D_NAZAD );  }
	}
	else if( dialogid == dialog_ORGPREFIX && response )
	{
		new id = GetNearestOrganization( playerid );
		new prefix[ 10 ];
		if( sscanf( inputtext, "s[10]", prefix ) ) return ShowPlayerDialog( playerid, dialog_ORGPREFIX, DSI, D_NASLOV, "Unesite skracenicu organizacije. Primer: LShowPlayerDialog", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 )
		{
			strmid( OI[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );
			SaveOrganization( id );
			SendInfoMessage( playerid, "Uspjesno ste promenili prefix organizacije!" );
		}
		else
		{
			strmid( OI[ id ][ oPreFix ], prefix, 0, strlen( prefix ), 10 );
			SaveOrganization( id );
			ShowPlayerDialog( playerid, dialog_ORGINT1, DSL, D_NASLOV, "Default Interior\nUnesi sam kordinate\nInterior bande\nInterior mafije\nInterior hitmana\nInterior taksista\nInterior bolnice\nInterior novinara", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGINT1 && response )
	{
		new id = GetNearestOrganization( playerid );
		if( listitem ==  0 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{
				OI[ id ][ oPozIntX ] = 246.7840;
				OI[ id ][ oPozIntY ] = 63.9002;
				OI[ id ][ oPozIntZ ] = 1003.6406;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili default interior!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 246.7840;
				OI[ id ][ oPozIntY ] = 63.9002;
				OI[ id ][ oPozIntZ ] = 1003.6406;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem ==  1 )
		{
			ShowPlayerDialog( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
		}
		if( listitem ==  2 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{ 
				OI[ id ][ oPozIntX ] = 2258.0603;
				OI[ id ][ oPozIntY ] = -1080.9207;
				OI[ id ][ oPozIntZ ] = 1048.9668;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili banda interior!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 2258.0603;
				OI[ id ][ oPozIntY ] = -1080.9207;
				OI[ id ][ oPozIntZ ] = 1048.9668;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		 }
		if( listitem ==  3 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{
				OI[ id ][ oPozIntX ] = 93.9262;
				OI[ id ][ oPozIntY ] = 643.1198;
				OI[ id ][ oPozIntZ ] = 1392.0549;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili mafija interior!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 93.9262;
				OI[ id ][ oPozIntY ] = 643.1198;
				OI[ id ][ oPozIntZ ] = 1392.0549;
				OI[ id ][ oInt ] = 6;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem ==  4 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{
				OI[ id ][ oPozIntX ] = 390.7695;
				OI[ id ][ oPozIntY ] = 173.8225;
				OI[ id ][ oPozIntZ ] = 1008.3828;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili hitman interior!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 390.7695;
				OI[ id ][ oPozIntY ] = 173.8225;
				OI[ id ][ oPozIntZ ] = 1008.3828;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 5 )
		{ 
			if( OrgKreiranje[ playerid ] == 0 )
			{
				OI[ id ][ oPozIntX ] = 2793.1833;
				OI[ id ][ oPozIntY ] = -1593.9452;
				OI[ id ][ oPozIntZ ] = -48.5485;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili taksista interior!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 2793.1833;
				OI[ id ][ oPozIntY ] = -1593.9452;
				OI[ id ][ oPozIntZ ] = -48.5485;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 6 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{ 
				OI[ id ][ oPozIntX ] = -2330.1714;
				OI[ id ][ oPozIntY ] = 111.5213;
				OI[ id ][ oPozIntZ ] = -5.3942;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili interior bolnice!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = -2330.1714;
				OI[ id ][ oPozIntY ] = 111.5213;
				OI[ id ][ oPozIntZ ] = -5.3942;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
		if( listitem == 7 )
		{
			if( OrgKreiranje[ playerid ] == 0 )
			{
				OI[ id ][ oPozIntX ] = 929.7870;
				OI[ id ][ oPozIntY ] = -1022.8786;
				OI[ id ][ oPozIntZ ] = -49.3566;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id ); SendInfoMessage( playerid, "Uspjesno ste stavili interior novinara!" );
			}
			else
			{
				OI[ id ][ oPozIntX ] = 929.7870;
				OI[ id ][ oPozIntY ] = -1022.8786;
				OI[ id ][ oPozIntZ ] = -49.3566;
				OI[ id ][ oInt ] = 3;
				OI[ id ][ oVw ] = id;
				SaveOrganization( id );
				ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	else if( dialogid == dialog_ORGINT2 && response)
	{
		new id = GetNearestOrganization( playerid );
		new Float:Poz[ 3 ];
		new intid;
		if( sscanf( inputtext, "ifff", intid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] ) ) return ShowPlayerDialog( playerid, dialog_ORGINT2, DSI, D_NASLOV, "Unesi id interiora i kordinate interiora\n Primer: 6 246.7840 63.9002 1003.6406", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 )
		{
			OI[ id ][ oPozIntX ] = Poz[ 0 ];
			OI[ id ][ oPozIntY ] = Poz[ 1 ];
			OI[ id ][ oPozIntZ ] = Poz[ 2 ];
			OI[ id ][ oInt ] = intid;
			OI[ id ][ oVw ] = id;
			SaveOrganization( id ); SendClientMessagee( playerid, CRVENA, "Uspjesno ste promenili interior!" );
		}
		else
		{
			OI[ id ][ oPozIntX ] = Poz[ 0 ];
			OI[ id ][ oPozIntY ] = Poz[ 1 ];
			OI[ id ][ oPozIntZ ] = Poz[ 2 ];
			OI[ id ][ oInt ] = intid;
			OI[ id ][ oVw ] = id;
			SaveOrganization( id );
			ShowPlayerDialog( playerid, dialog_ORGTIP, DSL, D_NASLOV, "Tip: MUP/SAJ\nTip: Banda\nTip: Mafija\nTip: Bajkeri\nTip: Raceri\nTip: Bolnicari\nTip: Novinari\nTip: Hitmani\nTip: Elektricari\nTip: Taksisti", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGTIP && response)
	{
		new id = GetNearestOrganization( playerid );
		if( OrgKreiranje[ playerid ] == 0 )
		{
			if(listitem ==  0)
			{
				OI[ id ][ oTip ] = ORG_TIP_PD;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : MUP/SAJ" );
			}
			if(listitem ==  1)
			{
				OI[ id][ oTip ] = ORG_TIP_BANDA;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Banda" );
			}
			if(listitem ==  2)
			{
				OI[ id ][ oTip ] = ORG_TIP_MAFIJA;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Mafija" );
			}
			if(listitem ==  3)
			{
				OI[ id ][ oTip ] = ORG_TIP_MC;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Bajkeri" );
			}
			if(listitem ==  4)
			{
				OI[ id ][ oTip ] = ORG_TIP_SR;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Street Raceri" );
			}
			if(listitem ==  5)
			{
				OI[ id ][ oTip ] = ORG_TIP_MD;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Bolnicari" );
			}
			if(listitem ==  6)
			{
				OI[ id ][ oTip ] = ORG_TIP_CNN;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Novinari" );
			}
			if(listitem == 7 )
			{
				OI[ id ][ oTip ] = ORG_TIP_HITM;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Hitmani" );
			}
			if( listitem == 8 )
			{
				OI[ id ][ oTip ] = ORG_TIP_ELEK;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 )
			{
				OI[ id ][ oTip ] = ORG_TIP_TAXI;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Taksisti" );
			}
		}
		else
		{
			if(listitem ==  0)
			{
				OI[ id ][ oTip ] = ORG_TIP_PD;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : MUP/SAJ" );
			}
			if(listitem ==  1)
			{
				OI[ id][ oTip ] = ORG_TIP_BANDA;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Banda" );
			}
			if(listitem ==  2)
			{
				OI[ id ][ oTip ] = ORG_TIP_MAFIJA;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Mafija" );
			}
			if(listitem ==  3)
			{
				OI[ id ][ oTip ] = ORG_TIP_MC;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Bajkeri" );
			}
			if(listitem ==  4)
			{
				OI[ id ][ oTip ] = ORG_TIP_SR;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Street Raceri" );
			}
			if(listitem ==  5)
			{
				OI[ id ][ oTip ] = ORG_TIP_MD;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Bolnicari" );
			}
			if(listitem ==  6)
			{
				OI[ id ][ oTip ] = ORG_TIP_CNN;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Novinari" );
			}
			if(listitem ==  7)
			{
				OI[ id ][ oTip ] = ORG_TIP_HITM;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Hitmani" );
			}
			if( listitem ==  8 )
			{
				OI[ id ][ oTip ] = ORG_TIP_ELEK;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Elektricar" );
			}
			if( listitem == 9 )
			{
				OI[ id ][ oTip ] = ORG_TIP_TAXI;
				SaveOrganization( id );
				SendInfoMessage( playerid, "Tip : Taksisti" );
			}
			
			ShowPlayerDialog( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
		}
		return 1;
	}
	else if( dialogid == dialog_ORGRANK1 )
	{
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK1, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 1 ove organizacije.", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 )
		{
			strmid( OI[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank1 ] ); }
		else
		{
			strmid( OI[ id ][ oRank1 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank1 ] );
			ShowPlayerDialog( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGRANK2) {
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK2, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 2 ove organizacije.", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank2 ] ); }
		else {
			strmid( OI[ id ][ oRank2 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank2 ] );
			ShowPlayerDialog( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI); }
	}
	else if( dialogid == dialog_ORGRANK3) {
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK3, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 3 ove organizacije.", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid(OI[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank3 ] ); }
		else {
			strmid(OI[ id ][ oRank3 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank3 ] );
			ShowPlayerDialog( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK4) {
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK4, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 4 ove organizacije.", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank4 ] ); }
		else {
			strmid( OI[ id][ oRank4 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank4 ] );
			ShowPlayerDialog( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK5) {
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if(sscanf(inputtext, "s[64]", ime)) return ShowPlayerDialog( playerid, dialog_ORGRANK5, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 5 ove organizacije.", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			strmid( OI[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank5 ] ); }
		else {
			strmid( OI[ id ][ oRank5 ], ime, 0, strlen(ime), ORG_RANK);
			SaveOrganization(id);
			SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank5 ] );
			ShowPlayerDialog( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI ); }
	}
	else if( dialogid == dialog_ORGRANK6) {
		new id = GetNearestOrganization( playerid );
		new ime[ORG_RANK];
		if( sscanf( inputtext, "s[64]", ime ) ) return ShowPlayerDialog( playerid, dialog_ORGRANK6, DSI, D_NASLOV, "U prazni prostor ispod unesite ime za rank 6 ove organizacije.", D_ODABERI, D_ODUSTANI );
		strmid( OI[ id ][ oRank6 ], ime, 0, strlen(ime), ORG_RANK);
		SaveOrganization( id );
		SendInfoMessage( playerid, "Postavili ste ime ranka na %s", OI[ id ][ oRank6 ] );
		if (LiderSkins[playerid] != 1)
		{
			ShowPlayerDialog( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
		LiderSkins[playerid] = 0;
	}
	else if( dialogid == dialog_ORGSKINS && response ) {
		new id = GetNearestOrganization(playerid);
		new rank1, rank2, rank3, rank4, rank5, rank6;
		if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return ShowPlayerDialog( playerid, dialog_ORGSKINS, DSI, D_NASLOV, "Unesite id-ove muskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			OI[ id ][ oSkin1 ] = rank1;
			OI[ id ][ oSkin2 ] = rank2;
			OI[ id ][ oSkin3 ] = rank3;
			OI[ id ][ oSkin4 ] = rank4;
			OI[ id ][ oSkin5 ] = rank5;
			OI[ id ][ oSkin6 ] = rank6;
			SaveOrganization( id );
			SendInfoMessage( playerid, "Uspjesno ste promenili id-ove muskih skinova za rankove!" );
		}
		else {
			OI[ id ][ oSkin1 ] = rank1;
			OI[ id ][ oSkin2 ] = rank2;
			OI[ id ][ oSkin3 ] = rank3;
			OI[ id ][ oSkin4 ] = rank4;
			OI[ id ][ oSkin5 ] = rank5;
			OI[ id ][ oSkin6 ] = rank6;
			SaveOrganization( id );
			SendInfoMessage( playerid, "Uspjesno ste postavili id-ove muskih skinova za rankove!" );
			ShowPlayerDialog( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ORGZSKINS && response ) {
		new id = GetNearestOrganization(playerid);
		new rank1, rank2, rank3, rank4, rank5, rank6;
		if(sscanf(inputtext, "iiiiii", rank1, rank2, rank3, rank4, rank5, rank6)) return ShowPlayerDialog( playerid, dialog_ORGZSKINS, DSI, D_NASLOV, "Unesite id-ove zenskih skinova za rankove koje zelite:\n Mora biti 6 id-a(rank1-6)\nPrimer: 1 2 3 4 5 6", D_ODABERI, D_ODUSTANI );
		if( OrgKreiranje[ playerid ] == 0 ) {
			OI[ id ][ oZSkin1 ] = rank1;
			OI[ id ][ oZSkin2 ] = rank2;
			OI[ id ][ oZSkin3 ] = rank3;
			OI[ id ][ oZSkin4 ] = rank4;
			OI[ id ][ oZSkin5 ] = rank5;
			OI[ id ][ oZSkin6 ] = rank6;
			SaveOrganization( id );
			SendInfoMessage( playerid, "Uspjesno ste promenili id-ove zenskih skinova za rankove!" );
		}
		else {
			OI[ id ][ oZSkin1 ] = rank1;
			OI[ id ][ oZSkin2 ] = rank2;
			OI[ id ][ oZSkin3 ] = rank3;
			OI[ id ][ oZSkin4 ] = rank4;
			OI[ id ][ oZSkin5 ] = rank5;
			OI[ id ][ oZSkin6 ] = rank6;
			ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
			SaveOrganization( id );
			SendInfoMessage( playerid, "Uspjesno ste postavili id-ove zenskih skinova za rankove!" );
		}
	}
	else if( dialogid == dialog_ORGMAXMEMB && response ) {
		new id = GetNearestOrganization( playerid ), maxmemb;
		if( sscanf( inputtext, "i", maxmemb ) ) return ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		if( maxmemb < 8 || maxmemb > 30 ) return ShowPlayerDialog( playerid, dialog_ORGMAXMEMB, DSI, D_NASLOV, "Unesti broj koliko ova orga moze imati maksimalno clanova(8-30)", D_ODABERI, D_ODUSTANI );
		OI[ id ][ oMaxClanova ] = maxmemb;
		SaveOrganization( id );

		SendInfoMessage( playerid, "Uspjesno ste postavili broj maksimalno clanova na %d!", maxmemb );
		SendInfoMessage( playerid, "Uspjesno ste zavrsili kreiranje organizacija." );
		OrgKreiranje[ playerid ] = 0;
	}
	#if nerp_droga == 1
	else if( dialogid == dialog_ORGDRUGCHOSE && response ) {
		new id = GetNearestOrganization( playerid );
		switch( listitem ) {
			case 0: {
				OI[ id ][ oControlType ] = CTIP_KOKAIN;
				SendInfoMessage( playerid, "Postavili da ova mafija upravlja Kokainom." );
				SendInfoMessage( playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga." );
				SendInfoMessage( playerid, "Odi na zeljeno mesto i kucaj /orgpolje." );
				PoljeDroge[ playerid ] = id;
			}
			case 1: {
				OI[ id ][ oControlType ] = CTIP_BMETH;
				SendInfoMessage( playerid, "Postavili da ova mafija upravlja Plavi Methamphetaminom." );
			}
		}
		SaveOrganization( id );
	}
	else if( dialogid == dialog_ORGDRUGCHOSE_2 && response ) {
		new id = GetNearestOrganization( playerid );
		switch( listitem ) {
			case 0: {
				OI[ id ][ oControlType ] = CTIP_MARIHUANA;
				SendInfoMessage( playerid, "Postavili da ova banda upravlja Marihuanom." );
				SendInfoMessage( playerid, "Sada trebas sacuvati poziciju poljanje gde ce moci da se sadi droga." );
				SendInfoMessage( playerid, "Odi na zeljeno mesto i kucaj /orgpolje." );
				PoljeDroge[ playerid ] = id;
			}
			case 1: {
				OI[ id ][ oControlType ] = CTIP_METH;
				SendInfoMessage( playerid, "Postavili da ova banda upravlja Methamphetaminom." );
			}
		}
		SaveOrganization( id );
	}
	#endif
	else if( dialogid == dialog_LIDER && response )
	{
		switch( listitem )
		{
			case 0:
			{
				new OrgID = PlayerInfo[ playerid ][ xLider ];
				
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				
				new string[ 128 ];
				format( string, sizeof( string ), ""col_balkanstory"Broj clanova: "col_white"%d/30\n", OI[ OrgID ][ oUbacenihClanova ] );
				strcat( DialogStrgEx, string );
				
				if( GetFactionType( playerid ) == ORG_TIP_BANDA )
				{
					strcat( DialogStrgEx, "Svaka zauzeta teritorija vam donosi 500$ svakih sat vremena!\n" );
				}
				#if nerp_droga == 1
				if( OI[ OrgID ][ oControlType ] == CTIP_HEROIN )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					
					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Heroin\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate kupiti opim kod dokova\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da kupite kalcijum u apoteci\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate da kupite amonijum hlorid u apoteci\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate da napravite drogu u interieru\n");
					strcat( DialogStrgEx, ""col_white"5. "col_balkanstory"Morate uneti dobro formulu zbog kvaliteta\n");
					strcat( DialogStrgEx, ""col_white"6. "col_balkanstory"Heroin se pravi u velikim kolicinama\n");
				}
				else if( OI[ OrgID ][ oControlType ] == CTIP_KOKAIN )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");

					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Kokain\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate da posadite i oberete drogu, zatim da je osusite\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da kupite sodu bikarbonu u marketu\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate da kupite destilovanu vodu u marketu\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate imati osuseni kokain kod sebe\n");
					strcat( DialogStrgEx, ""col_white"5. "col_balkanstory"Morate da napravite drogu u interieru\n");
					strcat( DialogStrgEx, ""col_white"6. "col_balkanstory"Moras uneti dobro formulu zbog kvaliteta\n");
					strcat( DialogStrgEx, ""col_white"7. "col_balkanstory"Kokain se pravi u manjim kolicinama\n");
				}
				else if( OI[ OrgID ][ oControlType ] == CTIP_BMETH )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");

					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Blue Methamphetamine\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate kupiti methylamin kod dokova\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da kupiti solnu kiselinu u apoteci\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate da kupite crveni fosfor u apoteci\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate da kupite sodu bikarbonu u marketu\n");
					strcat( DialogStrgEx, ""col_white"5. "col_balkanstory"Morate da napravite drogu u interieru\n");
					strcat( DialogStrgEx, ""col_white"6. "col_balkanstory"Moras uneti dobro formulu zbog kvaliteta\n");
					strcat( DialogStrgEx, ""col_white"7. "col_balkanstory"Blue Methamphetamine se pravi u manjim kolicinama\n");
				}
				else if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
				
					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Marihuana\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate kupiti sjeme\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da posadite sjeme\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate da oberete stabiljku\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate da osusite stabiljku\n");
				}
				else if( OI[ OrgID ][ oControlType ] == CTIP_CRACK )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");

					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Crack\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate da kupite sodu bikarbonu u marketu\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da kupite destilovanu vodu u marketu\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate imati gotov kokain kod sebe\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate da napravite drogu u interieru\n");
					strcat( DialogStrgEx, ""col_white"5. "col_balkanstory"Moras uneti dobro formulu zbog kvaliteta\n");
					strcat( DialogStrgEx, ""col_white"6. "col_balkanstory"Crack se pravi u manjim kolicinama\n");
				}
				else if( OI[ OrgID ][ oControlType ] == CTIP_METH )
				{
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");

					strcat( DialogStrgEx, ""col_balkanstory"Vrsta droge: "col_white"Methamphetamine\n\n");
					strcat( DialogStrgEx, ""col_white"1. "col_balkanstory"Morate da kupiti pseudo u apoteci\n");
					strcat( DialogStrgEx, ""col_white"2. "col_balkanstory"Morate da kupiti solnu kiselinu u apoteci\n");
					strcat( DialogStrgEx, ""col_white"3. "col_balkanstory"Morate da kupite crveni fosfor u apoteci\n");
					strcat( DialogStrgEx, ""col_white"4. "col_balkanstory"Morate da kupite sodu bikarbonu u marketu\n");
					strcat( DialogStrgEx, ""col_white"5. "col_balkanstory"Morate da napravite drogu u interieru\n");
					strcat( DialogStrgEx, ""col_white"6. "col_balkanstory"Moras uneti dobro formulu zbog kvaliteta\n");
					strcat( DialogStrgEx, ""col_white"7. "col_balkanstory"Methamphetamine se pravi u manjim kolicinama\n");
				}

				ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				#endif
			}
			case 1:
			{
				ShowPlayerDialog( playerid, dialog_UBACIUORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite ubaciti u vasu organizaciju", D_ODABERI, D_ODUSTANI);
			}
			case 2:
			{
				ShowPlayerDialog( playerid, dialog_IZBACIIZORG, DSI, D_NASLOV, "Unesite id igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI);
			}
			case 3:
			{
				ShowPlayerDialog( playerid, dialog_OFFIZBACIIZORG, DSI, D_NASLOV, "Unesite ime i prezime(Ime_Prezime) igraca kojeg zelite izbaciti iz vase organizacije", D_ODABERI, D_ODUSTANI); }
			case 4:
			{
				ShowPlayerDialog( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);
			}
			case 5:
			{
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				new OrgID = PlayerInfo[ playerid ][ xLider ];
				format( DialogStrgEx, sizeof( DialogStrgEx ), "Lider 1: %s\nLider 2: %s\nClan 1: %s\nClan 2: %s\nClan 3: %s\nClan 4: %s\nClan 5: %s\nClan 6: %s\nClan 7: %s\nClan 8: %s\nClan 9: %s\nClan 10: %s\nClan 11: %s\nClan 12: %s\nClan 13: %s\nClan 14: %s\nClan 15: %s\nClan 16: %s\nClan 17: %s\nClan 18: %s\nClan 19: %s\nClan 20: %s\nClan 21: %s\nClan 22: %s\nClan 23: %s\nClan 24: %s\nClan 25: %s\nClan 26: %s\nClan 27: %s\nClan 28: %s\nClan 29: %s\nClan 30: %s" ,
					OI[ OrgID ][ oLider1 ],
					OI[ OrgID ][ oLider2 ],
					OI[ OrgID ][ oClan1 ],
					OI[ OrgID ][ oClan2 ],
					OI[ OrgID ][ oClan3 ],
					OI[ OrgID ][ oClan4 ],
					OI[ OrgID ][ oClan5 ],
					OI[ OrgID ][ oClan6 ],
					OI[ OrgID ][ oClan7 ],
					OI[ OrgID ][ oClan8 ],
					OI[ OrgID ][ oClan9 ],
					OI[ OrgID ][ oClan10 ],
					OI[ OrgID ][ oClan11 ],
					OI[ OrgID ][ oClan12 ],
					OI[ OrgID ][ oClan13 ],
					OI[ OrgID ][ oClan14 ],
					OI[ OrgID ][ oClan15 ],
					OI[ OrgID ][ oClan16 ],
					OI[ OrgID ][ oClan17 ],
					OI[ OrgID ][ oClan18 ],
					OI[ OrgID ][ oClan19 ],
					OI[ OrgID ][ oClan20 ],
					OI[ OrgID ][ oClan21 ],
					OI[ OrgID ][ oClan22 ],
					OI[ OrgID ][ oClan23 ],
					OI[ OrgID ][ oClan24 ],
					OI[ OrgID ][ oClan25 ],
					OI[ OrgID ][ oClan26 ],
					OI[ OrgID ][ oClan27 ],
					OI[ OrgID ][ oClan28 ],
					OI[ OrgID ][ oClan29 ],
					OI[ OrgID ][ oClan30 ] );
				ShowPlayerDialog( playerid, 0, DSMSG, "Clanovi", DialogStrgEx, "U redu", "" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
			}
			case 6:
			{
				//if( GetFactionType( playerid ) == ORG_TIP_PD && GetFactionType( playerid ) == ORG_TIP_MD && GetFactionType( playerid ) == ORG_TIP_CNN && GetFactionType( playerid ) == ORG_TIP_HITM && GetFactionType( playerid ) == ORG_TIP_ELEK && GetFactionType( playerid ) == ORG_TIP_TAXI ) return GRESKA( playerid, "Niste u mogucnosti koristiti ovu sekciju." );
				ShowPlayerDialog( playerid, dialog_WAR, DSL, D_NASLOV, "Zakazi War\nPozovi u War\nIzbaci iz Wara", D_ODABERI, D_ODUSTANI );
			}
			case 7:
			{
				#if nerp_droga == 1
				ShowPlayerDialog( playerid, dialog_LIDER_2, DSL, D_NASLOV, "Lokacija sadnje droge\nLokacija kupovine opiuma\nLokacija kupovine metilamina\nLokacija kupovine sjemena", D_ODABERI, D_ODUSTANI );
				#endif
			}
			case 8:
			{
				LiderSkins[playerid] = 1;
				if( GetNearestOrganization( playerid ) != PlayerInfo[playerid][xLider] ) return GRESKA( playerid, "Morate biti na pickupu vase organizacije!" );
				ShowPlayerDialog( playerid, dialog_ORGRANKS, DSL, D_NASLOV, "Rank 1\nRank 2\nRank 3\nRank 4\nRank 5\nRank 6", D_ODABERI, D_ODUSTANI );
			}
		}
	}
	#if nerp_droga == 1
	else if( dialogid == dialog_LIDER_2 && response )
	{
		new OrgID = PlayerInfo[ playerid ][ xLider ];
		switch( listitem )
		{
			case 0:
			{
				if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA || OI[ OrgID ][ oControlType ] == CTIP_KOKAIN  )
				{
					Dimi_SetPlayerCheckpoint( playerid, OI[ OrgID ][ oDrugField ][ 0 ], OI[ OrgID ][ oDrugField ][ 1 ], OI[ OrgID ][ oDrugField ][ 2 ], 3.0 );
					CheckpointStatus[ playerid ] = 15;
					SendInfoMessage( playerid, "Mjesto sadjenja vam je oznaceno na mapi!" );
				}
				else return GRESKA( playerid, "Vasa organizacija ne koristi ovo!" );
			}
			case 1:
			{
				if( OI[ OrgID ][ oControlType ] == CTIP_HEROIN )
				{
					Dimi_SetPlayerCheckpoint( playerid, 2834.8999, -2360.7681, 26.8931, 3.0 );
					CheckpointStatus[ playerid ] = 15;
					SendInfoMessage( playerid, "Mjesto kupovine opiuma oznaceno na mapi!" );
				}
				else return GRESKA( playerid, "Vasa organizacija ne koristi ovo!" );
			}
			case 2:
			{
				if( OI[ OrgID ][ oControlType ] == CTIP_BMETH )
				{
					Dimi_SetPlayerCheckpoint( playerid, 2834.8999, -2360.7681, 26.8931, 3.0 );
					CheckpointStatus[ playerid ] = 15;
					SendInfoMessage( playerid, "Mjesto kupovine metilamina oznaceno na mapi!" );
				}
				else return GRESKA( playerid, "Vasa organizacija ne koristi ovo!" );
			}
			case 3:
			{
				if( OI[ OrgID ][ oControlType ] == CTIP_MARIHUANA || OI[ OrgID ][ oControlType ] == CTIP_KOKAIN )
				{
					Dimi_SetPlayerCheckpoint( playerid, 2611.9219,-1487.3353,16.5110, 3.0 );
					CheckpointStatus[ playerid ] = 15;
					SendInfoMessage( playerid, "Mjesto kupovine sjemena oznaceno na mapi!" );
				}
				else return GRESKA( playerid, "Vasa organizacija ne koristi ovo!" );
			}
		}
	}
	#endif
	else if( dialogid == dialog_UBACIUORG && response )
	{
		new igrac;
		if( sscanf( inputtext, "u", igrac ) ) return GRESKA( playerid, "Pogresan ID!" );
		if( igrac == INVALID_PLAYER_ID ) return GRESKA( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( PlayerInfo[ igrac ][ xClan ] != 0 ) return GRESKA( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xLider ] != 0 ) return GRESKA( playerid, "Igrac je vec clan organizacije!" );
		if( PlayerInfo[ igrac ][ xLevel ] < 3 ) return GRESKA( playerid, "Za ulaz u organizacuju potreban je level 3." );
		if( PlayerInfo[ igrac ][ xKazneniUgovor ] != 0 ) return GRESKA( playerid, "Igrac ima kazneni ugovor napustanja organizacije!");
		new OrgID = PlayerInfo[ playerid ][ xLider ];
		if( OI[ OrgID ][ oUbacenihClanova ] >= OI[ OrgID ][ oMaxClanova ] ) return GRESKA( playerid, "Vec imate %d clanova ne mozete vise!", OI[ OrgID ][ oMaxClanova ] );
		new ImaFajl[ 40 ];
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Tvoja organizacija ne postoji u bazi." );
		
		PonudioIgrac[ igrac ] = playerid;
		
		new string[ 512 ];
		format( string, sizeof( string ), "Lider %s vas poziva u organizaciju %s.\nAko zelite uci u organizaciju kliknite 'Prihvati'.\nAko ne zelite uci u organizaciju kliknite 'Odustani'", ImeIgraca( playerid ), getOrgName( OrgID ) );
		
		ShowPlayerDialog( igrac, dialog_UBACIUORG_2, DSMSG, "Organizacija", string, "Prihvati", "Odustani" );
	}
	else if( dialogid == dialog_UBACIUORG_2 )
	{
		if( response )
		{
			new igrac = PonudioIgrac[ playerid ];

			new OrgID = PlayerInfo[ igrac ][ xLider ];
			new ImaFajl[ 40 ];
			format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
			if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Ova organizacija ne postoji u bazi." );

			if( !strcmp( OI[ OrgID ][ oClan1 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan1 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan2 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan2 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan3 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan3 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan4 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan4 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan5 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan5 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan6 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan6 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan7 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan7 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan8 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan8 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan9 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan9 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan10 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan10 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan11 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan11 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan12 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan12 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan13 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan13 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan14 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan14 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan15 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan15 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan16 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan16 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan17 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan17 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan18 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan18 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan19 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan19 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan20 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan20 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan21 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan21 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan22 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan22 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan23 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan23 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan24 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan24 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan25 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan25 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan26 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan26 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan27 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan27 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan28 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan28 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan29 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan29 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else if( !strcmp( OI[ OrgID ][ oClan30 ], "Niko", true ) ) { strmid( OI[ OrgID ][ oClan30 ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), ORG_CLAN  ); }
			else return GRESKA( playerid, "Ova organizacija ima maksimalni broj clanova!" );

			OI[ OrgID ][ oUbacenihClanova ]++;
			PlayerInfo[ playerid ][ xClan ] = OrgID;
			PlayerInfo[ playerid ][ xRank ] = 1;
			PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA;
			
			if( PlayerInfo[ playerid ][ xPol ] == 1 )
			{
				PlayerInfo[ playerid ][ xSkin ] = OI[ OrgID ][ oSkin1 ]; SetPlayerSkin( playerid, OI[ OrgID ][ oSkin1 ] );
			}
			else if( PlayerInfo[ igrac ][ xPol ] == 2 )
			{
				PlayerInfo[ playerid ][ xSkin ] = OI[ OrgID ][ oZSkin1 ]; SetPlayerSkin( playerid, OI[ OrgID ][ oZSkin1 ] );
			}

			PlayerInfo[ playerid ][ xOrgUgovor ] = 0; SavePlayer( playerid ); SaveOrganization( OrgID );
			SendInfoMessage( playerid, "Cestitamo, postali ste clan organizacije %s.", getOrgName( OrgID ) );
			SendInfoMessage( igrac, "Igrac %s je prihvatio vas poziv u organizaciju!", ImeIgraca( playerid ) );
			
			PonudioIgrac[ playerid ] = -1;
		}
		else if( !response )
		{
			new igrac = PonudioIgrac[ igrac ];
			
			if( igrac != -1 )
			{
				SendInfoMessage( igrac, "Igrac %s je odbio vas poziv u organizaciju!", ImeIgraca( playerid ) );
			}
			
			SendInfoMessage( playerid, "Odbili ste poziv u organizaciju!" );
			PonudioIgrac[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_OFFIZBACIIZORG && response )
	{
		new imeigraca[ 24 ], ifile[ 64 ], OrgID = PlayerInfo[ playerid ][ xLider ];
		if( sscanf( inputtext, "s[24]", imeigraca ) ) return GRESKA( playerid, "Pogresno ime igraca!" );
		format( ifile, 64, I_FILE, imeigraca );
		if( !fexist( ifile ) ) return GRESKA( playerid, "Taj igrac ne postoji u bazi podataka!");
		if( IsPlayerConnected( GetPlayerIdFromName( imeigraca ) ) )
		{
			GRESKA( playerid, "Izbacite ga online jer je na serveru!");
			return 1;
		}

		if( strcmp( imeigraca, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan14 ], true ) == 0) { strmid( OI[ OrgID ][ oClan14 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan15 ], true ) == 0) { strmid( OI[ OrgID ][ oClan15 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan16 ], true ) == 0) { strmid( OI[ OrgID ][ oClan16 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan17 ], true ) == 0) { strmid( OI[ OrgID ][ oClan17 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else if( strcmp( imeigraca, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		else return GRESKA( playerid, "Taj clan nije u tvojoj orgi." );

		OI[ OrgID ][ oUbacenihClanova ]--;
		new INI:File = INI_Open( ifile );
		INI_SetTag( File, "Informacije" );
		INI_WriteInt( File, "Clan", 0 );
		INI_WriteInt( File, "Rank", 0 );
		INI_WriteInt( File, "Skin", 29 );
		INI_WriteInt( File, "Spawn", 0 );
		INI_Close( File );
		SaveOrganization( OrgID );
		SendInfoMessage(playerid, "Clan %s je izbacen iz vase organizacije", imeigraca );
	}
	else if( dialogid == dialog_IZBACIIZORG && response )
	{
		new igrac, OrgID = PlayerInfo[ playerid ][ xLider ];
		if( sscanf( inputtext, "u", igrac ) ) return GRESKA( playerid, "Pogresan ID!" );
		if( igrac == INVALID_PLAYER_ID ) return GRESKA( playerid, "Pogresan ID ili je OFFLINE!" );
		if( igrac == playerid ) return GRESKA( playerid, "Ne mozes sebe izbaciti!" );
		if( PlayerInfo[ igrac ][ xClan ] != OrgID ) return GRESKA( playerid, "Igrac nije clan vase organizacije!" );
		if( PlayerInfo[ igrac ][ xLider ] > 0  ) return GRESKA( playerid, "Ne mozes njemu on je lider!" );
		new ImaFajl[ 40 ], name[ MAX_PLAYER_NAME ];
		GetPlayerName( igrac, name, sizeof( name ) );
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Tvoja organizacija ne postoji u bazi." );

		if( strcmp( name, OI[ OrgID ][ oClan1 ], true ) == 0) { strmid( OI[ OrgID ][ oClan1], "Niko", 0, strlen( "Niko" ), ORG_CLAN); }
		if( strcmp( name, OI[ OrgID ][ oClan2 ], true ) == 0) { strmid( OI[ OrgID ][ oClan2 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan3 ], true ) == 0) { strmid( OI[ OrgID ][ oClan3 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan4 ], true ) == 0) { strmid( OI[ OrgID ][ oClan4 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan5 ], true ) == 0) { strmid( OI[ OrgID ][ oClan5 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan6 ], true ) == 0) { strmid( OI[ OrgID ][ oClan6 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan7 ], true ) == 0) { strmid( OI[ OrgID ][ oClan7 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan8 ], true ) == 0) { strmid( OI[ OrgID ][ oClan8 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan9 ], true ) == 0) { strmid( OI[ OrgID ][ oClan9 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan10 ], true ) == 0) { strmid( OI[ OrgID ][ oClan10 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan11 ], true ) == 0) { strmid( OI[ OrgID ][ oClan11 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan12 ], true ) == 0) { strmid( OI[ OrgID ][ oClan12 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan13 ], true ) == 0) { strmid( OI[ OrgID ][ oClan13 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan18 ], true ) == 0) { strmid( OI[ OrgID ][ oClan18 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan19 ], true ) == 0) { strmid( OI[ OrgID ][ oClan19 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan20 ], true ) == 0) { strmid( OI[ OrgID ][ oClan20 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan21 ], true ) == 0) { strmid( OI[ OrgID ][ oClan21 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan22 ], true ) == 0) { strmid( OI[ OrgID ][ oClan22 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan23 ], true ) == 0) { strmid( OI[ OrgID ][ oClan23 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan24 ], true ) == 0) { strmid( OI[ OrgID ][ oClan24 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan25 ], true ) == 0) { strmid( OI[ OrgID ][ oClan25 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan26 ], true ) == 0) { strmid( OI[ OrgID ][ oClan26 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan27 ], true ) == 0) { strmid( OI[ OrgID ][ oClan27 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan28 ], true ) == 0) { strmid( OI[ OrgID ][ oClan28 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan29 ], true ) == 0) { strmid( OI[ OrgID ][ oClan29 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }
		if( strcmp( name, OI[ OrgID ][ oClan30 ], true ) == 0) { strmid( OI[ OrgID ][ oClan30 ], "Niko", 0, strlen( "Niko" ), ORG_CLAN ); }


		ResetAllWeapons( igrac );
		OI[ OrgID ][ oUbacenihClanova ]--;
		PlayerInfo[ igrac ][ xClan ] = 0; PlayerInfo[ igrac ][ xRank ] = 0; PlayerInfo[ igrac ][ xSpawn ] = SetRandomSpawn( igrac );
		PlayerInfo[ igrac ][ xOrgUgovor ] = 0; SavePlayer( igrac ); PlayerInfo[ igrac ][ xSkin ] = SetSexSkin( igrac ); SetPlayerSkin( igrac, SetSexSkin( igrac ) );
		SendClientMessageEx( igrac, CRVENA, "Lider vas je izbacio iz organizacije %s!", getOrgName( OrgID ) ); SaveOrganization( OrgID );
		SendClientMessageEx( playerid, CRVENA, "Clan %s je izbacen iz organizacije!", ImeIgraca( igrac ) );
	}
	else if( dialogid == dialog_DODELIRANK && response )
	{
		new clan, OrgID = PlayerInfo[ playerid ][ xLider ], rank;
		if( sscanf( inputtext, "ui", clan, rank ) ) return ShowPlayerDialog( playerid, dialog_DODELIRANK, DSI, D_NASLOV, "Unesite id igraca i broj ranka koji zelite da date igracu", D_ODABERI, D_ODUSTANI);
		if( clan == IPI ) return GRESKA( playerid, "Igrac nije online ili si ukucao pogresan ID!" );
		if( clan == playerid ) return GRESKA( playerid, "Ne mozes sam sebi." );
		if( PlayerInfo[ clan ][ xClan ] != OrgID ) return GRESKA( playerid, "Igrac nije clan vase organizacije!" );
		if( PlayerInfo[ clan ][ xLider ] == OrgID ) return GRESKA( playerid, "Ne mozes drugom lideru skinuti rank." );
		if( PlayerInfo[ clan ][ xLider ] > 0  ) return GRESKA( playerid, "Ne mozes njemu on je lider!" );
		new ImaFajl[ 40 ];
		format( ImaFajl, sizeof( ImaFajl ), O_FILE, OrgID );
		if( !fexist( ImaFajl ) ) return GRESKA( playerid, "Tvoja organizacija ne postoji u bazi." );
		if( rank < 1 || rank > 6 ) return GRESKA( playerid, "Ne mozes ispod 1 i iznad 6!" );

		if( PlayerInfo[ clan ][ xPol ] == 1 )
		{
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin1 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin2 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin2 ] ); }
			else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin3 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin3 ] ); }
			else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin4 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin4 ] ); }
			else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin5 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin5 ] ); }
			else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oSkin6 ]; SetPlayerSkin( clan, OI[ OrgID ][ oSkin6 ] ); }
		}
		else if( PlayerInfo[ clan ][ xPol ] == 2 )
		{
			if( rank == 1 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin1 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin1 ] ); }
			else if( rank == 2 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin2 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin2 ] ); }
			else if( rank == 3 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin3 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin3 ] ); }
			else if( rank == 4 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin4 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin4 ] ); }
			else if( rank == 5 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin5 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin5 ] ); }
			else if( rank == 6 ) { PlayerInfo[ clan ][ xSkin ] = OI[ OrgID ][ oZSkin6 ]; SetPlayerSkin( clan, OI[ OrgID ][ oZSkin6 ] ); }
		}

		PlayerInfo[ clan ][ xRank ] = rank; SavePlayer( clan );
		SendInfoMessage( clan, "Lider vam je dao rank %d!", rank );
		SendInfoMessage( playerid, "Dali ste clanu %s rank %d!", ImeIgraca( clan ), rank );
	}
	else if( dialogid == dialog_FIRMA && response )
	{
		if( listitem == 0 )
		{
			new string[256];
			new id = PlayerInfo[ playerid ][ xFirmaID ];
			format(string, sizeof(string), ""col_crvena"Ime Firme : "col_white"%s\n\n"col_crvena"Novac : "col_white"%d\n\n"col_crvena"Fakture : "col_white"%d", BussinesInfo[ id ][ bName ], BussinesInfo[ id ][ bMoney ], BussinesInfo[ id ][ bFacture ] );
			ShowPlayerDialog( playerid, dialog_FINFO, DSMSG, D_NASLOV, string, D_ODABERI, D_ODUSTANI ); }
		if( listitem == 1 )
		{
			ShowPlayerDialog( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 2 )
		{
			ShowPlayerDialog( playerid, dialog_FLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" ); }
		if( listitem == 3 )
		{
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");
			ShowPlayerDialog( playerid, dialog_FPMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da podignete..", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 4 )
		{
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");
			ShowPlayerDialog( playerid, dialog_FOMONEY, DSI, D_NASLOV, "Molimo vas da unesete koliko zelite novca da ostavite...", D_ODABERI, D_ODUSTANI ); }
		if( listitem == 5 )
		{
		
			if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return GRESKA( playerid, "Ne posedujes firmu!");
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");

			ShowPlayerDialog( playerid, dialog_FIRMASELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu firmu drzavi?", "Da", "Ne" );
		}
		if( listitem == 6 )
		{
		
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");

			ShowPlayerDialog( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu firme", "Ponudi", D_ODUSTANI );
		}
		if( listitem == 7 )
		{
		
			new id = PlayerInfo[ playerid ][ xFirmaID ];
			
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");
			
			if( !KupljeneFakture[ playerid ] ) return GRESKA( playerid, "Niste kupili fakture." );
			
			KupljeneFakture[ playerid ] = false;

			BussinesInfo[ id ][ bFacture ] += 5;
			
			SaveBussines( id );
			SendInfoMessage( playerid, "Uspjesno si ubacio 5 faktura u biznis, trenutno imas %d!", BussinesInfo[ id ][ bFacture ] );
			Bussines_Refresh( id );

		}
	}
	else if( dialogid == dialog_FIRMASELLDRZAVA ) {
	
		if( response ) {
		
			new id = PlayerInfo[ playerid ][ xFirmaID ];
			if( PlayerInfo[ playerid ][ xFirmaID ] == -1 ) return GRESKA( playerid, "Ne posedujes firmu!");
			if( GetNearestBussines( playerid ) != PlayerInfo[ playerid ][ xFirmaID ] ) return GRESKA( playerid, "Niste blizu ulaza firme!");
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			BussinesInfo[ id ][ bOwned ] = 0;
			BussinesInfo[ id ][ bNeaktivnost ] = 0;
			BussinesInfo[ id ][ bFacture ] = 100;
			strmid( BussinesInfo[ id ][ bOwner], "Drzava", 0, strlen( "Drzava" ), 32);
			BussinesInfo[ id ][ bLocked ] = 1;
			DajIgracuNovac( playerid, BussinesInfo[ id ][ bPrice ]/2 );
			PlayerInfo[ playerid ][ xFirmaID ] = -1;
			SaveBussines( id );
			SendInfoMessage( playerid, "Firma uspjesno prodana!" );
			Bussines_Refresh( id );
			SavePlayer( playerid );
		}
		if( !response ) {
			SendClientMessagee( playerid, -1, "Odustali ste od prodaje firme drzavi." );
		}
	}
	else if( dialogid == dialog_FIRMASELLTP ) {
		if( !response ) return 1;
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas firmu dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xFirmaID ];
			new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_FIRMASELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu firme", "Ponudi", D_ODUSTANI );
			GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return GRESKA( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return GRESKA( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return GRESKA( playerid, "Unijeli ste pogresan ID igraca, isti nije dostupan - pokusajte ponovno kasnije!" );
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati firmu!");
			if( PlayerInfo[ idigraca ][ xFirmaID ] != -1 )return GRESKA( playerid, "Igrac vec ima firmu!");
			if( PlayerInfo[ idigraca ][ xLevel ] < BussinesInfo[ id ][ bLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali firmu.", BussinesInfo[ id ][ bLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s firmu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu firmu za %d", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTFRIMA, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
		}
	}
	else if( dialogid == dialog_ACCEPTFRIMA ) {
		if( response ) {
			new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ];
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca.");

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao firmu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspjesno ste kupili firmu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xFirmaID ] = -1;
			PlayerInfo[ playerid ][ xFirmaID ] = id;
			strmid( BussinesInfo[ id ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveBussines( id ); Bussines_Refresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste firmu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendClientMessagee( playerid, -1, "Kupili ste firmu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu firme!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_FLOCK ) {
		new id = GetNearestBussines( playerid );
		if( id != PlayerInfo[ playerid ][ xFirmaID ]) return GRESKA( playerid, "Ovo nije tvoja firma");
		if( response ) {
			BussinesInfo[ id ][ bLocked ] = 0;
			announcement( playerid, "Firma ~g~otkljucana!", 3000, 3 );
			SaveBussines( id ); }
		else {
			BussinesInfo[ id ][ bLocked ] = 1;
			announcement( playerid, "Firma ~r~zakljucana!", 3000, 3 );
			SaveBussines( id ); }
	}
	else if( dialogid == dialog_FCNAME && response ) {
		new IDFirme = PlayerInfo[ playerid ][ xFirmaID ], imefirme[64];
		if( IDFirme == -1 ) return GRESKA( playerid, "Ne posedujes firmu!");
		if( sscanf( inputtext, "s[64]", imefirme ) ) return ShowPlayerDialog( playerid, dialog_FCNAME, DSI, D_NASLOV, "Molimo vas da unesete novo ime koje zelite.", D_ODABERI, D_ODUSTANI );
		strmid( BussinesInfo[ IDFirme ][ bName ], imefirme, 0, strlen( imefirme ), 64);
		SaveBussines( IDFirme ); Bussines_Refresh( IDFirme );
		SendInfoMessage( playerid, "Uspjesno si promenio ime firme." );
	}
	else if( dialogid == dialog_FOMONEY ) {
		if( !response ) return true;
		if( response )
		{
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return GRESKA( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return GRESKA( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
			if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return GRESKA( playerid, "Nemate toliko novca kod sebe!");
			DajIgracuNovac( playerid, -iznos ); BussinesInfo[ IDFirme ][ bMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu firme!", iznos );
			SaveBussines( IDFirme );
			SavePlayer( playerid ); }
	}
	else if( dialogid == dialog_FPMONEY ) {
		if( !response ) return true;
		if( response ) {
			new iznos, IDFirme = PlayerInfo[ playerid ][ xFirmaID ];
			if( sscanf(inputtext, "i", iznos)) return GRESKA( playerid, "Niste uneli kolicinu novca za ostavljanje!");
			if( iznos < 1 || iznos > 10000) return GRESKA( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
			if( iznos > BussinesInfo[ IDFirme ][ bMoney ] ) return GRESKA( playerid, "Nemate toliko novca u kasi!");
			DajIgracuNovac( playerid, iznos ); BussinesInfo[ IDFirme ][ bMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase firme!", iznos );
			SaveBussines( IDFirme );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_RESTORAN ) {
		if( !response ) return 1;
		new string[50];
		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return GRESKA( playerid, "Nemate dovoljno novca 150$!");
				DajIgracuGlad( playerid, 22 );
				BussinesMoney( uFirmi[ playerid ] , 150 );
				DajIgracuNovac( playerid, -150 );
				
				format(string, sizeof(string), "* %s jede juhu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 220) return GRESKA( playerid, "Nemate dovoljno novca 220$!");
				BussinesMoney( uFirmi[ playerid ] , 220 );
				DajIgracuGlad( playerid, 25 );
				DajIgracuNovac( playerid, -220 );
				
				format(string, sizeof(string), "* %s jede Piletinu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 350) return GRESKA( playerid, "Nemate dovoljno novca 350$!");
				BussinesMoney( uFirmi[ playerid ] , 350 );
				DajIgracuGlad( playerid, 26 );
				DajIgracuNovac( playerid, -350 );
				
				format(string, sizeof(string), "* %s jede pecenog morskog psa na salati.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 410) return GRESKA( playerid, "Nemate dovoljno novca 410$!");
				BussinesMoney( uFirmi[ playerid ] , 410 );
				DajIgracuNovac( playerid, -410);
				DajIgracuGlad( playerid, 28 );
				
				format(string, sizeof(string), "* %s jede spagete.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 630) return GRESKA( playerid, "Nemate dovoljno novca 630$!");
				BussinesMoney( uFirmi[ playerid ] , 630 );
				DajIgracuNovac( playerid, -630 );
				DajIgracuGlad( playerid, 30 );
				format(string, sizeof(string), "* %s jede kolac.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return GRESKA( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 50 );
				DajIgracuNovac( playerid, -50 );
				
				DajIgracuGlad( playerid, 5 );
				format(string, sizeof(string), "* %s pije coca colu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return GRESKA( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 25 );
				DajIgracuNovac( playerid, -25 );
				DajIgracuGlad( playerid, 2 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_CLUCKIN)
	{
		if( !response ) return 1;
		new string[50];
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return GRESKA( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 90 );
				DajIgracuNovac( playerid, -100 );
				
				DajIgracuGlad( playerid, 8 );
				format(string, sizeof(string), "* %s jede Topli Sendvic.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return GRESKA( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ], 120 );
				DajIgracuNovac( playerid, -150 );
				
				DajIgracuGlad( playerid, 10 );
				format(string, sizeof(string), "* %s jede Cevape.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return GRESKA( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 100 );
				DajIgracuNovac( playerid, -100 );
				
				DajIgracuGlad( playerid, 8 );
				format(string, sizeof(string), "* %s jede Filete.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return GRESKA( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ], 80 );
				DajIgracuNovac( playerid, -100 );
				DajIgracuGlad( playerid, 6 );
				format(string, sizeof(string), "* %s jede Vocnu salatu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return GRESKA( playerid, "Nemate dovoljno novca 120$!");
				BussinesMoney( uFirmi[ playerid ], 100 );
				DajIgracuNovac( playerid, -120 );
				DajIgracuGlad( playerid, 10 );
				
				format(string, sizeof(string), "* %s jede Kebab.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return GRESKA( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ], 40 );
				DajIgracuNovac( playerid, -50 );
				DajIgracuGlad( playerid, 1 );
				
				format(string, sizeof(string), "* %s pije sprite.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return GRESKA( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ], 10 );
				DajIgracuNovac( playerid, -25 );
				DajIgracuGlad( playerid, 1 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
		}
	}
	else if( dialogid == dialog_PIZZA ) {
	
		if( !response ) return 1;
		
		new string[50];
		switch( listitem )
		{
			case 0:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 100) return GRESKA( playerid, "Nemate dovoljno novca 100$!");
				BussinesMoney( uFirmi[ playerid ] , 100);
				DajIgracuNovac( playerid, -100 );
				DajIgracuGlad( playerid, 9 );
				
				format(string, sizeof(string), "* %s jede Pizzetu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 1:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return GRESKA( playerid, "Nemate dovoljno novca 150$!");
				BussinesMoney( uFirmi[ playerid ] , 150);
				DajIgracuNovac( playerid, -150 );
				DajIgracuGlad( playerid, 11 );
				
				format(string, sizeof(string), "* %s jede Veliku pizzu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 2:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 45) return GRESKA( playerid, "Nemate dovoljno novca 45$!");
				BussinesMoney( uFirmi[ playerid ] , 40);
				DajIgracuNovac( playerid, -45 );
				
				DajIgracuGlad( playerid, 4 );
				format(string, sizeof(string), "* %s jede Topli sendvic.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 3:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 40) return GRESKA( playerid, "Nemate dovoljno novca 40$!");
				BussinesMoney( uFirmi[ playerid ] , 40);
				DajIgracuNovac( playerid, -40 );
				DajIgracuGlad( playerid, 4 );
				format(string, sizeof(string), "* %s jede salatu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 4:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 250) return GRESKA( playerid, "Nemate dovoljno novca 250$!");
				BussinesMoney( uFirmi[ playerid ] , 230);
				DajIgracuNovac( playerid, -250 );
				DajIgracuGlad( playerid, 16 );
				
				format(string, sizeof(string), "* %s jede Jumbo Pizzu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0);
				SavePlayer( playerid );
			}
			case 5:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 50) return GRESKA( playerid, "Nemate dovoljno novca 50$!");
				BussinesMoney( uFirmi[ playerid ] , 45);
				DajIgracuNovac( playerid, -50 );
				DajIgracuGlad( playerid, 3 );
				
				format(string, sizeof(string), "* %s pije Sprite.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
			case 6:
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 25) return GRESKA( playerid, "Nemate dovoljno novca 25$!");
				BussinesMoney( uFirmi[ playerid ] , 20);
				DajIgracuNovac( playerid, -25 );
				DajIgracuGlad( playerid, 1 );
				format(string, sizeof(string), "* %s pije vodu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, string, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
				SavePlayer( playerid );
			}
		}
	}
	else if( dialogid == dialog_DRINK ) {
	
		new drunklevel = GetPlayerDrunkLevel( playerid );
		if( !response ) return 1;

		switch( listitem ) {
			case 0: {
				if( PlayerInfo[ playerid ][ xNovac ] < 200) return GRESKA( playerid, "Nemate dovoljno novca 200$!");

				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ] , 200 );
				else BussinesRodaMoney( 200 );

				DajIgracuNovac( playerid, -200 );
				DajIgracuGlad( playerid, 15 );
				SetPlayerDrunkLevel( playerid, drunklevel + 1000);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije viski.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
			}
			case 1: {
				if( PlayerInfo[ playerid ][ xNovac ] < 170) return GRESKA( playerid, "Nemate dovoljno novca 170$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 170 );
				else BussinesRodaMoney( 170 );
				DajIgracuNovac( playerid, -170 );
				DajIgracuGlad( playerid, 14 );
				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije vodku.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 2: {
				if( PlayerInfo[ playerid ][ xNovac ] < 85) return GRESKA( playerid, "Nemate dovoljno novca 85$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 85 );
				else BussinesRodaMoney( 85 );

				DajIgracuNovac( playerid, -85 );
				DajIgracuGlad( playerid, 8 );
				SetPlayerDrunkLevel( playerid, drunklevel + 200);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Heineken pivo.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 3: {
				if( PlayerInfo[ playerid ][ xNovac ] < 120) return GRESKA( playerid, "Nemate dovoljno novca 120$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 120 );
				else BussinesRodaMoney( 120 );

				DajIgracuNovac( playerid, -120 );
				DajIgracuGlad( playerid, 9 );
				SetPlayerDrunkLevel( playerid, drunklevel + 800);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Konjak.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 4: {
				if( PlayerInfo[ playerid ][ xNovac ] < 150) return GRESKA( playerid, "Nemate dovoljno novca 150$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 150 );
				else BussinesRodaMoney( 150 );

				DajIgracuNovac( playerid, -150 );
				DajIgracuGlad( playerid, 10 );
				SetPlayerDrunkLevel( playerid, drunklevel + 500);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije tekilu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 5: {
				if( PlayerInfo[ playerid ][ xNovac ] < 290) return GRESKA( playerid, "Nemate dovoljno novca 290$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 290 );
				else BussinesRodaMoney( 290 );

				DajIgracuNovac( playerid, -290 );
				DajIgracuGlad( playerid, 18 );
				SetPlayerDrunkLevel( playerid, drunklevel + 700);
				if( drunklevel > 2000 ) {
					announcement( playerid, "~p~Pijani ste", 3500, 1);
				}
				format( globalstring, sizeof( globalstring ), "* %s pije Jack Daniels.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_WINE);
			}
			case 6: {
				if( PlayerInfo[ playerid ][ xNovac ] < 60 )  return GRESKA( playerid, "Nemate dovoljno novca 60$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 60 );
				else BussinesRodaMoney( 60 );

				DajIgracuNovac( playerid, -60 );
				DajIgracuGlad( playerid, 3 );
				format( globalstring, sizeof( globalstring ), "* %s pije mineralnu vodu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 7: {
				if( PlayerInfo[ playerid ][ xNovac ] < 80 ) return GRESKA( playerid, "Nemate dovoljno novca 80$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 80 );
				else BussinesRodaMoney( 80 );

				DajIgracuNovac( playerid, -80 );
				DajIgracuGlad( playerid, 4 );
				format( globalstring, sizeof( globalstring ), "* %s pije Cedevitu od Narandze.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
			case 8: {
				if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return GRESKA( playerid, "Nemate dovoljno novca 50$!");
				if( uFirmi[ playerid ] != -1 ) BussinesMoney( uFirmi[ playerid ], 50 );
				else BussinesRodaMoney( 50 );

				DajIgracuNovac( playerid, -50 );
				DajIgracuGlad( playerid, 1 );
				format( globalstring, sizeof( globalstring ), "* %s pije coca colu.", ImeIgraca( playerid ) );
				PorukaRadius(15.0, playerid, globalstring, LJUBICASTA );
				SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK);
			}
		}
	}
	else if( dialogid == dialog_GUNSHOP )
	{
	
		if( response )
		{
		
			switch( listitem )
			{
			
				case 0:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 1500 ) return GRESKA( playerid, "Nemate dovoljno novca 1500$!");
					DajIgracuNovac( playerid, -1500 );
					GiveWeaponToPlayer( playerid, 4, 1);
					format( globalstring, sizeof( globalstring ), "* %s je kupio noz.", ImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 750);
				}
				case 1:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 1000) return GRESKA( playerid, "Nemate dovoljno novca 1000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio bassebal bat.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 250);
				}
				case 2:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 5000) return GRESKA( playerid, "Nemate dovoljno novca 5000$!");
					DajIgracuNovac( playerid, -5000 );
					GiveWeaponToPlayer( playerid, 22, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Pistol 9mm.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 1250 );
				}
				case 3:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 8000) return GRESKA( playerid, "Nemate dovoljno novca 8000$!");
					DajIgracuNovac( playerid, -8000 );
					GiveWeaponToPlayer( playerid, 24, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Desert Eagle.", ImeIgraca( playerid ) );
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 2500 );
				}
				case 4:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 12000) return GRESKA( playerid, "Nemate dovoljno novca 12000$!");
					DajIgracuNovac( playerid, -12000 );
					GiveWeaponToPlayer( playerid, 25, 50 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio Shotgun.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 4000 );
				}
				case 5:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 16000) return GRESKA( playerid, "Nemate dovoljno novca 16000$!");
					DajIgracuNovac( playerid, -16000 );
					GiveWeaponToPlayer( playerid, 29, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio MP5.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 6000 );
				}
				case 6:
				{

					if( PlayerInfo[ playerid ][ xNovac ] < 20000) return GRESKA( playerid, "Nemate dovoljno novca 20000$!");
					DajIgracuNovac( playerid, -20000 );
					GiveWeaponToPlayer( playerid, 31, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio M4.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );

					BussinesMoney( uFirmi[ playerid ], 6000 );
				}
				case 7:
				{
				
					if( PlayerInfo[ playerid ][ xNovac ] < 10000) return GRESKA( playerid, "Nemate dovoljno novca 10000$!");
					DajIgracuNovac( playerid, -10000 );
					Dimi_SetPlayerArmour( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je kupio pancir.", ImeIgraca( playerid ));
					PorukaRadius( 8.0, playerid, globalstring, LJUBICASTA );
					
					BussinesMoney( uFirmi[ playerid ], 5000 );
				}
			}
		}
	}
	else if( dialogid == dialog_M_ISPIT)
	{
		if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 1)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 2)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 3)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 4)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_M_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_M_POLAGANJE") == 5)
		{
			if( response )
			{
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 4)
				{
					DeletePVar( playerid, "dialog_M_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za motor.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xMotorska ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 4)
				{
					ShowPlayerDialog( playerid, dialog_M_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_M_POLAGANJE");
				}
			}
		}
	}
	else if( dialogid == dialog_A_ISPIT)
	{
		if(GetPVarInt( playerid, "dialog_POLAGANJE") == 1)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Da se smije voziti u alkoholiziranom stanju?", "Da", "Ne");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Da se smije voziti u alkoholiziranom stanju?", "Da", "Ne");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 2)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"U slucaju sudara pozvat cete policiju?", "Da", "Ne");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"U slucaju sudara pozvat cete policiju?", "Da", "Ne");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 3)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrsnici bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrsnici bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 4)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko vidite vozilo hite pomoci sa ukljucenom rotacijom iza vas vi cete?\n\n"col_crvena"A) "col_white"Blokirati joj put\n"col_crvena"B) "col_white"Skloniti se sa strane da prodje", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko vidite vozilo hite pomoci sa ukljucenom rotacijom iza vas vi cete?\n\n"col_crvena"A) "col_white"Blokirati joj put\n"col_crvena"B) "col_white"Skloniti se sa strane da prodje", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 5)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Ako je na semaforu crveno svjetlo vi cete?\n\n"col_crvena"A) "col_white"Zaustaviti se\n"col_crvena"B) "col_white"Nastaviti dalje", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Ako je na semaforu crveno svjetlo vi cete?\n\n"col_crvena"A) "col_white"Zaustaviti se\n"col_crvena"B) "col_white"Nastaviti dalje", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 6)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Ukoliko ste parkirali vozilo gdje stoji znak zabranjeno parkiranje vi cete\n\n"col_crvena"A) "col_white"Ostaviti tu vozilo\n"col_crvena"B) "col_white"Skloniti se sa tog mjesta", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Ukoliko ste parkirali vozilo gdje stoji znak zabranjeno parkiranje vi cete\n\n"col_crvena"A) "col_white"Ostaviti tu vozilo\n"col_crvena"B) "col_white"Skloniti se sa tog mjesta", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_POLAGANJE") == 7)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"U slucaju kvara na vozilu vi cete:\n\n"col_crvena"A) "col_white"Ostaviti vozilo na cesti\n"col_crvena"B) "col_white"Stati sa strane i pozvati mehanicara", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"U slucaju kvara na vozilu vi cete:\n\n"col_crvena"A) "col_white"Ostaviti vozilo na cesti\n"col_crvena"B) "col_white"Stati sa strane i pozvati mehanicara", "A", "B");
			}
		}
		else if( GetPVarInt( playerid, "dialog_POLAGANJE") == 8 )
		{
		
			if( response )
			{
			
				if( PolaganjeBodovi[ playerid ]  >= 7 )
				{
				
					DeletePVar( playerid, "dialog_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Polozili ste testove sa "col_balkanstory"%d "col_white"bodova.\nSada idite ispred auto skole i udjite u vozilo!", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Vozacki ispit !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 0; SavePlayer( playerid );
					Polaganje[ playerid ] = 1; CheckpointStatus[ playerid ] = 13; GreskaVoznja[ playerid ] = 0;
					Dimi_SetPlayerCheckpoint( playerid, 2084.1853,-1843.5427,13.3828, 5.0 );
					SendInfoMessage( playerid, "Izadjite iz auto skole i sjednite u slobodno vozilo!");
					SendInfoMessage( playerid, "Max dozvoljena brzina je 100km/h i imate pravo na 3 greske!");
				}
				else if( PolaganjeBodovi[ playerid ]  < 7 )
				{
				
					ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Vozacki ispit", "Niste imali dovoljno bodova za prolazak i pali ste", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
			}
			else if( !response ) {
			
				PolaganjeBodovi[ playerid ] ++;
				if( PolaganjeBodovi[ playerid ]  >= 7 ) {
				
					DeletePVar( playerid, "dialog_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Polozili ste testove sa "col_balkanstory"%d "col_white"bodova.\nSada idite ispred auto skole i udjite u vozilo!", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Vozacki ispit !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xVozacka ] = 0; SavePlayer( playerid );
					Polaganje[ playerid ] = 1; CheckpointStatus[ playerid ] = 13; GreskaVoznja[ playerid ] = 0;
					Dimi_SetPlayerCheckpoint( playerid, 2084.1853,-1843.5427,13.3828, 5.0 );
					SendInfoMessage( playerid, "Izadjite iz auto skole i sjednite u slobodno vozilo!");
					SendInfoMessage( playerid, "Max dozvoljena brzina je 100km/h i imate pravo na 3 greske!");
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_A_ISPIT , DSMSG, ""col_white"Vozacki ispit", "Niste imali dovoljno bodova za prolazak i pali ste", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_POLAGANJE");
					Polaganje[ playerid ] = 0;
				}
			}
		}
	}
	else if( dialogid == dialog_K_ISPIT)
	{
		if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 1)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 2)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 3)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 4)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 5)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti prije njega", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Ukoliko skrecete lijevo na raskrizju bez semafora vi cete\n\n"col_crvena"A) "col_white"Pustiti automobil iz suprotnog smera da prodje\n"col_crvena"B) "col_white"Skrenuti prije njega", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 6)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Ukoliko Vidite prometnu nesrecu sa ozljedenim osobama vi cete\n\n"col_crvena"A) "col_white"Zaustaviti se i pruziti prvu pomoc\n"col_crvena"B) "col_white"Nastaviti voziti", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_K_POLAGANJE") == 7)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_K_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Na raskrizju gde postoji semafor postujete?\n\n"col_crvena"A) "col_white"Pravila saobracaja\n"col_crvena"B) "col_white"Semafor", "A", "B");
			}
		}
		else if( GetPVarInt( playerid, "dialog_K_POLAGANJE" ) == 8 ) {
		
			if( response ) {
			
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
			}
			else if( !response ) {
			
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_K_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kombi.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC1 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_K_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_K_POLAGANJE");
				}
			}
		}
	}
	else if( dialogid == dialog_C2_ISPIT )
	{
		if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 1)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 2)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 3)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 4)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 5)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 6)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 7)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C2_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C2_POLAGANJE") == 8)
		{
			if( response )
			{
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kamion.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					PlayerInfo[ playerid ][ xKamionskaC2 ] = 1;
					SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_C2_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C2_POLAGANJE");
				}
			}
		}
	}
	else if( dialogid == dialog_C3_ISPIT )
	{
		if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 1)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 2);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 2", ""col_white"Kolika je dozvoljena brzina u naseljenim mjestima?", "120km/h", "70km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 2)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 3);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 3", ""col_white"Kolika je dozvoljena brzina u ne naseljenim mjestima?", "130km/h", "50km/h");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 3)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 4);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 4", ""col_balkanstory"Na raskrizju bez semafora prednost ima?\n\n"col_crvena"A) "col_white"Onaj koji mi je sa desne strane\n"col_crvena"B) "col_white"Onaj koji mi je sa lijeve strane", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 4)
		{
			if( response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 5);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 5", ""col_balkanstory"Ukoliko skrivite nesrecu vi cete\n\n"col_crvena"A) "col_white"Pozvati policiju i otici\n"col_crvena"B) "col_white"Pozvati policiju i pomoci ozlijedjenom", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 5)
		{
			if( response ) {
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
			}
			else if( !response ) {
			
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 6);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 6", ""col_balkanstory"Zabranjeno je da vozilom u saobrac'aju upravlja pod dejstvom alkohola vozac:\n\n"col_crvena"A) "col_white"Motornog vozila bilo koje kategorije \n"col_crvena"B) "col_white"Motornog vozila samo C i D kategorije ", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 6)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 7);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 7", ""col_balkanstory"Oznaka na vozilu kojom se oznacava da je vozilo upisano u jedinstveni registar vozila je:\n\n"col_crvena"A) "col_white"Registarska tablica \n"col_crvena"B) "col_white"Saobracajna dozvola", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 7)
		{
			if( response )
			{
				PolaganjeBodovi[ playerid ] ++;
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
			}
			else if( !response )
			{
				SetPVarInt( playerid, "dialog_C3_POLAGANJE", 8);
				ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Pitanje br. 8", ""col_balkanstory"Za vreme upravljanja vozilom, vozac kod sebe:\n\n"col_crvena"A) "col_white"Ne mora imati saobracajnu dozvolu \n"col_crvena"B) "col_white"Mora imati saobracajnu dozvolu", "A", "B");
			}
		}
		else if(GetPVarInt( playerid, "dialog_C3_POLAGANJE") == 8)
		{
			if( response )
			{
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1; SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
			}
			else if( !response )
			{
				PolaganjeBodovi[ playerid ] ++;
				if(PolaganjeBodovi[ playerid ]  >= 7)
				{
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
					format( globalstring, sizeof( globalstring ), ""col_white"Uspjesno ste polozili testove sa "col_balkanstory"%d "col_white"bodova.\nDobili ste dozvolu za kamion sa prikolicom.", PolaganjeBodovi[ playerid ] );
					ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Cestitamo !", globalstring, "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0; PlayerInfo[ playerid ][ xKamionskaC3 ] = 1; SavePlayer( playerid );
				}
				else if(PolaganjeBodovi[ playerid ]  < 7)
				{
					ShowPlayerDialog( playerid, dialog_C3_ISPIT , DSMSG, ""col_white"Zao nam je", "Nemate dovoljno za prolazak testova.", "Uredu", "");
					PolaganjeBodovi[ playerid ]  = 0;
					DeletePVar( playerid, "dialog_C3_POLAGANJE");
				}
			}
		}
	}
	else if( dialogid == dialog_PHARMACY )
	{
		if(response == 1)
		{
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return GRESKA( playerid, "Nemate dovoljno novca(50 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu solne kiseline.");
					DajIgracuNovac( playerid, -50 );
					PlayerInfo[ playerid ][ xSolna ] += 10;
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return GRESKA( playerid, "Nemate dovoljno novca(85 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste 5 pseudo tableta.");
					PlayerInfo[ playerid ][ xPseudo ] += 5;
					DajIgracuNovac( playerid, -85 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 65 ) return GRESKA( playerid, "Nemate dovoljno novca(65 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste galon crvenog fosfora.");
					PlayerInfo[ playerid ][ xCrveniF ] += 10;
					DajIgracuNovac( playerid, -65 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return GRESKA( playerid, "Nemate dovoljno novca(35 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu Lysergic acida.");
					PlayerInfo[ playerid ][ xLysAcid ] += 5;
					DajIgracuNovac( playerid, -35 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return GRESKA( playerid, "Nemate dovoljno novca(25 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste 10 tableta kalcijuma.");
					PlayerInfo[ playerid ][ xKalcij ] += 10;
					DajIgracuNovac( playerid, -25 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 5:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 45 ) return GRESKA( playerid, "Nemate dovoljno novca(45 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu Amonijum Hlorida.");
					PlayerInfo[ playerid ][ xAmonijH ] += 10;
					DajIgracuNovac( playerid, -45 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
		}
	}
	else if( dialogid == dialog_KUPOVINASUPSTANCI )
	{
		if(response == 1)
		{
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return GRESKA( playerid, "Nemate dovoljno novca(50 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu solne kiseline.");
					DajIgracuNovac( playerid, -50 );
					PlayerInfo[ playerid ][ xSolna ] += 10;
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 1:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return GRESKA( playerid, "Nemate dovoljno novca(85 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste 5 pseudo tableta.");
					PlayerInfo[ playerid ][ xPseudo ] += 5;
					DajIgracuNovac( playerid, -85 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 2:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 65 ) return GRESKA( playerid, "Nemate dovoljno novca(65 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste galon crvenog fosfora.");
					PlayerInfo[ playerid ][ xCrveniF ] += 10;
					DajIgracuNovac( playerid, -65 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return GRESKA( playerid, "Nemate dovoljno novca(35 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu Lysergic acida.");
					PlayerInfo[ playerid ][ xLysAcid ] += 5;
					DajIgracuNovac( playerid, -35 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 4:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 25 ) return GRESKA( playerid, "Nemate dovoljno novca(25 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste 10 tableta kalcijuma.");
					PlayerInfo[ playerid ][ xKalcij ] += 10;
					DajIgracuNovac( playerid, -25 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
				case 5:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 45 ) return GRESKA( playerid, "Nemate dovoljno novca(45 $)." );
					SendClientMessagee( playerid, BELA, "Kupili ste bocicu Amonijum Hlorida.");
					PlayerInfo[ playerid ][ xAmonijH ] += 10;
					DajIgracuNovac( playerid, -45 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
				}
			}
		}
	}
	else if( dialogid == dialog_ORMAR ) {
		if( response == 1 ) {
			switch( listitem ) {
				case 0: {
					if( II[ inProperty[ playerid ] ][ iSkin ][ 0 ] == 0 )
					{
						SendClientMessagee( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
						II[ inProperty[ playerid ] ][ iSkin ][ 0 ] = GetPlayerSkin( playerid );
						SetPlayerSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
					}
					else if( II[ inProperty[ playerid ] ][ iSkin ][ 1 ] == 0 )
					{
						SendClientMessagee( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
						II[ inProperty[ playerid ] ][ iSkin ][ 1 ] = GetPlayerSkin( playerid );
						SetPlayerSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
					}
					else if( II[ inProperty[ playerid ] ][ iSkin ][ 2 ] == 0 )
					{
						SendClientMessagee( playerid, BELA, "Spremili ste trenutnu odecu u ormar!");
						II[ inProperty[ playerid ] ][ iSkin ][ 2 ] = GetPlayerSkin( playerid );
						SetPlayerSkin( playerid, 154 ); PlayerInfo[ playerid ][ xSkin ] = 154; SaveProperty( inProperty[ playerid ] );
					}
					else return GRESKA( playerid, "Nemate mesta za vise odece u ormaru." );
				}
				case 1: {
					Dimi_SetPlayerPos( playerid, 258.4893,-41.4008,1002.0234 );
					SetPlayerInterior( playerid, 14 );
					SetPlayerFacingAngle( playerid, 270.0 );
					SetPlayerCameraPos( playerid, 256.0815, -43.0475, 1004.0234 );
					SetPlayerCameraLookAt( playerid, 258.4893, -41.4008, 1002.0234 );
					TogglePlayerControllable( playerid, false );
					ApplyAnimation( playerid, "CLOTHES","CLO_Pose_Legs",4.1,1,0,0,0,0, 1);
					OrmarTDControl( playerid, true );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 3 ], II[ inProperty[ playerid ] ][ iSkin ][ 0 ] );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 4 ], II[ inProperty[ playerid ] ][ iSkin ][ 1 ] );
					PlayerTextDrawSetPreviewModel( playerid, Ormar[ playerid ][ 5 ], II[ inProperty[ playerid ] ][ iSkin ][ 2 ] );

					for( new i = 0; i < 10; i++) {
						PlayerTextDrawShow( playerid, Ormar[ playerid ][ i ] );
					}
					SelectTextDraw( playerid, 0x5D9FCEFF );
				}
			}
		}
	}
	else if( dialogid == dialog_KUPIKARTICU ) {
		new string[ 128 ];
		if( response ) {
			switch( listitem )  {
				case 0: {
				
					new randphone = 100000 + random(899999);
					format( string, sizeof( string ), "064%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SendClientMessagee( playerid, ZUTA, globalstring);
				}
				case 1: {

					new randphone = 100000 + random(899999);
					format( string, sizeof( string ), "061%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SendClientMessagee( playerid, ZUTA, globalstring);
				}
				case 2: {

					new randphone = 100000 + random(899999);
					format( string, sizeof( string ), "063%d", randphone );
					PlayerInfo[ playerid ][ xBrojTelefona ] = strval( string );
					format( globalstring, sizeof( globalstring ), "Vas novi broj mobilnog telefona je %d", strval( string ) );
					SendClientMessagee( playerid, ZUTA, globalstring);
				}
			}
		}
	}
	else if( dialogid == dialog_BUY_MOBILEPHONE ) {

		if( response ) {
		
			switch( listitem )  {
			
				case 0: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 6985 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -6985 );
					BussinesMoney( uFirmi[ playerid ], 3492 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18865;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Samsung Galaxy S5!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 1: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 5351 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -5351);
					BussinesMoney( uFirmi[ playerid ], 2675 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18866;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Nokia Lumia 930!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 2: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 6101 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -6101);
					BussinesMoney( uFirmi[ playerid ], 3050 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18867;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Sony Xperia Z3!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 3: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 4568 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -4568);
					BussinesMoney( uFirmi[ playerid ], 2284 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18868;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Apple iPhone 6!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 4: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 3657 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -3657);
					BussinesMoney( uFirmi[ playerid ], 1828 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18869;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili LG Nexus 5!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);

				}
				case 5: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 2657 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -2657);
					BussinesMoney( uFirmi[ playerid ], 1328 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18870;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili HTC Desire!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 6: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 1245 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -1245);
					BussinesMoney( uFirmi[ playerid ], 622 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18871;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Huawei Ascend Mate!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 7: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 1278 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -1278);
					BussinesMoney( uFirmi[ playerid ], 639 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18872;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Alcatel One Touch!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 8: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 5975 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -5975);
					BussinesMoney( uFirmi[ playerid ], 2987 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18873;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Motorola Nexus 6!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					
				}
				case 9: {
				
					if( PlayerInfo[ playerid ][ xNovac ] < 3422 ) return GRESKA( playerid, "Nemate dovoljno novca." );
					DajIgracuNovac( playerid, -3422);
					BussinesMoney( uFirmi[ playerid ], 1711 );
					PlayerInfo[ playerid ][ xModelTelefona ] = 18874;
					SendClientMessagee( playerid, BELA, "Uspjesno ste kupili Blackberry Z30 LTE!");
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);

				}
			}
		}
	}
	else if( dialogid == dialog_SEARCH_NAME && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID ) {
			SendClientMessagee( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new SexTxt[ 7 ], ID = GetPlayerIdFromName( inputtext );

		if( PlayerInfo[ ID ][ xPol ] == 2 ) format( SexTxt, sizeof( SexTxt ), "Zensko" );
		else format( SexTxt, sizeof( SexTxt ), "Musko" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Ime i prezime: %s\nPol: %s\nGodine: %d\n\nPosao: %s\nBroj mobilnog: %d\n\nZlocin : %s\nPrijavio : %s",
		ImeIgraca( ID ), SexTxt, PlayerInfo[ ID ][ xGodine ], getJobName( PlayerInfo[ ID ][ xPosao ] ), PlayerInfo[ ID ][ xBrojTelefona ], ZlocinInfo[ ID ][ zZlocin ], ZlocinInfo[ ID ][ zPrijavio ] );

		ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		return true;
	}
	else if( dialogid == dialog_SEARCH_NUMBERPLATE && response && strlen( inputtext ) ) {

		new string[64];
				
		if( ScriptIDVozila[ strval( inputtext ) ] == -1 ) return GRESKA( playerid, "Krivi unos." );
		
		new autoid = ScriptIDVozila[ strval( inputtext ) ];
		
		format( string, sizeof( string ), V_FILE, autoid );
		if( !fexist( string ) ) return GRESKA( playerid, "Krivi unos." );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		format( DialogStrgEx, sizeof( DialogStrgEx ), "Model: %s\nRegistracija: 'LS - %d'\nVlasnik: %s", ImeVozila[ VehicleInfo[ autoid ][ vModel ]-400 ], VehicleInfo[ autoid ][ vID ], VehicleInfo[ autoid ][ vOwner ] );
		ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

		return true;
	}
	else if( dialogid == dialog_POSTAVIPOTERU && response && strlen( inputtext ) ) {
	
		new lala[ 32 ], tekst[ 64 ];
		if( sscanf( inputtext,"s[32]s[64]", lala, tekst ) ) return GRESKA( playerid, "Krivi unos." );
		if( GetPlayerIdFromName( lala ) == INVALID_PLAYER_ID ) {
			SendClientMessagee( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new id = GetPlayerIdFromName( lala );
		if( id == playerid ) return GRESKA( playerid, "Ne mozete sebi dati wanted level!");
		if( GetFactionType( id ) == ORG_TIP_PD ) return GRESKA( playerid, "Ne mozes dati wl policajcu.");
		PostaviWanted( id, tekst, ImeIgraca( playerid ) );
		return true;
	}
	else if( dialogid == dialog_OCISTIDOSIJE && response && strlen( inputtext ) ) {

		if( GetPlayerIdFromName( inputtext ) == INVALID_PLAYER_ID)
		{
			SendClientMessagee( playerid, CRVENA, "Pogresno ime gradjanina.");
			return 1;
		}
		new ID = GetPlayerIdFromName( inputtext );
		PlayerInfo[ ID ][ xWanted ] = 0;
		Dimi_SetPlayerWantedLevel( ID, PlayerInfo[ ID ][ xWanted ] );
		strmid( ZlocinInfo[ ID ][zPrijavio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zPocinio], "Nema", 0, strlen("Nema"), 255);
		strmid( ZlocinInfo[ ID ][zZlocin], "Nema", 0, strlen("Nema"), 255);
		SendClientMessageEx( playerid, BELA, "Obrisali ste dosije gradjaninu %s.", ImeIgraca( ID ) );
		
		format( globalstring, sizeof( globalstring ), "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		AdminPoruka( SVETLOCRVENA, globalstring );
		
		format( globalstring, sizeof globalstring, "| CLEARWL | %s je ocistio WL igracu %s.", ImeIgraca( playerid ), ImeIgraca( ID ) );
		OrgPorukaLeader( PlayerInfo[ playerid ][ xClan ], 0xD2CFCFFF, globalstring );
		return true;
	}
	else if( dialogid == dialog_OPREMA ) {
		if( response ) { 
			switch( listitem ) {
				case 0: {
					ResetAllWeapons( playerid );
					GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 41, 500 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo patrolnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 1: {
					ResetAllWeapons( playerid );
					GiveWeaponToPlayer( playerid, 3, 1 );
					GiveWeaponToPlayer( playerid, 24, 100 );
					GiveWeaponToPlayer( playerid, 25, 100 );
					SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo standardnu opremu.", ImeIgraca( playerid ) );
					PorukaRadius( 30.0, playerid, globalstring, LJUBICASTA );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xRank ] >= 2 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 3, 1 );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo specijalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return GRESKA( playerid, "Nemate dovoljni rank(2+)." );

				} 
				case 3: { 
					if( PlayerInfo[ playerid ][ xRank ] >= 1 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo profesionalnu opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return GRESKA( playerid, "Nemate dovoljni rank(1+)." );
				}
				case 4: {
					if( PlayerInfo[ playerid ][ xRank ] >= 3 ) {
						ResetAllWeapons( playerid );
						GiveWeaponToPlayer( playerid, 24, 100 );
						GiveWeaponToPlayer( playerid, 34, 100 );
						SetPlayerSkin( playerid, PlayerInfo[ playerid ][ xSkin ] );
						format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo snajpersku opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return GRESKA( playerid, "Nemate dovoljni rank(3+)." );
				}
				case 5: {
					Dimi_SetPlayerArmour( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 6: {
					Dimi_SetPlayerHealth( playerid, 100 );
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 7: {
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_LHAND ) ) {
						SendClientMessagee( playerid, CRVENA, "Vec imas neki objekt u lijevoj ruci!");
						return 1;
					}
					RiotShield[ playerid ] = true;
					SetPlayerAttachedObject( playerid, OBJECT_SLOT_LHAND, 18637, 3, 0.297411, -0.252804, -0.022625, 0.626678, 1.138009, 82.256072, 1, 1, 1);
					SendInfoMessage( playerid, "Uzeli ste Riot Shield iz Armoury-a.");
					format( globalstring, sizeof( globalstring ), "* %s je uzeo Riot Shield iz Armoury-a.", ImeIgraca( playerid ) );
					PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
				}
				case 8: {
					if( PlayerInfo[ playerid ][ xRank ] >= 1 ) {
						SetPlayerSkin( playerid, 285 );
						Dimi_SetPlayerHealth( playerid, 100 );
						Dimi_SetPlayerArmour( playerid, 150 );
						format( globalstring, sizeof( globalstring ), "* %s je upravo obukao swat opremu.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					} else return GRESKA( playerid, "Nemate dovoljni rank(1+)." );
				}
				case 9: {
					BrojLisica[ playerid ] = 10;
					SendInfoMessage( playerid, "Uzeli ste 10 para lisica iz ormara.");
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
				case 10: {
					TazerMetkovi[ playerid ] = 100;
					SendInfoMessage( playerid, "Uzeli ste 100 metkova tazera iz ormara.");
					format( globalstring, sizeof( globalstring ), "* %s je upravo uzeo nesto iz ormara.", ImeIgraca( playerid ) );
					PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
				}
			}
		}
	}
	else if( dialogid == dialog_VEHICLEWEPTAKE ) {
		new wepname[ 32 ];
		if( response == 1 )  {
			switch( listitem ) {
				case 0: {
					if( VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] == 0) {
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] );
					VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap1 ] = 0;
					VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo1 ] = 0;
					SaveVehicle( TrunkVehicle[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 1: {
					if( VehicleInfo[TrunkVehicle[ playerid ] ][ vWeap2 ] == 0) {
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ], VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] );
					VehicleInfo[ TrunkVehicle[ playerid ] ][ vWeap2 ] = 0;
					VehicleInfo[ TrunkVehicle[ playerid ] ][ vAmmo2 ] = 0;
					SaveVehicle( TrunkVehicle[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 2: {
					if( VehicleInfo[TrunkVehicle[ playerid ]][vMelee] == 0) {
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer(playerid, VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ], 1 );
					VehicleInfo[ TrunkVehicle[ playerid ] ][ vMelee ] = 0;
					SaveVehicle( TrunkVehicle[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz prtljaznika.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
			}
		}
	}
	else if( dialogid == dialog_MUNIFORM)
	{
		if(response == 1)
		{
			switch( listitem )
			{
				case 0:
				{
					PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
					SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
					format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SetPlayerSkin( playerid, 70 );
				}
				case 1:
				{
					PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
					SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
					format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SetPlayerSkin( playerid, 274 );
				}
				case 2:
				{
					PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
					SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
					format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SetPlayerSkin( playerid, 275 );
				}
				case 3:
				{
					PlayerPlaySound( playerid, 1057, 0.0, 0.0, 0.0);
					SendInfoMessage( playerid, "Obukli ste svoju radnu uniformu i spremni za posao.");
					format( globalstring, sizeof( globalstring ), "* %s oblaci svoju radnu uniformu i priprema se za posao.", ImeIgraca( playerid ) );
					PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
					SetPlayerSkin( playerid, 276 );
				}
			}
		}
	}
	else if( dialogid == dialog_TAXIOFFER )
	{
		if( response )
		{
			new string[39];

			TaximetarUkljucen[ offeredByCabbie[ playerid ] ] = true;
			CenaVoznje[ offeredByCabbie[ playerid ] ] = 1;
			VoziIgracaID[ offeredByCabbie[ playerid ] ] = playerid;

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 0 ] );//vodje
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 1 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 2 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 3 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 4 ] );
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 6 ] );



			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ], string );

			format( string, sizeof( string ), "%s", GetPlayerLocation( playerid ) );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 7 ], string );

			format( string, sizeof( string ), "%d$", CenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( offeredByCabbie[ offeredByCabbie[ playerid ] ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 5 ], string );

			format( string, sizeof( string ), "%d$", CenaVoznje[ offeredByCabbie[ playerid ] ] );
			PlayerTextDrawSetString( playerid, TaxistaTD[ playerid ][ 5 ], string );

			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 7 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 7 ] );
			
			PlayerTextDrawShow( playerid, TaxistaTD[ playerid ][ 5 ] );
			PlayerTextDrawShow( offeredByCabbie[ playerid ], TaxistaTD[ offeredByCabbie[ playerid ] ][ 5 ] );

			SendInfoMessage( offeredByCabbie[ playerid ], "Klijent je prihvatio voznju!");
			SendInfoMessage( playerid, "Ukoliko taxista ne zeli stati kucajte /stoptaxi te slikajte i prijaviti na forum.");
			SendInfoMessage( playerid, "U suprutnom ne kucajte vec samo izadjite na lokaciji gdje vas odveze!");

			TaxiTimer[ offeredByCabbie[ playerid ] ] = SetTimerEx( "Taxitimer", 6000, true, "i", offeredByCabbie[ playerid ] );
		}
		else
		{
			SendInfoMessage( playerid, "Odbio si voznju!" );

			if( offeredByCabbie[ playerid ] != IPI ) SendInfoMessage( offeredByCabbie[ playerid ],"Klijent je odbio voznju!" );

			offeredByCabbie[ playerid ] = INVALID_PLAYER_ID;
		}
	}
	else if( dialogid == dialog_KIOSK )
	{
		if(response == 1)
		{
			new idfirme = GetNearestTrafika( playerid );
			if(idfirme == -1) return GRESKA( playerid, "Nisi na pickupu za trafiku!");
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return GRESKA( playerid, " Nemate mobilni telefon!");
					if( PlayerInfo[ playerid ][ xNovac ] < 20 ) return GRESKA( playerid, " Nemate dovoljno novca 20$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 20;
					DajIgracuNovac( playerid, -20 );
					SendClientMessagee( playerid, BELA, "Kupili ste 20 kredita za 20$!") ;
					SavePlayer( playerid ); BussinesMoney( idfirme, 20 );
				}
				case 1:
				{
					if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return GRESKA( playerid, " Nemate mobilni telefon!");
					if( PlayerInfo[ playerid ][ xNovac ] < 50 ) return GRESKA( playerid, " Nemate dovoljno novca 50$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 50;
					DajIgracuNovac( playerid, -50 );
					SendClientMessagee( playerid, BELA, "Kupili ste 50 kredita za 50$!") ;
					SavePlayer( playerid ); BussinesMoney( idfirme, 50 );
				}
				case 2:
				{
					if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return GRESKA( playerid, " Nemate mobilni telefon!");
					if( PlayerInfo[ playerid ][ xNovac ] < 100 ) return GRESKA( playerid, " Nemate dovoljno novca 100$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 100;
					DajIgracuNovac( playerid, -100 );
					SendClientMessagee( playerid, BELA, "Kupili ste 100 kredita za 100$!") ;
					SavePlayer( playerid ); BussinesMoney( idfirme, 100 );
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xBrojTelefona ] == 0) return GRESKA( playerid, " Nemate mobilni telefon!");
					if( PlayerInfo[ playerid ][ xNovac ] < 500 ) return GRESKA( playerid, " Nemate dovoljno novca 500$!");
					PlayerInfo[ playerid ][ xTelefonBon ] += 500;
					DajIgracuNovac( playerid, -500 );
					SendClientMessagee( playerid, BELA, "Kupili ste 500 kredita za 500$!") ;
					SavePlayer( playerid ); BussinesMoney( idfirme, 500 );
				}
				case 4:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 15 ) return GRESKA( playerid, " Nemate dovoljno novca 15$!");
					DajIgracuNovac( playerid, -15 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SendClientMessagee( playerid, BELA, "Kupili ste sprite za 15$!"); BussinesMoney( idfirme, 15 );
				}
				case 5:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return GRESKA( playerid, " Nemate dovoljno novca 35$!");
					new Float:Health; GetPlayerHealth( playerid, Health );
					if( Health >= 100 ) return GRESKA( playerid, "Vec imas 100HP.");
					DajIgracuGlad( playerid, 5 );
					format( globalstring, sizeof( globalstring ), "* %s jede cokoladicu.", ImeIgraca( playerid ) );
					PorukaRadius( 15.0, playerid, globalstring, LJUBICASTA );
					OnePlayAnim( playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0 );
					Dimi_SetPlayerHealth( playerid, 20 );
					DajIgracuNovac( playerid, -35 ); BussinesMoney( idfirme, 35 );
				}
				case 6:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 85 ) return GRESKA(playerid, "Nemate dovoljno novca 85$!");
					DajIgracuNovac( playerid, -85 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_BEER);
					SendClientMessagee(playerid,-1,"Kupili ste pivo za 85$!"); BussinesMoney( idfirme, 85 );
				}
				case 7:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 52 ) return GRESKA( playerid, "Nemate dovoljno novca 52$!");
					DajIgracuNovac( playerid, -52 );
					SetPlayerSpecialAction( playerid, SPECIAL_ACTION_DRINK_SPRUNK );
					SendClientMessagee( playerid, BELA, "Kupili ste coca colu za 52$!" ); BussinesMoney( idfirme, 52 );
				}
				case 8:
				{
					if( PlayerInfo[ playerid ][ xNovac ] < 35 ) return GRESKA( playerid, "Nemate dovoljno novca 35$!");
					PlayerInfo[ playerid ][ xCigare ] += 20;
					DajIgracuNovac( playerid, -35 );
					SendClientMessagee( playerid, BELA, "Kupili ste kutiju cigareta koja sadrzi 20 cigareta za 35$!");
					SendClientMessagee( playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
					SavePlayer( playerid ); BussinesMoney( idfirme, 35 );
				}
				case 9:
				{
					if( PlayerInfo[ playerid ][ xUpaljac ] == 1 ) return GRESKA( playerid, "Vec posedujes upaljac!");
					if( PlayerInfo[ playerid ][ xNovac] < 15 ) return GRESKA( playerid, "Nemate dovoljno novca 15$!");
					PlayerInfo[ playerid ][ xUpaljac ] = 1;
					DajIgracuNovac( playerid, -15 );
					SendClientMessagee( playerid, BELA, "Kupili ste upaljac za 15$!");
					SendClientMessagee( playerid, BELA, "Da pusis cigare koristi /uzmicigaretu.");
					SavePlayer( playerid ); BussinesMoney( idfirme, 15 );
				}
				case 10:
				{
					if( PlayerInfo[ playerid ][ xVokiToki ] == 1 ) return GRESKA( playerid, "Vec posedujes jedan voki-toki.");
					if( PlayerInfo[ playerid ][ xNovac] < 1000 ) return GRESKA( playerid, "Nemate dovoljno novca 1000$!");
					PlayerInfo[ playerid ][ xVokiToki ] = 1;
					DajIgracuNovac( playerid, -1000 );
					SendClientMessagee( playerid, BELA, "Kupili ste voki-toki za 1k$");
					SendClientMessagee( playerid, BELA, "Da pisete poruke /f.");
					SavePlayer( playerid ); BussinesMoney( idfirme, 15 );
				}
			}
		}
	}
	else if( dialogid == dialog_SPAWNCHANGE )
	{
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_NERP ) return greska(playerid,"Vec ste postavili ovaj spawn!");
					PlayerInfo[playerid][xSpawn] = SPAWN_NERP;
					SavePlayer(playerid);
					SendInfoMessage(playerid,"Vas spawn je postavljen na glavni spawn!");
				}
				case 1:
				{
					/*if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_1 ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_1;
					SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen na plazu!" );*/
					GRESKA(playerid, "Ova opcija je trenutno onemogucena!");
				}
				case 2:
				{
					/*if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_OBICAN_LS_2 ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_OBICAN_LS_2;
					SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen na kolodvor!" );*/
					GRESKA(playerid, "Ova opcija je trenutno onemogucena!");
				}
				case 3:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_1 ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return GRESKA( playerid, "Nemas imovinu 1!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_1; SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen u imovini 1!" );
				}
				case 4:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_2 ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return GRESKA( playerid, "Nemas imovinu 2!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_2; SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen u imovini 2!" );
				}
				case 5:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_IMOVINA_3 ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return GRESKA( playerid, "Nemas imovinu 3!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_IMOVINA_3; SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen u imovini 3!" );
				}
				case 6:
				{
					if( PlayerInfo[ playerid ][ xClan ] < 1) return GRESKA( playerid, "Niste clan organizacije!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_BAZA; SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen u bazu organizacije!" );

				}
				case 7:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_RENT ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xRentID ] == -1 ) return GRESKA( playerid, "Niste iznajmili nikakvu imovinu!");
					PlayerInfo[ playerid ][ xSpawn ] = SPAWN_RENT;
					SavePlayer( playerid );
					SendInfoMessage(playerid,"Vas spawn je postavljen u rentanu imovinu!" );
				}

				case 8:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_ADMIN ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xAdmin ] >= 1 )
					{
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_ADMIN;
						SavePlayer( playerid );
						SendInfoMessage(playerid,"Vas spawn je postavljen u Admin bazu!" );
					}
					else GRESKA( playerid, "Niste Admin!" );
				}
				case 9:
				{
					if( PlayerInfo[ playerid ][ xSpawn ] == SPAWN_HELPER ) return GRESKA(playerid, "Vec ste postavili ovaj spawn!");
					if( PlayerInfo[ playerid ][ xHelper ] >= 1 )
					{
						PlayerInfo[ playerid ][ xSpawn ] = SPAWN_HELPER;
						SavePlayer( playerid );
						SendInfoMessage(playerid,"Vas spawn je postavljen u GM bazu!" );
					}
					else GRESKA( playerid, "Niste GameMaster!" );
				}
			}
		}
	}
	else if( dialogid == dialog_KREDIT ) {
		if( !response ) return 1;
		if( response ){
			if( PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] > 0) return GRESKA( playerid, "Vec imate podignut kredit!");
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xLevel] < 5 ) return GRESKA( playerid, "Morate biti level 5+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 20000;
					PlayerInfo[ playerid ][ xIznosRate ] = 1000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					SendClientMessagee( playerid, ZUTA, "Podigli ste kredit u iznosu od 20000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 20000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xLevel ] < 10 ) return GRESKA( playerid, "Morate biti level 10+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 50000;
					PlayerInfo[ playerid ][ xIznosRate ] = 2000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita];
					SendClientMessagee( playerid, ZUTA, "Podigli ste kredit u iznosu od 50000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 50000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xLevel] < 15 ) return GRESKA( playerid, "Morate biti level 15+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 80000;
					PlayerInfo[ playerid ][ xIznosRate ] = 3000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SendClientMessagee( playerid, ZUTA, "Podigli ste kredit u iznosu od 80000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 80000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xLevel ] < 20 ) return GRESKA( playerid, "Morate biti level 20+ za ovaj kredit!");
					PlayerInfo[ playerid ][ xIznosKredita ] = 100000;
					PlayerInfo[ playerid ][ xIznosRate ] = 4000;
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = PlayerInfo[ playerid ][ xIznosKredita ];
					PlayerInfo[ playerid ][ xBRacun ] += PlayerInfo[ playerid ][ xIznosKredita ];
					SendClientMessagee( playerid, ZUTA, "Podigli ste kredit u iznosu od 100000$ | INFO: /kredit.");
					SavePlayer( playerid ); UpdateBankTD( playerid );
					new string[ 128 ]; 
					format( string, sizeof( string ), "Igrac: %s | Podigao kredit: 100000$", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogKredit.log", string );
				}
			}
		}
	}
	else if( dialogid == dialog_INFOKREDIT && response ) {
	
		if( !response ) return 1;
		switch( listitem ) {
			case 0: {
				format( globalstring, sizeof( globalstring ),"- Iznos Kredita: %d$\n- Iznos Rate Kredita: %d$\n- Preostalo za otplatu: %d$", PlayerInfo[ playerid ][ xIznosKredita ], PlayerInfo[ playerid ][ xIznosRate ], PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
				ShowPlayerDialog( playerid, dialog_BALANCE, DSMSG, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
			}
			case 1: ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
			case 2: {
				if( PlayerInfo[ playerid ][ xBRacun ] >= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
					SendInfoMessage( playerid, "Uspjesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
					PlayerInfo[ playerid ][ xBRacun ] -= PlayerInfo[ playerid ][ xPreostaloZaOtplatu ];
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
					PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;
					SavePlayer( playerid );
				}
				else if( PlayerInfo[ playerid ][ xNovac ] > PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] ) {
					SendInfoMessage( playerid, "Uspjesno ste otplatili ostatak kredita u iznosu od %d$.", PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
					DajIgracuNovac( playerid, -PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] );
					PlayerInfo[ playerid ][ xPreostaloZaOtplatu ] = 0;
					PlayerInfo[ playerid ][ xIznosKredita ] = 0;
					PlayerInfo[ playerid ][ xIznosRate ] = 0;
					SavePlayer( playerid );
				}
				else return GRESKA( playerid, "Nemate dovoljno novca za otplacivanje kredita." );
			}
		}
	}
	else if( dialogid == dialog_PROMENARATEKREDITA )
	{
		if( !response ) return 1;
		if( response ) {
			new iznos;
			if( sscanf( inputtext, "i", iznos ) ) return ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
			if( iznos < 1000 || iznos > 4000 )
			{
				GRESKA( playerid, "Suma ne moze biti manja od 1000$ i veca od 4000$!");
				ShowPlayerDialog( playerid, dialog_PROMENARATEKREDITA, DSI, D_NASLOV, "Upisite novi iznos rate koje cete otplacivati...", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			PlayerInfo[ playerid ][ xIznosRate ] = iznos;
			SendClientMessageEx( playerid, ZUTA, "Podesili ste iznos rate kredita na %d$.", iznos );
		}
		else ShowPlayerDialog( playerid, dialog_INFOKREDIT, DSL, D_NASLOV, "Info Kredit\nPromena Iznosa Rate", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_RPTEST ) {
		if( response ) {
			if( listitem == TacanOdgovor[ playerid ] ) {
				Dimi_KillTimer( TimerPitanje[ playerid ] );
				if( PitanjeBroj[ playerid ] == 1 ) {
					TacanOdgovor[ playerid ] = 3;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "2. Sto je Powergaming [PG] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Koristenje OOC informacija u IC korist.\n C) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 2 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "3. Sto je Deathmatch [DM] ?", "A) Koristenje OOC informacija u IC korist.\nB) Ubijanje ljudi bez ikakvog IC i RP razloga.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 3 ) {
					TacanOdgovor[ playerid ] = 3;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "4. Sto je Roleplay 2 Win [RP2WIN] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) RPanje nekakve situacije u svoju korist.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 4 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "5. Sto je Drive By [DB] ?", "A) Koristenje OOC informacija u IC korist.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pucanje iz vozila sa mesta vozaca na pesake, motoriste i bicikliste.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 5 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "6. Sto je Bunny Hopp [BH] ?", "A) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nB) Skakanje jednom ili vise puta prilikom trcanja sa ciljem brzeg trcanja.\nC) Koristenje OOC informacija u IC korist.\nD) Pisanje iste rijeci ili recenice dva ili vise puta za redom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 6 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "7. Sto je Revenge Kill [RK] ?", "A) Ubojstvo igraca iz osvete.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 7 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "8. Sto je Non-Roleplay [NonRP] ?", "A) Ometanje RP radnji koje izvrsavaju drugi igraci.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 8 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "9. Sto je Spamming [SPAM] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Pucanje iz vozila sa mesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 9 ) {
					TacanOdgovor[ playerid ] = 3;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "10. Sto je Hacking & Exploiting [Hack & Abuse] ?", "A) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nB) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nC) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nD) Koriscenje programa kojim se dobiva prednost u igri.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 10 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "11. Sto je 'SpawnKill [SK] ?", "A) Mjesto gde se spawnate.Tamo ima puno ljudi i mozete naci prijatelje\nB) To je kada ubijete covjeka zato sto se spawno u vasoj kuci\nC) Ubojstvo igraca nakon sto se on tek spawnao\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 11 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "12. Sto je Terrorist RP [Terror RP] ?", "A) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.\nB) Izvodjeneje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) RPanje terorista.\nD) Pucanje iz vozila sa mesta vozaca na pesake,motoriste i bicikliste.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 12 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "13. Sto je Admin/GM Abuse ?", "A) Koristenje Admin pozicije za pretnje ili za korist sebi,a na stetu drugima igracima.\nB) Izvodjenje radnje koju je nemoguce izvesti u stvarnom zivotu.\nC) Pisanje iste rijeci ili recenice dva ili vise puta za redom.\nD) Skakanje jednom ili vise puta tokom trcanja sa ciljem brzeg trcanja.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 13 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "14. Netko vam prosljedi uvredu u '/b' chat, sta ce te uraditi?", "A) Opsovat cu i ja njemu i to duplo.\nB) Izudarati ga dok ne shvati sta je uradio i ubiti ga.\nC) Slikat cu to i postaviti zalbu na forumu na tu osobu.\nD) Zvati Admina.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 14 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "15. Lovi vas policija i probuse vam gumu, kako ce te reagirati?", "A) Zaustavit cu vozilo RP i bez krsenja pravila nastaviti RPati.\nB) Vozit cu dok se ne slupam skroz i onda odem off.\nC) Zaustavit cu vozilo i spammati na OOC - 'nonRP'\nD) Zvati Admina!", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 15 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "16. Uocite tucu izmedju dvije grupe u Comptonu, sta cete uraditi?", "A) Upalit cu cheat i pokazati im ko je glavni tu.\nB) Uletit cu medju njih i pobiti se sa njima\nC) RPat cu strah i pozvati LShowPlayerDialog\nD) Prici pored njih i poceti da RPam sa njima.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 16 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "17. Napisete '/me pokusava udariti lika rukom u glavu',sto sljedece ide?", "A) Kako sam te opalio umro si, pukla ti glava.\nB) /do da li uspjevam da te udarim?\nC) Udario sam te padas, i u nesvjesti si.\nD) /do pao si na pod i lezis krvav .", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 17 ) {
					TacanOdgovor[ playerid ] = 3;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "18. Policajac vam stavlja lisice i vodi u zatvor, sta ce te uraditi?", "A) Napisati mu na '/b' chat da je glup i da MGa.\nB) Pobjeci cu off, jer sam faca.\nC) Zvati Admina na /prijavi .\nD) RPat cu iako grijesi, i o greskama razjasniti na forumu.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 18 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "19. Osoba vam peri pistolj u glavu trazeci novac.sto ce te uciniti?", "A)Uradit cu sve sto mi kaze bez krsenja pravila.\nB)Skocit cu mu za vrat i iskopati mu oci.\nC)Pobjeci off ili samo crashati sam client.\nD)Pozvati policiju i reci da me netko pljacka i dati im lokaciju", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 19 ) {
					TacanOdgovor[ playerid ] = 3;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "20. Upucani ste u nogu, sta ce te uciniti?", "A) Pocet cu trcati da izbjegnem metke kako bi se spasio.\nB) Otici cu sa servera svojom voljom.\nC) Nista od navedenog.\nD) RPat cu strasnu bol i past cu na zemlju.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 20 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "21.Ukoliko napravite saobracajnu nesrecu, sta ce te uraditi?", "A) Reci cu mu na '/b' chat da koristi oci\nB) Pocet cu RPati tu nesrecu opsirno uz pomoc komandi\nC) Nastavit cu voziti\nD) Uslikati i prijaviti na forum pod zalbom za NonRP", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 21 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "22./me udara lika te on pada na zemlju.sta smo prekrsili?", "A) Pustupili smo ispravno prema igracu i treba nastaviti Roleplay.\nB) RPali smo u svoju korist.\nC) Pocinili smo Drive By u uzem smislu.\nD) Izvrsili smo PG nad igracom.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 22 ) {
					TacanOdgovor[ playerid ] = 0;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "23. Cemu koristi komanda /me i /do? ", "A) Radi boljeg Roleplaya i iskazivanja stvari koji se nevide.\nB) Radi iskoriscavanja drugih igraca\nC) Radi NonRoleplaya u igrici\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 23 ) {
					TacanOdgovor[ playerid ] = 2;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "24. Smije li se RP-ati maloljetnika? ", "A) DA\nB) NE\nC) Dozvoljeno je ali nam to 'ne daje' nikakvu prednost nad ostalim igracima .\nD) Nista od navedenog.", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 24 ) {
					TacanOdgovor[ playerid ] = 1;
					PitanjeBroj[ playerid ]++;
					ShowPlayerDialog( playerid, dialog_RPTEST, DSL, "25. Smije li se RP-ati terorista? ", "A) Da\nB) Ne\nC) Samo ako su official organizacija.\nD) Nista od navedenog", D_ODABERI, D_ODUSTANI );
				}
				else if( PitanjeBroj[ playerid ] == 25 ) {
					PlayerInfo[ playerid ][ xRPLearn ] = 0; PlayerInfo[ playerid ][ xMute ] = 0; SavePlayer( playerid ); //PostaviSpawn( playerid );
					PitanjeBroj[ playerid ] = 0;
					Dimi_SetSpawnInfo( playerid );
					SpawnPlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Cestitamo! Na sva pitanja ste tocno odgovorili te ste spremni za igru." );
					SendClientMessagee( playerid, SVETLOCRVENA, "Zelimo vam ugodnu zabavu i dobar RP. Posjetite nas discord https://discord.gg/XkcSmSxFMe" );
				}
				TimerPitanje[ playerid ] = SetTimerEx( "Pitanje", 120000, 0, "i", playerid);
			}
			else {
				PlayerInfo[ playerid ][ xRPLearn ] = 1;
				SavePlayer( playerid );
				Dimi_KillTimer( TimerPitanje[ playerid ] );
				TogglePlayerControllable( playerid, false );
				TimerLearn[ playerid ] = SetTimerEx( "RolePlayTut", 1000, 0, "ii", playerid, 1);
				SendClientMessagee( playerid, SVETLOCRVENA, "Netocan odgovor.Slijedi tutorijal ponovno!" );
				SendClientMessagee( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem discordu https://discord.gg/XkcSmSxFMe" );
			}
		}
		else {
			PlayerInfo[ playerid ][ xRPLearn ] = 1;
			SavePlayer( playerid );
			Dimi_KillTimer( TimerPitanje[ playerid ] );
			TogglePlayerControllable( playerid, false );
			TimerLearn[ playerid ] = SetTimerEx( "RolePlayTut", 1000, 0, "ii", playerid, 1);
			SendClientMessagee( playerid, SVETLOCRVENA, "Netocan odgovor.Slijedi tutorijal ponovno!" );
			SendClientMessagee( playerid, SVETLOCRVENA, "Ukoliko vam i dalje ne bude jasno odgovore na pitanja mozete pronaci na nasem discordu https://discord.gg/XkcSmSxFMe" );
		}
	}
	else if( dialogid == dialog_CHANGEPASSWORD ) {
		if( response ) {
			if( strlen(inputtext) < 6 || strlen(inputtext) > 20 ) {
				GRESKA( playerid, "Password moze sadrzavati minimalno 6 a maximalno 20 znakova" );
				return 1;
			}
			else {
				strmid( PlayerInfo[ playerid ][ xLozinka ], inputtext, 0, strlen( inputtext ), 255 );
				format( globalstring, sizeof( globalstring ), "Nova lozinka: %s", inputtext );
				SendClientMessagee( playerid, ZUTA, globalstring );
				SavePlayer( playerid );
				format( globalstring, sizeof( globalstring ), "Prijavite se ponovno sa novom lozinkom: %s", inputtext );
				Kickovanje( playerid, globalstring );
				
				new playersip[ 128 ];
				GetPlayerIp( playerid, playersip, sizeof( playersip ) );
				
				new string[ 128 ]; 
				format( string, sizeof( string ), "IP: %s | Igrac %s je promenio lozinku na %d", playersip, ImeIgraca( playerid ), inputtext );
				LogSave( "Ostalo/LogPromenaLozinke.log", string );
			}
		}
	}
	else if( dialogid == dialog_RENTANJE )
	{
	
		if( response )
		{
		
			new vreme, price;
			
			if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) ) price = 5;
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) ) price = 10;
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) ) price = 15;
			
			if( sscanf( inputtext, "i", vreme ) )
			{
				new rentstr[ 300 ];
				format(rentstr,sizeof(rentstr),""col_balkanstory"-------------------------------------------------------------------------\n\n\
				{FFFFFF}Unesite koliko minuta zelite rentati ovo vozilo.\n1 minut = %d$\nKomande: /lock /unrent\n\n\
				"col_balkanstory"-------------------------------------------------------------------------",price);
				ShowPlayerDialog(playerid,dialog_RENTANJE,DSI,"RENT",rentstr,"Uredu","Izlaz");
				TogglePlayerControllable( playerid, false );
			
				return 1;
			}
		
			if( vreme < 1 || vreme > 45 ) return GRESKA( playerid, "Ne mozes ispod 1 ili iznad 45 min." ), Dimi_RemovePlayerFromVehicle( playerid ), TogglePlayerControllable( playerid, true );
			
			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
			
			if( Rentano[ playerid ] != -1 ) return GRESKA( playerid, "Vec si rentao neko vozilo."), Dimi_RemovePlayerFromVehicle( playerid ), TogglePlayerControllable( playerid, true );
			if( !IsPlayerInAnyVehicle(playerid)) return GRESKA( playerid, "Morate biti u vozilu!");
			if( GetPlayerState(playerid) != PLAYER_STATE_DRIVER ) return GRESKA( playerid, "Morate biti na mjestu vozaca!");

			for(new i; i < MAX_PLAYERS; i++)
			{
				if( Rentano[ i ] == GetPlayerVehicleID( playerid ) )
				{
				
					GRESKA( playerid, "To vozilo je vec rentano!" );
					Dimi_RemovePlayerFromVehicle( playerid ); TogglePlayerControllable( playerid, true );
					return 1;
				}
			}
			
			if( PlayerInfo[ playerid ][ xNovac ] < price*vreme ) return GRESKA( playerid, "Nemas dovoljno novca(%d$)!", price*vreme ), Dimi_RemovePlayerFromVehicle( playerid ), TogglePlayerControllable( playerid, true );
			DajIgracuNovac( playerid, -price*vreme  );
			Rentano[ playerid ] = GetPlayerVehicleID( playerid );
			RentTimer[ playerid ] = SetTimerEx( "KrajRenta", vreme*60000, 0, "ii", playerid, GetPlayerVehicleID( playerid ) );

			if( IsVehicleBajs( GetPlayerVehicleID( playerid ) ) )
			{
				SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 1, lights, alarm, doors, bonnet, boot, objective );
				SendInfoMessage(playerid, "Uspjesno ste rentali biciklo na %d minuta!", vreme );
			}
			else if( IsVehicleMotor( GetPlayerVehicleID( playerid ) ) )
			{
				SendInfoMessage(playerid, "Uspjesno ste rentali motor na %d minuta!", vreme );
			}
			else if( IsVehicleAuto( GetPlayerVehicleID( playerid ) ) )
			{
				SendInfoMessage(playerid, "Uspjesno ste rentali vozilo na %d minuta!", vreme );
			}
			TogglePlayerControllable( playerid, true );
			BussinesRentMoney( playerid, price*vreme );
		}
		else
		{
			Dimi_RemovePlayerFromVehicle( playerid ); TogglePlayerControllable( playerid, true );
			SendInfoMessage(playerid, "Odbio si rentanje vozila!");
		}
	}
	else if( dialogid == dialog_PROPERTYWEPTAKE ) {
		new wepname[ 32 ];
		if( response == 1 )
		{
			switch( listitem )
			{
				case 0:
				{
					if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] == 0)
					{
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] );
					II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 0 ] = 0;
					II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 0 ] = 0;
					SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 1:
				{
					if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] == 0)
					{
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] );
					II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 1 ] = 0;
					II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 1 ] = 0;
					SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 2:
				{
					if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] == 0)
					{
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] );
					II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 2 ] = 0;
					II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 2 ] = 0;
					SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
				case 3:
				{
					if( II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] == 0)
					{
						GRESKA( playerid, "Nemate oruzja u tom slotu.");
						return 1;
					}

					format( wepname, sizeof( wepname ), "%s", WeapNames[ II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] ] );
					antiCheatCS[ playerid ][ WeaponDetect ] = 3;
					GiveWeaponToPlayer( playerid, II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ], II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] );
					II[ PropertySafeGun[ playerid ] ][ iOruzje ][ 3 ] = 0;
					II[ PropertySafeGun[ playerid ] ][ iMunicija ][ 3 ] = 0;
					SaveProperty( PropertySafeGun[ playerid ] );

					format( globalstring, sizeof( globalstring ), "* %s vadi %s iz sefa.", ImeIgraca( playerid ), wepname );
					PorukaRadius(5, playerid, globalstring, LJUBICASTA );
				}
			}
		}
	}
	else if( dialogid == dialog_POSLOVIBG )
	{
		if( response )
		{
			Dimi_SetPlayerCheckpoint( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ], 5.0 );
			CheckpointStatus[ playerid ] = 15;
			SendInfoMessage( playerid,""col_white"Lokacija posla "col_balkanstory"%s "col_white"vam je oznacena na mapi!", jobsInfos[ listitem ][ jName ] );
			
		}
	}
	else if( dialogid == dialog_CREATEEVENT ) {
		if( !response ) return 1;
		format( EventName[ playerid ], 64, "%s", inputtext );
		ShowPlayerDialog( playerid, dialog_CREATEEVENT2, DSI, D_NASLOV, "Unesti ID vozila za event", D_ODABERI, D_ODUSTANI );
	}
	else if( dialogid == dialog_CREATEEVENT2 ) {
		if( !response ) return 1;
		EventCarsCreate[ playerid ] = 1;
		EventCP[ playerid ] = 1;
		EventVehID[ playerid ] = strval( inputtext );
		SendClientMessagee( playerid, ZUTA, "Koristi LMB da postavis 2 reda vozila.");
		SendClientMessagee( playerid, ZUTA, "Prvo snimanje prvi red vozila, drugo snimanje drugi red vozila.");
	}
	else if(dialogid == dialog_DILER)
	{
		if(!response) return 1;
		if(response)
		{
			switch(listitem)
			{
				case 0://kokain
				{
					DajIgracuNovac(playerid,-90);
					PlayerInfo[playerid][xKokain]++;
					SendInfoMessage(playerid,"Kupio si 1g kokaina za 90$. Da bi ga spremio za koristenje - /osusidrogu");

					if(DealerInfo[KupujeOdDilera[playerid]][Organizacija] != -1)
					{
						OI[ DealerInfo[KupujeOdDilera[playerid]][Organizacija] ][ oSafeMoney ] += 90;
						for(new i; i < MAX_PLAYERS; i++)
						{
							if( PlayerInfo[ i ][ xClan ] == DealerInfo[KupujeOdDilera[playerid]][Organizacija] 
								|| PlayerInfo[ i ][ xLider ] == DealerInfo[KupujeOdDilera[playerid]][Organizacija])
							{
								notfi(i,"Diler","U sef vase organizacije je isporuceno 90$.");
							}
						}
					}
				}
				case 1://marihuana
				{
					DajIgracuNovac(playerid,-20);
					PlayerInfo[playerid][xMarihuana]++;
					SendInfoMessage(playerid,"Kupio si 1g marihuane za 20$. Da bi je spremio za koristenje - /osusidrogu");

					if(DealerInfo[KupujeOdDilera[playerid]][Organizacija] != -1)
					{
						OI[ DealerInfo[KupujeOdDilera[playerid]][Organizacija] ][ oSafeMoney ] += 20;
						for(new i; i < MAX_PLAYERS; i++)
						{
							if( PlayerInfo[ i ][ xClan ] == DealerInfo[KupujeOdDilera[playerid]][Organizacija] 
								|| PlayerInfo[ i ][ xLider ] == DealerInfo[KupujeOdDilera[playerid]][Organizacija])
							{
								notfi(i,"Diler","U sef vase organizacije je isporuceno 20$.");
							}
						}
					}
				}
			}
		}
	}
	else if(dialogid == dialog_EVENTS)
	{
		if(!response) return 1;
		if(response)
		{
			switch(listitem)
			{
				case 0://pubgon
				{
					if(PlayerInfo[playerid][xAdmin] < 1339) return greska(playerid,"Niste ovlasteni da palite PUBG event.");
					if(PUBGenum[xPokrenut] == 1) return greska(playerid,"PUBG je vec pokrenut od strane nekog administratora!");
					if(PUBGenum[xPoceoMatch] == 1) return greska(playerid,"PUBG match trenutno traje.");
					if(PUBGenum[xZapocetoUcitavanje] == 1) return greska(playerid, "Vec je zapoceto ucitavanje PUBG matcha!");
					new pubg_event_announce[300], broj_potrebnih_igraca = 10;
					//if(sscanf(params,"i",broj_potrebnih_igraca)) return SendUsageMessage(playerid,"/pubgon [ broj igraca ]");
					//if(broj_potrebnih_igraca > 10) return greska(playerid,"Maksimalno PUBG moze igrati 10 igraca!");
					//if(broj_potrebnih_igraca <= 3) return greska(playerid,"Broj ne moze biti 3 ili manji od 3. (Minimalno 4 igraca)");
					format(pubg_event_announce,sizeof(pubg_event_announce),""col_balkanstory"[ PUBG EVENT ]{ffffff}: Admin %s je upravo pokrece PUBG event. Potrebno %i igraca!",ImeIgraca(playerid),broj_potrebnih_igraca);
					PUBGenum[xTrebaIgraca] = broj_potrebnih_igraca;
					SCMA(-1,""col_balkanstory"[ PUBG EVENT ]{ffffff}: Zapoceto je ucitavanje komponenti igre...");
					RemovePUBGVehicles();
					RemovePUBGLoot();
					pubg_srw = SetTimerEx("ucitavanje_pubg",2000,false,"si",ImeIgraca(playerid),broj_potrebnih_igraca);
					//pubgstat_timer = SetTimer("pubgtdupdate", 1000, true);
					PUBGenum[xZapocetoUcitavanje] = 1;
					return 1;
				}
				case 1:
				{
					if(PlayerInfo[playerid][xAdmin] < 1339) return greska(playerid, "Vi niste ovlasteni da palite Sniper Event.");
					if(AdminDuty[playerid] != true) return greska(playerid, "Vi niste na admin duznosti.");
					if(sniperevent == 1)
					{
						sniperevent = 0;
						SendInfoMessage(playerid, "Vi ste iskljucili Sniper Event.");
						new i;
						for( i = 0; i < MAX_PLAYERS; i++ )
						{
							announcement(i, "Sniper Event je iskljucen!");
						}
						SCMA(-1, ""col_balkanstory"[Sniper Event]{ffffff}: Sniper Event je iskljucen od strane administratora!");
						return 1;
					}
					if(sniperevent == 0)
					{
						sniperevent = 1;
						SendInfoMessage(playerid, "Vi ste ukljucili Sniper Event.");
						SCMA(-1, ""col_balkanstory"[Sniper Event]{ffffff}: Sniper Event je ukljucen od strane administratora!"col_balkanstory" [/snipereventinfo]");
						new i;
						for( i = 0; i < MAX_PLAYERS; i++ )
						{
							announcement(i, "Sniper Event je ukljucen!");
						}
						return 1;
					}
				}
				case 2:
				{
					if(PlayerInfo[playerid][xAdmin] < 1339) return greska(playerid, "Vi niste ovlasteni da palite Present Hunt Event.");
					if(AdminDuty[playerid] != true) return greska(playerid, "Vi niste na admin duznosti.");
					if(presenthuntevent == 1)
					{
						presenthuntevent = 0;
						SendInfoMessage(playerid, "Vi ste iskljucili Present Hunt Event.");
						new i;
						for( i = 0; i < MAX_PLAYERS; i++ )
						{
							announcement(i, "Present Hunt Event je iskljucen!");
						}
						SCMA(-1, ""col_balkanstory"[Present Hunt Event]{ffffff}: Present Hunt Event je iskljucen od strane administratora!");
						return 1;
					}
					if(presenthuntevent == 0)
					{
						presenthuntevent = 1;
						SendInfoMessage(playerid, "Vi ste ukljucili Present Hunt Event.");
						SCMA(-1, ""col_balkanstory"[Present Hunt Event]{ffffff}: Present Hunt Event je ukljucen od strane administratora!"col_balkanstory" [/snipereventinfo]");
						new i;
						for( i = 0; i < MAX_PLAYERS; i++ )
						{
							announcement(i, "Present Hunt Event je ukljucen!");
						}
						return 1;
					}
				}
			}
		}
	}
	else if( dialogid == dialog_EVENTSTART )
	{
		if( !response ) return 1;
		if( response )
		{
		
			if( listitem < 10 )
			{
			
				new ideventa = (listitem+1) + (EventStranica[ playerid ]-10);
				new gFile[ 35 ];
				format( gFile, 35, EVENT_FILE, ideventa );
				if( !fexist( gFile ) ) return GRESKA( playerid, "Izabrali ste event koji nepostoji." );
				if( EventInfo[ eID ] != 0 ) return GRESKA( playerid, "Vec je ukljucen jedan event, koristi /stopevent." );
				if( Event[ ideventa ][ VehID ] == 0 ) return GRESKA( playerid, "Ovaj event nije kreiran." );
				
				EventInfo[ eID ] = ideventa;
				EventInfo[ EventTime ] = MAX_TIME;
				EventInfo[ Drivers ] = 0;

				Event[ EventInfo[ eID ] ][ PrivremeniX1 ] = Event[ EventInfo[ eID ] ][ TCPX ];
				Event[ EventInfo[ eID ] ][ PrivremeniY1 ] = Event[ EventInfo[ eID ] ][ TCPY ];
				Event[ EventInfo[ eID ] ][ PrivremeniX2 ] = Event[ EventInfo[ eID ] ][ TCPX2 ];
				Event[ EventInfo[ eID ] ][ PrivremeniY2 ] = Event[ EventInfo[ eID ] ][ TCPY2 ];
				new strinse[300];
				format( strinse, sizeof( strinse ), ""col_balkanstory"%s | {FFFFFF}Je pokrenut i krece za "SERVERBOJA_AQUA"30 sekundi {FFFFFF}da ucestvujete u eventu "SERVERBOJA_AQUA"/join", Event[ EventInfo[ eID ] ][ Name ] );
				SCMA( -1, strinse );
				new strins2[128];
				format( strins2, sizeof( strins2 ), ""col_balkanstory"EVENT | "SERVERBOJA_AQUA"%s {FFFFFF}je pokrenuo event "SERVERBOJA_AQUA"%s", ImeIgraca( playerid ), Event[ EventInfo[ eID ] ][ Name ] );
				AdminPoruka( 0x6495EDAA, strins2 );

			}
			else if( listitem == 10 ) {
			
				if( EventStranica[ playerid ] == 100 ) return GRESKA( playerid, "Ne moze dalje." );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] += 10;
				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

				}
			
				format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSljedeca strana ->\n", DialogStrgEx );
				format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna strana", DialogStrgEx );

				
				ShowPlayerDialog( playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
			else if( listitem == 11 ) {

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				EventStranica[ playerid ] -= 10;
				
				for( new i = (EventStranica[ playerid ]-9); i <= EventStranica[ playerid ]; i++ ) {

					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, Event[ i ][ Name ] );

				}
			  
				if( EventStranica[ playerid ] > 10 ) {
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSljedeca strana ->\n", DialogStrgEx );
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s<- Prethodna strana", DialogStrgEx );
				}
				else if( EventStranica[ playerid ] <= 10 ) {
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%sSljedeca strana ->\n", DialogStrgEx );
				}
				
				ShowPlayerDialog( playerid, dialog_EVENTSTART, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
	}
	else if( dialogid == dialog_BUY_GPS ) {
		if( !response ) return true;

		new requiredMoney = 500,
			gpsLevel = 1,
			dString[ 128 ]
		;

		format( dString, sizeof( dString ), "Uspjesno ste kupili Osnovi GPS" );

		switch( listitem ) {
			case MEDIUM_GPS: {
				format( dString, sizeof( dString ), "Uspjesno ste kupili Srednji GPS" );
				requiredMoney = 750;
				gpsLevel = 2;
			}
			case ADVANCED_GPS: {
				format(dString, sizeof(dString), "Uspjesno ste kupili Napredni GPS");
				requiredMoney = 1000;
				gpsLevel = 3;
			}
		}

		if( PlayerInfo[ playerid ][ xNovac ] < requiredMoney ) return GRESKA( playerid, "Nemate dovoljno novca." );
		DajIgracuNovac( playerid, -requiredMoney );
		BussinesMoney( uFirmi[ playerid ], requiredMoney / 10);

		SendClientMessagee( playerid, BELA, dString);
		PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );
		PlayerInfo[ playerid ][ xGpsLevel ] = gpsLevel;
	}
	

	else if( dialogid == dialog_BIRALOCGPSBG )
	{
		if( !response ) return true;
		if(response)
		{
			switch( pMappedType[ playerid ] )
			{
				case MAPPED_IMPORTANT:
				{
					listitem++;
					setPlayerGps( playerid, BGgpsInfo[ listitem ][ BGgpsPos ][ 0 ], BGgpsInfo[ listitem ][ BGgpsPos ][ 1 ], BGgpsInfo[ listitem ][ BGgpsPos ][ 2 ] );
				}
			}
		}
	}


	else if( dialogid == dialog_BIRALOCGPSSA )
	{
		if( !response ) return true;
		if(response)
		{
			switch( pMappedType[ playerid ] )
			{
				case MAPPED_IMPORTANT:
				{
					listitem++;
					setPlayerGps( playerid, SAgpsInfo[ listitem ][ SAgpsPos ][ 0 ], SAgpsInfo[ listitem ][ SAgpsPos ][ 1 ], SAgpsInfo[ listitem ][ SAgpsPos ][ 2 ] );
				}
			}
		}
	}
	
	else if( dialogid == dialog_BIRALOCGPSZG )
	{
		if( !response ) return true;
		if(response)
		{
			switch( pMappedType[ playerid ] )
			{
				case MAPPED_IMPORTANT:
				{
					listitem++;
					setPlayerGps( playerid, ZGgpsInfo[ listitem ][ ZGgpsPos ][ 0 ], ZGgpsInfo[ listitem ][ ZGgpsPos ][ 1 ], ZGgpsInfo[ listitem ][ ZGgpsPos ][ 2 ] );
				}
			}
		}
	}
	
	else if( dialogid == dialog_BIRALOCGPSOS )
	{
		if( !response ) return true;
		if(response)
		{
			switch( pMappedType[ playerid ] )
			{
				case MAPPED_IMPORTANT:
				{
					listitem++;
					setPlayerGps( playerid, OSgpsInfo[ listitem ][ OSgpsPos ][ 0 ], OSgpsInfo[ listitem ][ OSgpsPos ][ 1 ], OSgpsInfo[ listitem ][ OSgpsPos ][ 2 ] );
				}
			}
		}
	}

	else if( dialogid == dialog_BIRAGRADZAGPSLOC )
	{
		pMappedType[ playerid ] = MAPPED_NONE;
		if( !response ) return true;
		if(response)
		{
			switch( listitem )
			{

				case 0:
				{
					pMappedType[ playerid ] = MAPPED_IMPORTANT;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_BGGPS; i++ )
					{
						new filename[ 32 ];
						format( filename, sizeof( filename ), F_BGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGgpsInfo[ i ][ BGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRALOCGPSBG, DSL, "Beogradske lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1:
				{

					pMappedType[ playerid ] = MAPPED_IMPORTANT;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_SAGPS; i++ )
					{
						new filename[ 32 ];
						format( filename, sizeof( filename ), F_SAGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAgpsInfo[ i ][ SAgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRALOCGPSSA, DSL, "Sarajevske lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{

					pMappedType[ playerid ] = MAPPED_IMPORTANT;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_ZGGPS; i++ )
					{
						new filename[ 32 ];
						format( filename, sizeof( filename ), F_ZGGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGgpsInfo[ i ][ ZGgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRALOCGPSZG, DSL, "Zagrebacke lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
				case 3:
				{
				
					pMappedType[ playerid ] = MAPPED_IMPORTANT;
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 1; i < MAX_OSGPS; i++ )
					{
						new filename[ 32 ];
						format( filename, sizeof( filename ), F_OSGPS, i );
						if( fexist( filename ) )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSgpsInfo[ i ][ OSgpsName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_BIRALOCGPSOS, DSL, "Ostale lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );

				}
			}
		}
	}
	
	
	else if( dialogid == dialog_GPS_FIND )
	{
		pMappedType[ playerid ] = MAPPED_NONE;
		if( !response ) return true;

		dStyle = DSL;
		strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

		switch( listitem )
		{
			case 0:
			{
				ShowPlayerDialog( playerid, dialog_BIRAGRADZAGPSLOC, dStyle, "Izaberite grad", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
			}
			
			case 1:
			{
				pMappedType[ playerid ] = MAPPED_HOUSE;
				ShowPlayerDialog( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			}
			case 2: {
				pMappedType[ playerid ] = MAPPED_BUSINESS;
				ShowPlayerDialog( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
			}
			case 3: {
				pMappedType[ playerid ] = MAPPED_JOB;
				
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				for( new i = 0; i < 10; i++ ) {
					format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%d - %s\n", DialogStrgEx, i+1, jobsInfos[ i ][ jName ] );
				}

				ShowPlayerDialog( playerid, dialog_GPS, dStyle, "Izaberi lokaciju", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			}
		}
		return true;
	}
	else if( dialogid == dialog_GPS ) {
		if( !response ) return true;

		switch( pMappedType[ playerid ] )
		{
			case MAPPED_IMPORTANT:
			{
				listitem++;
				setPlayerGps( playerid, BGgpsInfo[ listitem ][ BGgpsPos ][ 0 ], BGgpsInfo[ listitem ][ BGgpsPos ][ 1 ], BGgpsInfo[ listitem ][ BGgpsPos ][ 2 ] );
			}
			case MAPPED_HOUSE: {
				pMappedType[ playerid ] = MAPPED_HOUSE;
				new broj, filename[ 64 ];
				if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id imovine do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
				format( filename, sizeof( filename ), IM_FILE, broj );
				if( !fexist( filename ) ) return GRESKA( playerid, "ID te imovine ne postoji u bazi podataka!" );
				setPlayerGps( playerid, II[ broj ][ iEnter ][ 0 ], II[ broj ][ iEnter ][ 1 ], II[ broj ][ iEnter ][ 2 ] );
			}
			case MAPPED_JOB: {
				setPlayerGps( playerid, jobsInfos[ listitem ][ jPos ][ 0 ], jobsInfos[ listitem ][ jPos ][ 1 ], jobsInfos[ listitem ][ jPos ][ 2 ] );
			}
			case MAPPED_BUSINESS: {
				pMappedType[ playerid ] = MAPPED_BUSINESS;
				new broj, filename[ 64 ];
				if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_GPS, DSI, "Izaberi lokaciju.", "Unesite id firme do koje zelite da odete.", D_ODABERI, D_ODUSTANI );
				format( filename, sizeof( filename ), F_FILE, broj );
				if( !fexist( filename ) ) return GRESKA( playerid, "ID te firme ne postoji u bazi podataka!" );
				setPlayerGps( playerid, BussinesInfo[ broj ][ bEnterX ], BussinesInfo[ broj ][ bEnterY ], BussinesInfo[ broj ][ bEnterZ ] );
			}
		}
	}
	else if( dialogid == dialog_WAR && response ) {
		if( listitem == 0 ) { ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_1, DSL, "Izaberi mapu", "Mapa 1 - Abandoned\nMapa 2 - RC Battlefield\nMapa 3 - Skladiste\nMapa 4 - United\nMapa 5 - Farma", "Odaberi", "Ponisti"); }
		if( listitem == 1 ) { ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti"); }
		if( listitem == 2 ) { ShowPlayerDialog( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti"); }
	}
	else if( dialogid == dialog_WARIZBACI && response ) {
		if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return GRESKA( playerid, "Niste u waru." );
		new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( WARInfo[ w ][ WARAktivan ] == false ) return GRESKA( playerid, "War nije jos startovan.");
		if( igrac == IPI ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xLider ] ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] == -1 ) return ShowPlayerDialog( playerid, dialog_WARIZBACI, DSI, "Izbacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		Dimi_SetPlayerHealth( igrac, 100 );

		Dimi_SetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
		SetPlayerVirtualWorld( igrac, VirtualWWAR[ igrac ] );
		SetPlayerInterior( igrac, InteriorWAR[ igrac ] );
		antiCheatCS[ igrac ][ WeaponDetect ] = 3;
		ResetAllWeapons( igrac );
		WARPInfo[ igrac ][ WARIgrac ] = -1;
		ResetujWarIgraca( igrac );
		if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 0 ]--; }
		if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) { WARInfo[ w ][ WARTimClanovi ][ 1 ]--; }

		SendClientMessagee( playerid, -1, "Izbacio si clana." );

		WarTDControl( igrac, false );
	}
	else if( dialogid == dialog_WARUBACI && response ) {
		if( WARPInfo[ playerid ][ WARIgrac ] == -1 ) return GRESKA( playerid, "Niste u waru." );
		new igrac, w = WARPInfo[ playerid ][ WARIgrac ];
		if( sscanf( inputtext, "u", igrac ) ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( WARInfo[ w ][ WARAktivan ] == false ) return GRESKA( playerid, "War nije jos startovan.");
		if( igrac == playerid ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( igrac == IPI ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( PlayerInfo[ igrac ][ xClan ] != PlayerInfo[ playerid ][ xLider ] ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( WARPInfo[ igrac ][ WARIgrac ] != -1 ) return ShowPlayerDialog( playerid, dialog_WARUBACI, DSI, "Ubacivanje igraca", "Unesite id igraca iz tvog tima", "Uredu", "Ponisti");
		if( PlayerCP[ igrac ] > 0 ) return GRESKA( playerid, "Ne mozete ubaciti igraca koji je na eventu." );
		if( PlayerInfo[ igrac ][ xWanted ] > 0 ) return GRESKA( playerid, "Ne mozete ubaciti igraca koji ima wanted level." );
		if( PlayerInfo[ igrac ][ xZatvor ] > 0 ) return GRESKA( playerid, "Ne mozete ubaciti igraca koji ima je u zatvoru." );
		if( WARPInfo[ playerid ][ WARTim ][ 0 ] == true ) {
			if( WARInfo[ w ][ WARTimClanovi ][ 0 ] >= WARInfo[ w ][ WARMaxClanova ] ) return GRESKA(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
			InteriorWAR[ igrac ] = GetPlayerInterior( igrac );
			new rand1 = random( sizeof( RandomWARMapa11 ) );
			new rand21 = random( sizeof( RandomWARMapa21 ) );
			new rand31 = random( sizeof( RandomWARMapa31 ) );
			new rand41 = random( sizeof( RandomWARMapa41 ) );
			new rand51 = random( sizeof( RandomWARMapa51 ) );
			if(WARInfo[ w ][ WARMapa ] == 1 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
				SetPlayerInterior( playerid, 0 );
			}
			else if(WARInfo[ w ][ WARMapa ] == 2 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa21[ rand21 ][ 0 ], RandomWARMapa21[ rand21 ][ 1 ],RandomWARMapa21[ rand21 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
			else if(WARInfo[ w ][ WARMapa ] == 3 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa31[ rand31 ][ 0 ], RandomWARMapa31[ rand31 ][ 1 ],RandomWARMapa31[ rand31 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if(WARInfo[ w ][ WARMapa ] == 4 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa41[ rand41 ][ 0 ], RandomWARMapa41[ rand41 ][ 1 ],RandomWARMapa41[ rand41 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if(WARInfo[ w ][ WARMapa ] == 5 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa51[ rand51 ][ 0 ], RandomWARMapa51[ rand51 ][ 1 ],RandomWARMapa51[ rand51 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}


			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( igrac, w );
			Dimi_SetPlayerHealth( igrac, 100 );
			Dimi_SetPlayerArmour( igrac, 100 );

			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;

			ResetujWarIgraca( igrac );
			WARPInfo[ igrac ][ WARTim ][ 0 ] = true;
			WARPInfo[ igrac ][ WARIgrac ] = w;
			new string[ 128 ];
			format( string, sizeof( string ), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			SendClientMessagee( igrac, -1, string );
			SendClientMessagee( igrac, -1, "War chat /wp /warnapusti." );
			SendClientMessagee( playerid, -1, "Ubacio si clana." );

			WarTDControl( igrac, true );
			SetWarStatsTD( w );
		}
		else if( WARPInfo[ playerid ][ WARTim ][ 1 ] == true ) {
			if( WARInfo[ w ][ WARTimClanovi ][ 1 ] >= WARInfo[ w ][ WARMaxClanova ] ) return GRESKA(playerid, "Imate maksimalan broj clanova u waru!");

			GetPlayerPos( igrac, PozicijaWAR[ igrac ][ 0 ], PozicijaWAR[ igrac ][ 1 ],  PozicijaWAR[ igrac ][ 2 ] );
			VirtualWWAR[ igrac ] = GetPlayerVirtualWorld( igrac );
			InteriorWAR[ igrac ] = GetPlayerInterior( igrac );

			new rand2 = random( sizeof( RandomWARMapa12 ) );
			new rand22 = random( sizeof( RandomWARMapa22 ) );
			new rand32 = random( sizeof( RandomWARMapa32 ) );
			new rand42 = random( sizeof( RandomWARMapa42 ) );
			new rand52 = random( sizeof( RandomWARMapa52 ) );
			if( WARInfo[ w ][ WARMapa ] == 1 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 2 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa22[ rand22 ][ 0 ], RandomWARMapa22[ rand22 ][ 1 ],RandomWARMapa22[ rand22 ][ 2 ] );
				SetPlayerInterior( igrac, 10 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 3 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa32[ rand32 ][ 0 ], RandomWARMapa32[ rand32 ][ 1 ],RandomWARMapa32[ rand32 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 4 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa42[ rand42 ][ 0 ], RandomWARMapa42[ rand42 ][ 1 ],RandomWARMapa42[ rand42 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 5 ) {
				Dimi_SetPlayerPos( igrac, RandomWARMapa52[ rand52 ][ 0 ], RandomWARMapa52[ rand52 ][ 1 ],RandomWARMapa52[ rand52 ][ 2 ] );
				SetPlayerInterior( igrac, 0 );
			}

			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( igrac, WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( igrac, w );
			Dimi_SetPlayerHealth( igrac, 100 );
			Dimi_SetPlayerArmour( igrac, 100 );

			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;

			ResetujWarIgraca( igrac );
			WARPInfo[ igrac ][ WARTim ][ 1 ] = true;
			WARPInfo[ igrac ][ WARIgrac ] = w;

			new string[ 128 ];
			format( string, sizeof( string ), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			SendClientMessagee( igrac, -1, string );
			SendClientMessagee( igrac, -1, "War chat /wp /warnapusti." );
			SendClientMessagee( playerid, -1, "Ubacio si clana." );

			WarTDControl( igrac, true );
			SetWarStatsTD( w );
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_1 && response) {
		if( PlayerInfo[ playerid ][ xZatvor ] != 0 ) return GRESKA( playerid, "Ne mozes u waru dok si u jailu." );
		new warid = -1;
		for( new w = 1; w < MAX_WARS; w ++) {
			if( WARInfo[ w ][ WARAktivan ] == false && WARInfo[ w ][ WARKreiranje ] == false ) {
				warid = w;
				break;
			}
		}
		if( warid == -1 ) return GRESKA( playerid, "Vec ima 10 warova u toku, sacekajte da se neki zavrsi." );
		KreiranjeWara[ playerid ] = warid;
		WARInfo[ warid ][ WARKreiranje ] = true;
		WARInfo[ warid ][ WARAktivan ] = false;
		WARInfo[ warid ][ WARCena ] = 0;
		if( listitem == 0 ) { WARInfo[ warid ][ WARMapa ] = 1; }
		if( listitem == 1 ) { WARInfo[ warid ][ WARMapa ] = 2; }
		if( listitem == 2 ) { WARInfo[ warid ][ WARMapa ] = 3; }
		if( listitem == 3 ) { WARInfo[ warid ][ WARMapa ] = 4; }
		if( listitem == 4 ) { WARInfo[ warid ][ WARMapa ] = 5; }
		ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_2, DSL, "Izaberi oruzje slot 1", "Deagle\nColt 45\nSilenced Pistol", "Odaberi", "Ponisti" );
	}
	else if( dialogid == dialog_WAR_ZAKAZI_2 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ];
			if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 24; }
			if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 22; }
			if( listitem == 2 ) { WARInfo[ w ][ WAROruzje ][ 0 ] = 23; }
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_3, DSL, "Izaberi oruzje slot 2", "Uzi\nMP5", "Odaberi", "Ponisti");
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_3 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ];
			if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 28; }
			if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 1 ] = 29; }
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_4, DSL, "Izaberi oruzje slot 3", "AK-47\nM4", "Odaberi", "Ponisti");
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_4 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ];
			if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 30; }
			if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 2 ] = 31; }
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_5, DSL, "Izaberi oruzje slot 4", "Country Rifle\nShotgun", "Odaberi", "Ponisti");
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_5 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ];
			if( listitem == 0 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 33; }
			if( listitem == 1 ) { WARInfo[ w ][ WAROruzje ][ 3 ] = 25; }
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_9 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ], novac;
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
			if( PlayerInfo[ playerid ][ xNovac ] < novac ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DSI, "Nemate dovoljno novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");
			if( novac < 0 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_9, DSI, "Ulaganje novca", "Unesite para koliko zelite da ulozite u war, protivncki lider mora isto toliko da ulozi(Ako uneses 0 onda nema uloga).", "Odaberi", "Ponisti");

			WARInfo[ w ][ WARCena ] = novac;
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_6 ) {
		if( response ) {
			new maxigraca, w = KreiranjeWara[ playerid ];
			if( sscanf( inputtext, "i", maxigraca ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
			if( maxigraca < 3 || maxigraca > 10 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_6, DSI, "Maximum clanova", "Upisite koliko maximum clanova ce biti u waru(3-10).", "Odaberi", "Ponisti");
			WARInfo[ w ][ WARMaxClanova ] = maxigraca;
			ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_7 ) {
		if( response ) {
			new id, w = KreiranjeWara[ playerid ], string[ 128 ];
			if( sscanf( inputtext, "u", id ) ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( id == IPI ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( PlayerInfo[ playerid ][ xLider ] == PlayerInfo[ id ][ xLider ] ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( PlayerInfo[ id ][ xLider ] < 1 ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( id == playerid ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_PD && OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_MD && OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_CNN && OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_HITM && OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_ELEK && OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] == ORG_TIP_TAXI ) return ShowPlayerDialog( playerid, dialog_WAR_ZAKAZI_7, DSI, "Lider Protivnika", "Upisite id lidera protivnicke orge.", "Odaberi", "Ponisti" );
			if( PlayerInfo[ id ][ xZatvor ] != 0 ) return GRESKA( playerid, "Ne mozes u waru pozvati lidera koji je u jailu." );
			WARInfo[ w ][ WARTimLider ][ 0 ] = playerid;
			WARInfo[ w ][ WARTimLider ][ 1 ] = id;
			KreiranjeWara[ id ] = w;

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) ); 
			format( string, sizeof( string ), ""col_orange"Oruzje 1: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 0 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_orange"Oruzje 2: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 1 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_orange"Oruzje 3: "col_white"%s\n", WeaponInfos[ WARInfo[ w ][ WAROruzje ][ 2 ] ][ wName ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_orange"Maksimalni broj clanova: "col_white"%d\n\n", WARInfo[ w ][ WARMaxClanova ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_orange"Ulog novca: "col_white"%d$\n\n", WARInfo[ w ][ WARCena ] );
			strcat( DialogStrgEx, string );
			format( string, sizeof( string ), ""col_orange"Lider "col_white"%s "col_orange"vam je poslao zahtev za war.Izaberi:", getOrgName( PlayerInfo[ playerid ][ xClan ] ) );
			strcat( DialogStrgEx, string );
			ShowPlayerDialog( id, dialog_WAR_ZAKAZI_8, DSMSG, "Zahtev za war", DialogStrgEx, "Prihvati", "Odbij" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		}
		else if( !response ) {
			new w = KreiranjeWara[ playerid ];
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_WAR_ZAKAZI_8 ) {
		if( response ) {
			new w = KreiranjeWara[ playerid ];
			if( PlayerInfo[ playerid ][ xNovac ] < WARInfo[ w ][ WARCena ] ) return GRESKA( playerid, "Nemate dovoljno novca za ulog." );

			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 1 ], -1, ""col_orange"WAR | "col_white"Prihvatio si poziv za war ubaci svoje igrace!");
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 0 ], -1, ""col_orange"WAR | "col_white"Igrac je prihvatio poziv za war ubaci svoje igrace!");

			DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 0 ], -WARInfo[ w ][ WARCena ] );
			DajIgracuNovac( WARInfo[ w ][ WARTimLider ][ 1 ], -WARInfo[ w ][ WARCena ] );

			GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ 2 ] );
			VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
			InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ] );

			GetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 0 ], PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 1 ],  PozicijaWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ 2 ] );
			VirtualWWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ] );
			InteriorWAR[ WARInfo[ w ][ WARTimLider ][ 1 ] ] = GetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ] );

			if( WARInfo[ w ][ WARMapa ] == 1 ) {
				new rand1 = random( sizeof( RandomWARMapa11 ) );
				new rand2 = random( sizeof( RandomWARMapa12 ) );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa11[ rand1 ][ 0 ], RandomWARMapa11[ rand1 ][ 1 ],RandomWARMapa11[ rand1 ][ 2 ] );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa12[ rand2 ][ 0 ], RandomWARMapa12[ rand2 ][ 1 ],RandomWARMapa12[ rand2 ][ 2 ] );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 2 ) {
				new rand1 = random( sizeof( RandomWARMapa21 ) );
				new rand2 = random( sizeof( RandomWARMapa22 ) );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa21[ rand1 ][ 0 ], RandomWARMapa21[ rand1 ][ 1 ],RandomWARMapa21[ rand1 ][ 2 ] );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa22[ rand2 ][ 0 ], RandomWARMapa22[ rand2 ][ 1 ],RandomWARMapa22[ rand2 ][ 2 ] );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 10 );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 10 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 3 ) {
				new rand1 = random( sizeof( RandomWARMapa31 ) );
				new rand2 = random( sizeof( RandomWARMapa32 ) );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa31[ rand1 ][ 0 ], RandomWARMapa31[ rand1 ][ 1 ],RandomWARMapa31[ rand1 ][ 2 ] );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa32[ rand2 ][ 0 ], RandomWARMapa32[ rand2 ][ 1 ],RandomWARMapa32[ rand2 ][ 2 ] );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 4 ) {
				new rand1 = random( sizeof( RandomWARMapa41 ) );
				new rand2 = random( sizeof( RandomWARMapa42 ) );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa41[ rand1 ][ 0 ], RandomWARMapa41[ rand1 ][ 1 ],RandomWARMapa41[ rand1 ][ 2 ] );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa42[ rand2 ][ 0 ], RandomWARMapa42[ rand2 ][ 1 ],RandomWARMapa42[ rand2 ][ 2 ] );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}
			else if( WARInfo[ w ][ WARMapa ] == 5 ) {
				new rand1 = random( sizeof( RandomWARMapa51 ) );
				new rand2 = random( sizeof( RandomWARMapa52 ) );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 0 ], RandomWARMapa51[ rand1 ][ 0 ], RandomWARMapa51[ rand1 ][ 1 ],RandomWARMapa51[ rand1 ][ 2 ] );
				Dimi_SetPlayerPos( WARInfo[ w ][ WARTimLider ][ 1 ], RandomWARMapa52[ rand2 ][ 0 ], RandomWARMapa52[ rand2 ][ 1 ],RandomWARMapa52[ rand2 ][ 2 ] );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 0 ], 0 );
				SetPlayerInterior( WARInfo[ w ][ WARTimLider ][ 1 ], 0 );
			}

			WARInfo[ w ][ WARAktivan ] = true;

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 0 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 0 ], w );
			Dimi_SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );
			Dimi_SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 0 ], 100 );

			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 0 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 1 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 2 ], 300 );
			GiveWeaponToPlayer( WARInfo[ w ][ WARTimLider ][ 1 ], WARInfo[ w ][ WAROruzje ][ 3 ], 300 );
			SetPlayerVirtualWorld( WARInfo[ w ][ WARTimLider ][ 1 ], w );
			Dimi_SetPlayerHealth( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );
			Dimi_SetPlayerArmour( WARInfo[ w ][ WARTimLider ][ 1 ], 100 );

			WARInfo[ w ][ WARTeamID ][ 0 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ];
			WARInfo[ w ][ WARTeamID ][ 1 ] = PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ];

			WARInfo[ w ][ WARTimClanovi ][ 0 ]++;
			WARInfo[ w ][ WARTimClanovi ][ 1 ]++;

			WARInfo[ w ][ WARTimer ] = SetTimerEx( "ZaustaviWAR", 10*60000, false, "d", w );
			WARInfo[ w ][ TimerWARMin ] = 1; WARInfo[ w ][ TimerWARSec ] =0;
			WARInfo[ w ][ TimerWAROstaloVreme ] = SetTimerEx( "TimerWAROstaloVremeB", 1000, true, "d", w );

			ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] );
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARTim ][ 0 ] = true;
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ WARIgrac ] = w;

			ResetujWarIgraca( WARInfo[ w ][ WARTimLider ][ 1 ] );
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARTim ][ 1 ] = true;
			WARPInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ WARIgrac ] = w;

			new string[ 128 ];
			format( string, sizeof( string ), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 0 ], -1, string );
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 0 ], -1, "War chat /wp." );

			format( string, sizeof( string ), ""col_orange"WAR "col_white"| "col_orange"Tim 1: "col_white"%s "col_white"| "col_orange"Tim 2: "col_white"%s", getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 1 ], -1, string );
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 1 ], -1, "War chat /wp." );

			WarTDControl( WARInfo[ w ][ WARTimLider ][ 0 ], true );
			WarTDControl( WARInfo[ w ][ WARTimLider ][ 1 ], true );
			SetWarStatsTD( w );
			
			format( globalstring, sizeof( globalstring ), "{FF0000}|| WAR || "SERVERBOJA_AQUA"%s {FFFFFF}je pokrenuo war izmedju "SERVERBOJA_AQUA"%s i %s", ImeIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			AdminPoruka( -1, globalstring );
			
			new string12[ 128 ]; 
			format( string12, sizeof( string12 ), "Igrac %s je pokrenuo war izmedju %s i %s", ImeIgraca( WARInfo[ w ][ WARTimLider ][ 0 ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 0 ] ][ xClan ] ), getOrgName( PlayerInfo[ WARInfo[ w ][ WARTimLider ][ 1 ] ][ xClan ] ) );
			LogSave( "Ostalo/LogWAR.log", string12 );

		}
		else {
			new w = KreiranjeWara[ playerid ];
			SendClientMessagee( WARInfo[ w ][ WARTimLider ][ 0 ], -1, "Protivnicki Lider je odbio poziv za war!" );
			WARInfo[ w ][ WARKreiranje ] = false;
			WARInfo[ w ][ WARAktivan ] = false;
			KreiranjeWara[ WARInfo[ w ][ WARTimLider ][ 0 ] ] = -1;
			KreiranjeWara[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_DOGLAS ) {
		if( !response ) return 1;
		if( response ) {
			new CHB = 5;
			if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return GRESKA( playerid, "Nemate dovoljno UG bodova." );
			new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) ) return ShowPlayerDialog( playerid, dialog_DOGLAS, DSI, D_NASLOV, "Unesi oglas koji zelite da objavite", D_ODABERI, D_ODUSTANI );
			format( globalstring, sizeof( globalstring ), "Oglas: %s, Kontakt: %s Broj: %d",  text, ImeIgraca( playerid ), PlayerInfo[ playerid ][ xBrojTelefona ] );
			OOCNews( 0x00D900C8, globalstring );
			PlayerInfo[ playerid ][ xBrojTelefona ] = strval( inputtext );
			SavePlayer( playerid );
			SendClientMessagee( playerid, SVETLOCRVENA, "Dali ste oglas za bodove!" );
		}
	}
	else if( dialogid == dialog_IZMENABROJA ) {
		if( !response ) return 1;
		if( response ) {
			new CHB = 10;
			if( strlen( inputtext ) != 6 ) return GRESKA( playerid, "Mora biti samo 6 cifara!" );
			if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return GRESKA( playerid, "Nemate dovoljno UG bodova.");
			if( !IsNumeric( inputtext ) ) return GRESKA( playerid, "Moze samo brojevi." );
			if( strval( inputtext ) < 100000 ) return GRESKA( playerid, "Pogresan broj." );
			PlayerInfo[ playerid ][ xVIPLevel ] -= CHB;
			PlayerInfo[ playerid ][ xBrojTelefona ] = strval( inputtext );
			SavePlayer( playerid );
			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste broj u "col_white"%s!", inputtext );
			SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d CHB imate jos %d CHB.", CHB, PlayerInfo[ playerid ][ xVIPLevel ] );
		}
	}
	else if( dialogid == dialog_EMAIL ) {
		if( !response ) return 1;
		if( response ) {
			new CHB = 50;
			if( PlayerInfo[ playerid ][ xVIPLevel ] < CHB ) return GRESKA( playerid, "Nemate dovoljno UG bodova.");
			new mailstring = strfind( inputtext, "@", true ), tackastring = strfind( inputtext, ".", true );
			if( mailstring == -1 || tackastring == -1 ) {
				ShowPlayerDialog( playerid, dialog_EMAIL, DSI, D_NASLOV, "U prazni prostor ispod unesite vasu e-mail adresu.\nE-mail adresa ce nam posluziti u vracanju vasih passworda.(Bez maila nema vracanja passworda)", "Unos", "Izlaz");
			}
			PlayerInfo[ playerid ][ xVIPLevel ] -= CHB;
			strmid( PlayerInfo[ playerid ][ xEmail ], inputtext, 0, strlen( inputtext ), 34 );
			SavePlayer( playerid );
			SendClientMessageEx( playerid, SVETLOCRVENA, "Promenili ste email u "col_white"%s!", inputtext );
			SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d CHB imate jos %d CHB.", CHB, PlayerInfo[ playerid ][ xVIPLevel ] );
		}
	}
	else if( dialogid == dialog_PROPERTYLIST ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) return GRESKA( playerid, "Nemate imovinu u slotu 1." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 0 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 0 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) return GRESKA( playerid, "Nemate imovinu u slotu 2." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 1 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 1 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) return GRESKA( playerid, "Nemate imovinu u slotu 3." );
					if( strcmp( ImeIgraca( playerid ), II[ PlayerInfo[ playerid ][ xProperty ][ 2 ] ][ iOwner ], true) == 0 ) {
						ChosenProperty[ playerid ] = PlayerInfo[ playerid ][ xProperty ][ 2 ];
						ShowPlayerDialog( playerid, dialog_PROPCHOSEN, DSL, D_NASLOV, "Informacije\nZakljucaj/Otkljucaj\nUnapredi\nOrmar\nSef\n{F81414}Prodaj drzavi\n{F81414}Prodaj igracu\n{FFFFFF}Rentanje\nUzimanje novca\nOstavljanje novca", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
			}
		}
	}
	else if( dialogid == dialog_PROPCHOSEN ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					new hid = ChosenProperty[ playerid ];
					if( GetNearestProperty( playerid ) != hid && inProperty[ playerid ] != hid ) return GRESKA( playerid, "Niste pored svoje imovine ili u njoj!" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"%s "col_white"- "col_balkanstory"ID: "col_white"%d\n\n",  GetPropertyAName( hid ), hid );
					strcat( DialogStrgEx, globalstring);
					
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"Novac: "col_white"%d\n", II[ hid ][ iMoney ] );
					strcat( DialogStrgEx, globalstring );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"Broj rentova: "col_white"%d\n", II[ hid ][ iRentovano ] );
					strcat( DialogStrgEx, globalstring );
					strcat( DialogStrgEx, ""col_balkanstory"_____________"col_white"_____________\n" );
					if( II[ hid ][ iLocked ] == 1 )
						strcat( DialogStrgEx, ""col_balkanstory"Status vrata: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_balkanstory"Status vrata: "col_white"Otkljucano\n");
					strcat( DialogStrgEx, ""col_balkanstory"_____________"col_white"_____________\n" );
					if( II[ hid ][ iLockLevel ] == 0)
						strcat( DialogStrgEx, ""col_balkanstory"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Kvaliteta brave: "col_white"%d\n",  II[ hid ][ iLockLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_balkanstory"_____________"col_white"_____________\n" );
					if( II[ hid ][ iDoorLevel ] == 0 )
						strcat( DialogStrgEx, ""col_balkanstory"Kvalitet vrata: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Kvalitet vrata: "col_white"%d level\n",  II[ hid ][ iDoorLevel ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_balkanstory"_____________"col_white"_____________\n" );
					if( II[ hid ][ iOrmar ] > 0) {
						strcat( DialogStrgEx, ""col_balkanstory"Ormar: "col_white"Ima\n" );
					} else strcat( DialogStrgEx, ""col_balkanstory"Ormar: "col_white"Nema\n" );
					strcat( DialogStrgEx, ""col_balkanstory"_____________"col_white"_____________\n" );
					if( II[ hid ][ iAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Alarm level: "col_white"%d",  II[ hid ][ iAlarm ] );
						strcat( DialogStrgEx, globalstring );
					} else strcat( DialogStrgEx, ""col_balkanstory"Alarm: "col_white"Nema" );
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: {
					new id = ChosenProperty[ playerid ];
					if( GetNearestProperty( playerid ) != id && inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste pored svoje imovine ili u njoj!" );
					if( strcmp( ImeIgraca( playerid ), II[ id ][ iOwner ], true) == 0 ) {
						if( II[ id ][ iLocked ] == 0 ) {
							II[ id ][ iLocked ] = 1;
							announcement( playerid, "~w~Imovina ~r~zakljucana", 5000, 6 );
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s zakljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
						}
						else {
							II[ id ][ iLocked ] = 0;
							announcement( playerid, "~w~Imovina ~g~otkljucana", 5000, 6 );
							PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0 );
							format( globalstring, sizeof( globalstring ), "* %s otkljucava %s.", ImeIgraca( playerid ), GetPropertyName( id ) );
							PorukaRadius(10.0, playerid, globalstring, LJUBICASTA );
						}
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 2: {
					new id = ChosenProperty[ playerid ];
					if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					ShowPlayerDialog( playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
					new id = ChosenProperty[ playerid ];
					if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					if( II[ inProperty[ playerid ] ][ iOrmar ] != 1 ) return GRESKA( playerid, "U ovoj imovini nema ormara!");
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
						ShowPlayerDialog( playerid, dialog_ORMAR, DSL, D_NASLOV, "Stavi trenutnu odecu u ormar\nUdji u ormar\nIzbaci odecu iz ormara", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 4: {
					new id = ChosenProperty[ playerid ];
					if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
						new hid = inProperty[ playerid ];
						new i = GetNearestFurniture( playerid, inProperty[ playerid ] );
						if( GetNearestFurniture( playerid, inProperty[ playerid ] ) == -1 ) return GRESKA( playerid, "Nema objekta u blizini." );
						if( Furniture[ hid ][ i ][ f_Model ] != 2332 ) return GRESKA( playerid, "Niste pored sefa." );
						ShowPlayerDialog( playerid, dialog_SAFEALL, DSL, D_NASLOV, "Informacije\nPromeni lozinku\nOtkljucaj/Zakljucaj\n(Coming soon...)\n(Coming soon...)\nOstavi oruzje\nUzmi oruzje\nOstavi materijale\nUzmi materijale", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 5: {
					new id = ChosenProperty[ playerid ];
					if( GetNearestProperty( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje imovine!" );
					if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
						ShowPlayerDialog( playerid, dialog_PROPSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu imovinu drzavi?", "Da", "Ne" );

					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 6: {
					new id = ChosenProperty[ playerid ];
					if( GetNearestProperty( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje imovine!" );
					ShowPlayerDialog( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imovina", "Ponudi", D_ODUSTANI );
				}
				case 7: {
					new id = ChosenProperty[ playerid ];
					if( GetNearestProperty( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje imovine!" );
					if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
						
						ShowPlayerDialog( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );
					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 8: {
					new id = ChosenProperty[ playerid ];
					if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
				}
				case 9: {
					new id = ChosenProperty[ playerid ];
					if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
					ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_PROPTAKEMONEY ) {
		if( !response ) return 1;
		if( response ) {
			new novac, id = ChosenProperty[ playerid ];
			if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 100000000 ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > II[ id ][ iMoney ] ) return ShowPlayerDialog( playerid, dialog_PROPTAKEMONEY, DSI, D_NASLOV, "Unesite koliko zelite da uzmete novca iz imovine.", D_ODABERI, D_ODUSTANI );

			II[ id ][ iMoney ] -= novac;
			SaveProperty( id );
			DajIgracuNovac( playerid, novac );
			SendInfoMessage( playerid, "Uzeli ste %d$ iz sefa.", novac );
		}
	}
	else if( dialogid == dialog_PROPPUTMONEY ) {
		if( !response ) return 1;
		if( response ) {
			new novac, id = ChosenProperty[ playerid ];
			if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac < 0 || novac > 100000000 ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return ShowPlayerDialog( playerid, dialog_PROPPUTMONEY, DSI, D_NASLOV, "Unesite koliko zelite da ostavite novca u imovine.", D_ODABERI, D_ODUSTANI );

			II[ id ][ iMoney ] += novac;
			SaveProperty( id );
			DajIgracuNovac( playerid, -novac );
			SendInfoMessage( playerid, "Ostavili ste %d$ u sef.", novac );
		}
	}
	else if( dialogid == dialog_RENTABLE ) {
		if( !response ) return 1;
		if( response ) {
			new cena, id = ChosenProperty[ playerid ];
			if( sscanf( inputtext, "i", cena ) ) return ShowPlayerDialog( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );
			if( cena < 0 || cena > 1000 ) return ShowPlayerDialog( playerid, dialog_RENTABLE, DSI, D_NASLOV, "Unesite cijenu renta.\nAko uneses 0 nema rentanja u vasoj kuci.\nMaksimalna cena je 1000$", D_ODABERI, D_ODUSTANI );

			if( cena == 0 ) {
				II[ id ][ iRentable ] = 0;
				II[ id ][ iRentPrice ] = 0;
				
				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ugasili ste mogucnost rentanja." );
			}
			else if( cena > 0 ) {
				II[ id ][ iRentable ] = 1;
				II[ id ][ iRentPrice ] = cena;
				
				PropertyRefresh( id );
				SaveProperty( id );
				SendInfoMessage( playerid, "Ukljucili ste mogucnost rentanja za %d$.", cena );
			}
		}
	}
	else if( dialogid == dialog_PROPSELLDRZAVA ) {
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
			new id = ChosenProperty[ playerid ];
			if( GetNearestProperty( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje imovine!" );
			if( strcmp( ImeIgraca( playerid ), II[ GetNearestProperty( playerid ) ][ iOwner ], true) == 0 ) {
				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
				else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
				else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == id ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

				new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

				strmid( II[ GetNearestProperty( playerid ) ][ iOwner], "Drzava", 0, strlen( "Drzava" ), 32);
				DajIgracuNovac( playerid, (II[ GetNearestProperty( playerid ) ][ iPrice ]/2) );
				II[ GetNearestProperty( playerid ) ][ iNeaktivnost ] = 0;
				II[ GetNearestProperty( playerid ) ][ iOwned ] = 0; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				SavePlayer( playerid ); PropertyRefresh( GetNearestProperty( playerid ) ); SaveProperty( GetNearestProperty( playerid ) );

			} else GRESKA( playerid, "Ovo nije vase.." );
		}
		if( !response ) {
			SendClientMessagee( playerid, -1, "Odustali ste od prodaje imovine drzavi" );
		}
	}
	else if( dialogid == dialog_PROPSELLTP ) {
		if( !response ) return 1;
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas imovinu dok ne izadjes iz minusa u banci." );
			new id = ChosenProperty[ playerid ];
			new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_PROPSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imovina", "Ponudi", D_ODUSTANI );
			GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return GRESKA( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return GRESKA( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return GRESKA( playerid, "Unijeli ste pogresan ID igraca, isti nije dostupan - pokusajte ponovno kasnije!" );
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati kucu!");
			if( PlayerInfo[ idigraca ][ xProperty ][ 0 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 1 ] != -1 && PlayerInfo[ idigraca ][ xProperty ][ 2 ] != -1 )return GRESKA( playerid, "Igrac vec ima 3 imovine!");
			if( PlayerInfo[ idigraca ][ xLevel ] < II[ id ][ iLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu imovinu, on mora biti level %d+.", II[ id ][ iLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu imovinu za %d", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTPROP, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
		}
	}
	else if( dialogid == dialog_ACCEPTPROP) {
		if( response ) {
			new id = GlobalID[ playerid ];
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca.");

			if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 0 ] = -1; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 1 ] = -1; }
			else if( PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] == id ) { PlayerInfo[ GlobalProdaja[ playerid ] ][ xProperty ][ 2 ] = -1; }

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = id; }
			else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = id; }
			else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = id; }

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );
			
			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspjesno ste kupili imovinu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			strmid( II[ id ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveProperty( id ); PropertyRefresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste kucu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendClientMessagee( playerid, -1, "Kupili ste kucu!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu imovine!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_SAFEALL ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					new hid = inProperty[ playerid ];
					new wepname1[32], wepname2[32], wepname3[32], wepname4[32];
					#if nerp_droga == 1
					new drug1 = II[ hid ][ iDrugCode ][ 0 ],
					drug2 = II[ hid ][ iDrugCode ][ 1 ],
					drug3 = II[ hid ][ iDrugCode ][ 2 ],
					drug4 = II[ hid ][ iDrugCode ][ 3 ],
					drug5 = II[ hid ][ iDrugCode ][ 4 ],
					drug6 = II[ hid ][ iDrugCode ][ 5 ],
					drug7 = II[ hid ][ iDrugCode ][ 6 ],
					drug8 = II[ hid ][ iDrugCode ][ 7 ],
					drug9 = II[ hid ][ iDrugCode ][ 8 ],
					drug10 = II[ hid ][ iDrugCode ][ 9 ];
					#endif
					if( II[ hid ][ iOruzje ][ 0 ] != 0)
						format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
						format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
						strmid(wepname2, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 2 ] != 0)
						format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
						strmid(wepname3, "None", 0, 5);

					if( II[ hid ][ iOruzje ][ 3 ] != 0)
						format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
						strmid(wepname4, "None", 0, 5);

					if( II[ hid ][ iSafeStatus ] == 1 ) {
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
						
						format( globalstring, sizeof( globalstring ), ""col_white"Novac: %d$\n\n", II[ hid ][ iMoney ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Materijali: %d\n", II[ hid ][ iMats ] );
						strcat( DialogStrgEx, globalstring );

						strcat( DialogStrgEx, ""col_red"______________ORUZJE______________\n" );
						#if nerp_droga == 1
						format( globalstring, sizeof( globalstring ), ""col_white"Slot 1: %s(%d g) | Slot 2: %s(%d g)\n", GetDrugNameByDrugID(drug1), II[ hid ][ iDrug ][ 0 ], GetDrugNameByDrugID(drug2), II[ hid ][ iDrug ][ 1 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 3: %s(%d g) | Slot 4: %s(%d g)\n", GetDrugNameByDrugID(drug3), II[ hid ][ iDrug ][ 2 ], GetDrugNameByDrugID(drug4), II[ hid ][ iDrug ][ 3 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 5: %s(%d g) | Slot 6: %s(%d g)\n", GetDrugNameByDrugID(drug5), II[ hid ][ iDrug ][ 4 ], GetDrugNameByDrugID(drug6), II[ hid ][ iDrug ][ 5 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 7: %s(%d g) | Slot 8: %s(%d g)\n", GetDrugNameByDrugID(drug7), II[ hid ][ iDrug ][ 6 ], GetDrugNameByDrugID(drug8), II[ hid ][ iDrug ][ 7 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 9: %s(%d g) | Slot 10: %s(%d g)\n\n", GetDrugNameByDrugID(drug9), II[ hid ][ iDrug ][ 8 ], GetDrugNameByDrugID(drug10), II[ hid ][ iDrug ][ 9 ] );
						strcat( DialogStrgEx, globalstring );

						strcat( DialogStrgEx, ""col_red"______________DROGA______________\n" );
						#endif
						format( globalstring, sizeof( globalstring ), ""col_white"Slot 1:[%s]    |    Metaka: %d\n", wepname1, II[ hid ][ iMunicija ][ 0 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, II[ hid ][ iMunicija ][ 1 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 3:[%s]    |    Metaka: %d\n", wepname3, II[ hid ][ iMunicija ][ 2 ] );
						strcat( DialogStrgEx, globalstring );

						format( globalstring, sizeof( globalstring ), "Slot 4:[%s]    |    Metaka: %d", wepname4, II[ hid ][ iMunicija ][ 3 ] );
						strcat( DialogStrgEx, globalstring );

						ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
						strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));

					}
					else return GRESKA( playerid, "Sef je zakljucan!");
				}
				case 1: {
					ShowPlayerDialog( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.\nUnesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 1 ) {
						II[ hid ][ iSafeStatus ] = 0; SaveProperty( hid );
						SendClientMessagee( playerid, UGBOJA, "Indetitet potvrdjen. Sef je zakljucan!");
					}
					else {
						ShowPlayerDialog( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
					}
				}
				case 3: {
					#if nerp_droga == 1
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					ShowPlayerDialog( playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
					#endif
				}
				case 4: {
					#if nerp_droga == 1
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					ShowPlayerDialog( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
					#endif
				}
				case 5: {
					if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM ) {
						GRESKA( playerid, "MUP/SAJ/HITMAN ne moze ubaciti oruzje u sef!");
						return 1;
					}
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return GRESKA( playerid, "Ne mozes ovo dok si u waru." );
					if( NaDmEventu[ playerid ] == true ) return GRESKA( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
					new hid = inProperty[ playerid ];
					
					if( ForbiddenWeap( playerid ) ) return GRESKA( playerid, "Ne mozes ubaciti zabranjena oruzja u sef." );
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0 && II[ hid ][ iOruzje ][ 1 ] != 0 && II[ hid ][ iOruzje ][ 2 ] != 0 && II[ hid ][ iOruzje ][ 3 ] != 0 ) return GRESKA( playerid, "Slotovi za oruzja su zauzeti!");
					if( II[ hid ][ iOruzje ][ 0 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 0 ] + GetPlayerAmmo( playerid ) ) < 501 ) {

							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							II[ hid ][ iMunicija ][ 0 ] = GetPlayerAmmo( playerid );
							II[ hid ][ iOruzje ][ 0 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 1 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							II[ hid ][ iMunicija ][ 1 ] = GetPlayerAmmo( playerid );
							II[ hid ][ iOruzje ][ 1 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 2 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 2 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							II[ hid ][ iMunicija ][ 2 ] = GetPlayerAmmo( playerid );
							II[ hid ][ iOruzje ][ 2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
					else if( II[ hid ][ iOruzje ][ 3 ] == 0) {
						if( ( II[ hid ][ iMunicija ][ 3 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							II[ hid ][ iMunicija ][ 3 ] = GetPlayerAmmo( playerid );
							II[ hid ][ iOruzje ][ 3 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveProperty( hid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u sef.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA( playerid, "U 1 slotu mozete staviti najvise 500 metaka!");
					}
				}
				case 6: {
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					new wepname1[32], wepname2[32], wepname3[32], wepname4[32];
					if( II[ hid ][ iOruzje ][ 0 ] == 0 && II[ hid ][ iOruzje ][ 1 ] == 0 && II[ hid ][ iOruzje ][ 2 ] == 0 && II[ hid ][ iOruzje ][ 3 ] == 0 ) return GRESKA( playerid, "Svi slotovi su prazni!");
					if( II[ hid ][ iOruzje ][ 0 ] != 0)
						format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 0 ] ] );
					else
						format(wepname1, sizeof(wepname1), "None");

					if( II[ hid ][ iOruzje ][ 1 ] != 0)
						format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 1 ] ] );
					else
						format(wepname2, sizeof(wepname2), "None");

					if( II[ hid ][ iOruzje ][ 2 ] != 0)
						format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 2 ] ] );
					else
						format(wepname3, sizeof(wepname3), "None");

					if( II[ hid ][ iOruzje ][ 3 ] != 0)
						format( wepname4, sizeof( wepname4 ), "%s", WeapNames[ II[ hid ][ iOruzje ][ 3 ] ] );
					else
						format(wepname4, sizeof(wepname4), "None");
					PropertySafeGun[ playerid ] = hid;
					format( globalstring, sizeof( globalstring ), "%s\n%s\n%s\n%s", wepname1, wepname2, wepname3, wepname4 );
					ShowPlayerDialog( playerid, dialog_PROPERTYWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
				}
				case 7: {
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					ShowPlayerDialog( playerid, dialog_SAFEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );
				}
				case 8: {
					new hid = inProperty[ playerid ];
					if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
					ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_SAFEPUTMATS ) {

		if( !response ) return 1;
		if( response ) {

			new kolicina, izbor = inProperty[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );

			if( PlayerInfo[ playerid ][ xMaterijali ] == 0 ) return GRESKA( playerid, "Nemate materijale kod vas!" );
			if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xMaterijali ] ) return GRESKA( playerid, "Nemate toliko materijala kod vas!");

			if( (II[ izbor ][ iMats ]+kolicina) > 10000 ) return GRESKA( playerid, "Najvise u sefu moze stati 10000 materijala." );

			PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;

			format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Stavili ste %d materijala u sef.", kolicina );

			II[ izbor ][ iMats ] += kolicina;

			SaveProperty( izbor );

		}
	}
	else if( dialogid == dialog_SAFETAKEMATS ) {

		if( !response ) return 1;
		if( response ) {

			new kolicina, izbor = inProperty[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje.", D_ODABERI, D_ODUSTANI );

			if( II[ izbor ][ iMats ] == 0 ) return GRESKA( playerid, "Nema materijala u sefu!" );
			if( kolicina < 1 || kolicina > II[ izbor ][ iMats ] ) return GRESKA( playerid, "Nemate toliko materijala u sefu!");

			PlayerInfo[ playerid ][ xMaterijali ] += kolicina;

			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sef.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Uzeli ste %d materijala iz sef.", kolicina );

			II[ izbor ][ iMats ] -= kolicina;

			SaveProperty( izbor );
		}
	}
	else if( dialogid == dialog_SAFETAKEDRUG ) {
		if( !response ) return 1;
		if( response ) {
			#if nerp_droga == 1
			new slot, slot2, kolicina, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u imovini i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
			if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
			if( slot < 1 || slot > 10 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( II[ hid ][ iDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Ova imovina nema drogu pod tim slotom!");
			if( kolicina < 1 || kolicina > II[ hid ][ iDrug ][ slot2 ] ) return GRESKA( playerid, "Ova imovina nema toliko droge pod tim slotom!");


			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = II[ hid ][ iDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = II[ hid ][ iDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = II[ hid ][ iDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = II[ hid ][ iDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = II[ hid ][ iDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}
			else return GRESKA( playerid, "Svi slotovi su puni." );
			
			II[ hid ][ iDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Uzeli ste %d grama %s iz sefa.", kolicina, GetDrugNameByDrugID( II[ hid ][ iDrugCode ][ slot2 ] ) );

			if( II[ hid ][ iDrug ][ slot2 ] <= 0 )
				II[ hid ][ iDrugCode ][ slot2 ] = 0;

			SaveProperty( hid );
			#endif
		}
	}
	else if( dialogid == dialog_SAFEPUTDRUG ) {
		if( !response ) return 1;
		if( response ) {
			#if nerp_droga == 1
			new slot, slot2, kolicina, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return ShowPlayerDialog( playerid, dialog_SAFEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
			if( II[ hid ][ iSafeStatus ] == 0 ) return GRESKA( playerid, "Sef je zakljucan!");
			if( slot < 1 || slot > 5 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Nemate droge pod tim slotom!" );
			if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return GRESKA( playerid, "Nemate toliko droge pod tim slotom!");
			if( kolicina > 500 ) return GRESKA( playerid, "Najvise u 1 slotu sefa moze stati 500g droge." );
			if( II[ hid ][ iDrugCode ][ 0 ] != 0 && II[ hid ][ iDrugCode ][ 1 ] != 0 && II[ hid ][ iDrugCode ][ 2 ] != 0 && II[ hid ][ iDrugCode ][ 3 ] != 0 && II[ hid ][ iDrugCode ][ 4 ] != 0 &&
				II[ hid ][ iDrugCode ][ 5 ] != 0 && II[ hid ][ iDrugCode ][ 6 ] != 0 && II[ hid ][ iDrugCode ][ 7 ] != 0 && II[ hid ][ iDrugCode ][ 8 ] != 0 && II[ hid ][ iDrugCode ][ 9 ] != 0) return GRESKA( playerid, "Svih 10 slotova kuce su zauzeti!");

			PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Stavili ste %d grama %s u sef.", kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

			if( II[ hid ][ iDrugCode ][ 0 ] == 0 ) {
				II[ hid ][ iDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 0 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 1 ] == 0) {
				II[ hid ][ iDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 1 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 2 ] == 0) {
				II[ hid ][ iDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 2 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 3 ] == 0) {
				II[ hid ][ iDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 3 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 4 ] == 0) {
				II[ hid ][ iDrugCode ][ 4 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 4 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 5 ] == 0) {
				II[ hid ][ iDrugCode ][ 5 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 5 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 6 ] == 0) {
				II[ hid ][ iDrugCode ][ 6 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 6 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 7 ] == 0) {
				II[ hid ][ iDrugCode ][ 7 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 7 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 8 ] == 0) {
				II[ hid ][ iDrugCode ][ 8 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 8 ] = kolicina;
			}
			else if( II[ hid ][ iDrugCode ][ 9 ] == 0) {
				II[ hid ][ iDrugCode ][ 9 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				II[ hid ][ iDrug ][ 9 ] = kolicina;
			}
			SaveProperty( hid );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0)
				PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;

			#endif
		}
	}
	else if( dialogid == dialog_SAFEUNLOCK ) {
		if( !response ) return 1;
		if( response ) {
			new sifra, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", sifra ) ) return ShowPlayerDialog( playerid, dialog_SAFEUNLOCK, DSI, D_NASLOV, "Unesi svoju lozinku sefa za otkljucavanje.", D_ODABERI, D_ODUSTANI );
			if( II[ hid ][ iSafeStatus ] == 1 ) return GRESKA( playerid, "Sef je vec otkljucan!" );
			if( sifra != II[ hid ][ iSafePass ] ) return GRESKA( playerid, "Sifra je pogresna." );
			II[ hid ][ iSafeStatus ] = 1; SaveProperty( hid );
			SendClientMessagee( playerid, UGBOJA, "Indetitet potvrdjen. Sef je otkljucan!");
		}
	}
	else if( dialogid == dialog_SAFECHANGEPASS ) {
		if( !response ) return 1;
		if( response ) {
			new sifra, hid = inProperty[ playerid ];
			if( sscanf( inputtext, "d", sifra ) ) return ShowPlayerDialog( playerid, dialog_SAFECHANGEPASS, DSI, D_NASLOV, "Unesi novu lozinku za sef.", D_ODABERI, D_ODUSTANI );
			if( sifra < 111111 || sifra > 999999 ) return GRESKA( playerid, "Nevaljana kombinacija. Sifra mora biti u brojevima i mora biti u duzini od 6 karaktera.");
			II[ hid ][ iSafePass ] = sifra; SaveProperty( hid );
			SendClientMessagee( playerid, UGBOJA, "Sifra je promjenjena. Nemojte je zaboravit!");
			SendClientMessageEx( playerid, BELA, "Nova sifra: %d", sifra );
		}
	}
	else if( dialogid == dialog_PROPUNAPREDI ) {
		if( !response ) return 1;
		if( response ) {
			new broj, id = ChosenProperty[ playerid ];
			if( sscanf( inputtext, "d", broj ) ) return ShowPlayerDialog( playerid, dialog_PROPUNAPREDI, DSI, D_NASLOV, "Izaberite broj: 1. ormar, 2. sef, 3. alarm, 4. brava, 5. vrata.\nCene:ormar(250$), sef(250$), alarm(500$), brava(300$), vrata(100$)", D_ODABERI, D_ODUSTANI );
			if( broj == 1 ) {
				if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 250 ) return GRESKA( playerid, "Nemate dovoljno novca!");
				if( II[ inProperty[ playerid ] ][ iOrmar ] == 1 ) return GRESKA( playerid, "Vasa imovina vec ima ormar!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 ) {
					DajIgracuNovac( playerid, -250 );
					II[ inProperty[ playerid ] ][ iOrmar ] = 1;
					SaveProperty( inProperty[ playerid ] );
					SendInfoMessage( playerid, "Uspjesno ste kupili ormar za vasu imovinu.");
				} else GRESKA( playerid, "Ovo nije vase.." );
			}
			else if( broj == 2 ) {
				if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 250 ) return GRESKA( playerid, "Nemate dovoljno novca!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
				{
					new Float:X, Float:Y, Float:Z, Float:A, i = (MAX_X_OBJECTS+2), hid = inProperty[ playerid ];
					GetPlayerPos( playerid, X, Y, Z ); GetPlayerFacingAngle( playerid, A );

					for( new a = 0; a < MAX_X_OBJECTS; a++ ) {
						if( !Furniture[ hid ][ a ][ f_Model ] ) {
							i = a;
							break;
						} else continue;
					}

					if( i != (MAX_X_OBJECTS+2) ) {
						DajIgracuNovac( playerid, -250 );
						Furniture[ hid ][ i ][ f_Model ] = 2332;
						Furniture[ hid ][ i ][ f_X ] = X;
						Furniture[ hid ][ i ][ f_Y ] = Y;
						Furniture[ hid ][ i ][ f_Z ] = Z;
						Furniture[ hid ][ i ][ f_rX ] = 0.0;
						Furniture[ hid ][ i ][ f_rY ] = 0.0;
						Furniture[ hid ][ i ][ f_rZ ] = A;
						Furniture[ hid ][ i ][ f_VW ] = GetPlayerVirtualWorld( playerid );
						Furniture[ hid ][ i ][ f_Object ] = CreateDynamicObject( Furniture[ hid ][ i ][ f_Model ], Furniture[ hid ][ i ][ f_X ], Furniture[ hid ][ i ][ f_Y ], Furniture[ hid ][ i ][ f_Z ], Furniture[ hid ][ i ][ f_rX ], Furniture[ hid ][ i ][ f_rY ], Furniture[ hid ][ i ][ f_rZ ], II[ hid ][ iVW ], II[ hid ][ iInterior ], -1, 200.0 );
						Streamer_Update( playerid );
						PlayerEditObject( playerid, Furniture[ hid ][ i ][ f_Object ] );
						SendClientMessagee( playerid, UGBOJA, "Pozicioniraj sefa.");
						SendClientMessagee( playerid, BELA, "Koristite ~k~~PED_SPRINT~ da bi pomerali kameru." );
						SaveFurniture( hid ); SaveProperty( hid ); ObjectEdition_TYPE[ playerid ] = i;
					} else {
						GRESKA( playerid, "Svi slotovi su zauzeti");
						GRESKA( playerid, "Koristi /namestaj izbrisi za brisanje");
					}
				} else GRESKA( playerid, "Ovo nije vase.." );
			}
			else if( broj == 3 ) {
				if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 500 ) return GRESKA( playerid, "Nemate dovoljno novca(500$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
				{
					if( II[ inProperty[ playerid ] ][ iAlarm ] == 4 ) return GRESKA( playerid, "Vec imate najveci moguci level alarma!");
					II[ inProperty[ playerid ] ][ iAlarm ] ++;
					DajIgracuNovac( playerid, -500 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessagee( playerid, SVETLOPLAVA, "Unapredili ste vas alarm za 1 level!");
					SaveProperty( inProperty[ playerid ] );
				} else GRESKA( playerid, "Ovo nije vase.." );
			}
			else if( broj == 4 ) {
				if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 100 ) return GRESKA( playerid, "Nemate dovoljno novca(100$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
				{
					if( II[ inProperty[ playerid ] ][ iLockLevel ] == 4 ) return GRESKA( playerid, "Vec imate najveci moguci level brave!");
					II[ inProperty[ playerid ] ][ iLockLevel ] ++;
					DajIgracuNovac( playerid, -100 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessagee( playerid, SVETLOPLAVA, "Unapredili ste vasu bravu za 1 level!");
					SaveProperty( inProperty[ playerid ] );
				} else GRESKA( playerid, "Ovo nije vase.." );
			}
			else if( broj == 5 ) {
				if( inProperty[ playerid ] != id ) return GRESKA( playerid, "Niste u vasoj kuci/stanu/vikendici." );
				if( PlayerInfo[ playerid  ][ xNovac ] < 300 ) return GRESKA( playerid, "Nemate dovoljno novca(300$)!");
				if( strcmp( ImeIgraca( playerid ), II[ inProperty[ playerid ] ][ iOwner ], true) == 0 )
				{
					if( II[ inProperty[ playerid ] ][ iDoorLevel ] == 5 ) return GRESKA( playerid, "Vec imate najveci moguci level vrata!");
					II[ inProperty[ playerid ] ][ iDoorLevel ] ++;
					DajIgracuNovac( playerid, -300 );
					PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessagee( playerid, SVETLOPLAVA, "Unapredili ste vasa vrata za 1 level!");
					SaveProperty( inProperty[ playerid ] );
				} else GRESKA( playerid, "Ovo nije vase.." );
			}
			else GRESKA( playerid, "Pogresan broj." );
		}
	}
	else if( dialogid == dialog_VEHLIST )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == 0 ) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
					format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 0 ] );
					if( fexist( vFile ) )
					{
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vOwner ], true ) == 0 )
						{
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 0 ];
							ShowPlayerDialog( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj drzavi\nSkini tuning\nNeon\nGepek\nBoja", "Odaberi", "Nazad" );
						}
						else
						{
							SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else
					{
						SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 1:
				{
					if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == 0 ) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
					format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 1 ] );
					if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 1 ];
							ShowPlayerDialog( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
						}
						else {
							SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
						SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == 0 ) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
					format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 2 ] );
					if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 2 ];
							ShowPlayerDialog( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
						}
						else {
							SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
						SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == 0 ) return GRESKA( playerid, "Ti ne posedujes vozilo u ovom slotu.");
					new vFile[ 50 ];
					format( vFile, sizeof( vFile ), V_FILE, PlayerInfo[ playerid ][ xVoziloID ][ 3 ] );
					if( fexist( vFile ) ) {
						if( strcmp( ImeIgraca( playerid ), VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vOwner ], true ) == 0 ) {
							ChosenVehicle[ playerid ] = PlayerInfo[ playerid ][ xVoziloID ][ 3 ];
							ShowPlayerDialog( playerid, dialog_VEHCHOSEN, DSL, "Vozilo", "Informacije\nParkiraj\nLociraj\nUgradi GPS\nProdaj igracu\nProdaj otpadu\nMakni tuning\nNeon\nGepek\nPromeni boju", "Odaberi", "Nazad" );
						}
						else {
							SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Ovo vozilo nije u vasem vlasnistvu, obratite se na forumu ako mislite je greska." );
						}
					}
					else {
						SendClientMessagee( playerid, ANTICHEAT, "{FF0000}| AC |:"col_white" Vase vozilo ne postoji u bazi podataka, obratite se na forumu ako mislite je greska." );
					}
				}
			}
		}
	}
	else if( dialogid == dialog_VEHCHOSEN )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					new izbor = ChosenVehicle[ playerid ];
					
					//if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
					format( globalstring, sizeof( globalstring ), ""col_white"___________"col_balkanstory"Vozilo: "col_white"%s ["col_balkanstory"Model ID: "col_white"%d]___________\n\n", ImeVozila[ VehicleInfo[ izbor ][ vModel ]-400 ],  VehicleInfo[ izbor ][ vModel ] );
					strcat( DialogStrgEx, globalstring);

					format( globalstring, sizeof( globalstring ), ""col_balkanstory"Kljuc vozila: "col_white"%d\n", izbor );
					strcat( DialogStrgEx, globalstring);
					
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"ID vozila: "col_white"%d\n", VehicleInfo[ izbor ][ vID ] );
					strcat( DialogStrgEx, globalstring);

					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");

					if( VehicleInfo[ izbor ][ vReg ] == 1 )
					{
					
						new tablice[ 50 ];
						if( 10 > VehicleInfo[ izbor ][ vID ] ) { format( tablice, sizeof( tablice ), "LS 000%d.", VehicleInfo[ izbor ][ vID ] ); }
						else if( 10 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 100 ) { format( tablice , sizeof( tablice ), "LS 00%d.", VehicleInfo[ izbor ][ vID ] ); }
						else if( 100 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 1000 ) { format( tablice, sizeof( tablice ), "LS 0%d.", VehicleInfo[ izbor ][ vID ] ); }
						else if( 1000 <= VehicleInfo[ izbor ][ vID ] && VehicleInfo[ izbor ][ vID ] < 2001 ) { format( tablice, sizeof( tablice ), "LS %d.", VehicleInfo[ izbor ][ vID ] ); }
					
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Registracija: "col_white"%s\n",  tablice );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else if( VehicleInfo[ izbor ][ vReg ] == 2 ) {
					
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Registracija: "col_white"%s\n",  VehicleInfo[ izbor ][ vTablice ] );
						strcat( DialogStrgEx, globalstring);
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Registrovan jos: "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						strcat( DialogStrgEx, globalstring);
					}
					else
					{
					
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Vase vozilo je neregistrovano. "col_white"%dh\n",  VehicleInfo[ izbor ][ vRegVreme ] );
						strcat( DialogStrgEx, globalstring);
						strcat( DialogStrgEx, "Na -720h vase vozilo se prodaje na aukciju\n" );
					}
					
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLocked ] == 1)
						strcat( DialogStrgEx, ""col_balkanstory"Status brave: "col_white"Zakljucano\n");
					else
						strcat( DialogStrgEx, ""col_balkanstory"Status brave: "col_white"Otkljucano\n");
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"Vrsta goriva: "col_white"%s\n", GetVehicleFuelType( VehicleInfo[ izbor ][ vID ] ) );
					strcat( DialogStrgEx, globalstring);
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"Predjena kilometraza: "col_white"%d\n", VehicleInfo[ izbor ][ vKilometri ] );
					strcat( DialogStrgEx, globalstring);
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vLock ] == 0)
						strcat( DialogStrgEx, ""col_balkanstory"Kvaliteta brave: "col_white"Nekvalitetna\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Kvaliteta brave: "col_white"%d\n",  VehicleInfo[ izbor ][ vLock ] );
						strcat( DialogStrgEx, globalstring);
					}
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vImobilizator ] == 0)
						strcat( DialogStrgEx, ""col_balkanstory"Imobilizator: "col_white"Nekvalitetan\n");
					else {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Imobilizator level: "col_white"%d\n",  VehicleInfo[ izbor ][ vImobilizator ] );
						SendClientMessagee( playerid, BELA, globalstring);
					}
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					
					if( VehicleInfo[ izbor ][ vAlarm ] > 0) {
						format( globalstring, sizeof( globalstring ), ""col_balkanstory"Alarm level: "col_white"%d\n",  VehicleInfo[ izbor ][ vAlarm] );
						strcat( DialogStrgEx, globalstring);
					} else strcat( DialogStrgEx, ""col_balkanstory"Alarm: "col_white"Nema\n");
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					if( VehicleInfo[ izbor ][ vGPS ] > 0) {
						if( VehicleInfo[ izbor ][ vGPS ] == 1)
							strcat( DialogStrgEx, ""col_balkanstory"GPS: "col_white"Jednostavan\n");
						else if( VehicleInfo[ izbor ][ vGPS ] == 2)
							strcat( DialogStrgEx, ""col_balkanstory"GPS: "col_white"Napredan\n");
					} else strcat( DialogStrgEx, ""col_balkanstory"GPS: "col_white"Nema\n");

					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1:
				{
					new izbor = ChosenVehicle[ playerid ], Float:HP, Float:Pos[ 4 ];

					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					if( GetPlayerVehicleSeat( playerid ) != 0) return GRESKA( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
					if( IsPlayerInArea( playerid, 1486.062, -1776.608, 1653.387, -1567.377 ) ) return GRESKA( playerid, "Ne mozete parkirati auto u blizini policije!");
					if( IsPlayerInArea( playerid, 1136.201, -1014.694, 1311.132, -856.7839 ) ) return GRESKA( playerid, "Ne mozete parkirati auto u blizini burga!");
					if( IsPlayerInArea( playerid, 1383.386, -1077.857, 1554.513, -947.582 ) ) return GRESKA (playerid, "Ne mozete parkirati auto u blizini banke!");
					GetVehicleHealth( GetPlayerVehicleID( playerid ), HP );
					if( HP < 800.0 ) return GRESKA( playerid, "Motor vam je previse ostecen, ne mozete ga parkirati.");

					GetVehiclePos( VehicleInfo[ izbor ][ vID ], Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
					GetVehicleZAngle( VehicleInfo[ izbor ][ vID ], Pos[ 3 ] );
					
					VehicleInfo[ izbor ][ vVirtualWorld ] = GetPlayerVirtualWorld( playerid );
					VehicleInfo[ izbor ][ vInterior ] = GetPlayerInterior( playerid );
					
					VehicleInfo[ izbor ][ vLokacijaX ] = Pos[ 0 ];
					VehicleInfo[ izbor ][ vLokacijaY ] = Pos[ 1 ];
					VehicleInfo[ izbor ][ vLokacijaZ ] = Pos[ 2 ];
					VehicleInfo[ izbor ][ vLokacijaA ] = Pos[ 3 ];

					DestroyVehicle( VehicleInfo[ izbor ][ vID ] );
					VehicleInfo[ izbor ][ vID ] = Dimi_CreateVehicle( izbor, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[ izbor ][ vModel ], VehicleInfo[ izbor ][ vLokacijaX ], VehicleInfo[ izbor ][ vLokacijaY ], VehicleInfo[ izbor ][ vLokacijaZ ]+1.0, VehicleInfo[ izbor ][ vLokacijaA ], VehicleInfo[ izbor ][ vColor1 ], VehicleInfo[ izbor ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vVirtualWorld ] );

					TuneVehicle( izbor );
					
					SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 0, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ izbor ][ vID ] ) ) {
						SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 1, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
					}

					SaveVehicle( izbor );
					
					SendInfoMessage( playerid, "Uspjesno ste parkirali vozilo!");
				}
				case 2: {
					new izbor = ChosenVehicle[ playerid ];
					if( VehicleInfo[ izbor ][ vGPS ] == 0 ) return GRESKA( playerid, "Ne posjedujete GPS na ovom vozilu.");
					if( GetPVarInt( playerid, "LocatingCar" ) == 0 ) {
						announcement( playerid, "~y~spajanje na satelit...", 4000, 1);
						SetPVarInt( playerid, "GPSConnectTimer", SetTimerEx("GPSConnect", 5000, 0, "iii", playerid, 1, VehicleInfo[ izbor ][ vID ] ) );
						SetPVarInt( playerid, "GPSTimerCalled", 1);
					}
					else if(GetPVarInt( playerid, "LocatingCar") == 1) {
						SetPVarInt( playerid, "LocatingCar", 0);
						announcement( playerid, "~r~gps ugasen", 4500, 1);
						CheckpointStatus[ playerid ] = 0;
						PlayerPlaySound( playerid, 1145, 0.0, 0.0, 0.0);
						Dimi_DisablePlayerCheckpoint( playerid );
					}
				}
				case 3: {
					new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					if( VehicleInfo[ izbor ][ vGPS ] == 2 ) return GRESKA( playerid, "Vase vozilo vec ima najbolji gps!");
					if( KupljenGPS[ playerid ] != 1 ) return GRESKA( playerid, "Prvo trebate kupiti GPS u electronic shopu." );
					VehicleInfo[ izbor ][ vGPS ] ++; SaveVehicle( izbor );
					SendClientMessagee( playerid, SVETLOPLAVA, "Uspjesno si unapredio svoj GPS sistem." );
				}
				case 4: {
					new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					ShowPlayerDialog( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cijenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
				}
				//***************************************************************************************************************************************
				case 5:
				{
					new izbor = ChosenVehicle[ playerid ];
					
					new novacena = VehPrice[ VehicleInfo[ izbor ][ vModel ] - 400 ][ 1 ];//prava cijena kolko kosta u salonu
					new polovnacena = novacena/2; //pola od prave
					new polovnacena2 = novacena/4;
					new zadnjacena = polovnacena+polovnacena2;
					new Float:vehx, Float:vehy, Float:vehz, Float:veha;

					GetVehiclePos(VehicleInfo[ izbor ][ vID ], vehx, vehy, vehz);
					GetVehicleZAngle(VehicleInfo[ izbor ][ vID ],veha);
					
					
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					if( !IsPlayerInDynamicArea( playerid, AutoPijacaBG ) ) return GRESKA( playerid, "Niste na auto pijaci!" );
					new string1[ 128 ]; 
					format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s na auto pijacu", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ izbor ][ vModel ] ) );
					LogSave( "Ostalo/LogProdajaVozila.log", string1 );

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ izbor ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					SavePlayer( playerid );
					Delete3DTextLabel( VehicleInfo[ izbor ][ v3DText ] );
					VehicleInfo[ izbor ][ Validv3DText ] = false;
					
					Dimi_DestroyVehicle( VehicleInfo[ izbor ][ vID ] );
					
					VehicleInfo[ izbor ][ vVirtualWorld ] = 0;
					VehicleInfo[ izbor ][ vInterior ] = 0;
					VehicleInfo[ izbor ][ vUsage ] = NAPRODAJU_VOZILO;
					
					VehicleInfo[ izbor ][ vReg ] = 0;
					VehicleInfo[ izbor ][ vTeh ] = 0;
					VehicleInfo[ izbor ][ vRegVreme ] = 0;

					
					VehicleInfo[ izbor ][ vOwned ] = 0;
					VehicleInfo[ izbor ][ vNeaktivnost ] = 0;
					VehicleInfo[ izbor ][ vPrice ] = zadnjacena;
					VehicleInfo[ izbor ][ vLocked ] = 0;

					VehicleInfo[ izbor ][ vLokacijaX ] = vehx;
					VehicleInfo[ izbor ][ vLokacijaY ] = vehy;
					VehicleInfo[ izbor ][ vLokacijaZ ] = vehz;
					VehicleInfo[ izbor ][ vLokacijaA ] = veha;
					strmid( VehicleInfo[ izbor ][ vOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
					
					DajIgracuNovac( playerid, polovnacena );
					SendInfoMessage( playerid, "Prodali ste vozilo na auto pijacu za %d$", polovnacena );
					
					VehicleInfo[ izbor ][ vID ] = Dimi_CreateVehicle( izbor, NAPRODAJU_VOZILO, -1, -1, -1, VehicleInfo[ izbor ][ vModel ], VehicleInfo[ izbor ][ vLokacijaX ], VehicleInfo[ izbor ][ vLokacijaY ], VehicleInfo[ izbor ][ vLokacijaZ ]+1.0, VehicleInfo[ izbor ][ vLokacijaA ], VehicleInfo[ izbor ][ vColor1 ], VehicleInfo[ izbor ][ vColor2 ], 300000 );
					LinkVehicleToInterior( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vInterior ] );
					SetVehicleVirtualWorld( VehicleInfo[ izbor ][ vID ], VehicleInfo[ izbor ][ vVirtualWorld ] );
					
					TuneVehicle( izbor );
					SetVehicleLabels( izbor );
					SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 0, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
					if( IsVehicleBajs( VehicleInfo[ izbor ][ vID ] ) )
					{
						SetVehicleParamsEx( VehicleInfo[ izbor ][ vID ], 1, 0, 0, VehicleInfo[ izbor ][ vLocked ], 0, 0, 0 );
					}

					SaveVehicle( izbor );
				}
				//***************************************************************************************************************************************
				case 6:
				{
					new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");

					if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 1)
					{
						Neon[ VehicleInfo[ izbor ][ vID ] ] = 0;
						DestroyDynamicObject( NeonObject1[ VehicleInfo[ izbor ][ vID ] ] );
						DestroyDynamicObject( NeonObject2[ VehicleInfo[ izbor ][ vID ] ] );
					}

					VehicleInfo[ izbor ][ vNeon ] = 0;
					VehicleInfo[ izbor ][ vTuned ] = 0;
					VehicleInfo[ izbor ][ vImobilizator ] = 0;
					VehicleInfo[ izbor ][ vSpoiler ] = 0;
					VehicleInfo[ izbor ][ vHood ] = 0;
					VehicleInfo[ izbor ][ vRoof ] = 0;
					VehicleInfo[ izbor ][ vSkirt ] = 0;
					VehicleInfo[ izbor ][ vLamps ] = 0;
					VehicleInfo[ izbor ][ vNitro ] = 0;
					VehicleInfo[ izbor ][ vExhaust ] = 0;
					VehicleInfo[ izbor ][ vWheels ] = 0;
					VehicleInfo[ izbor ][ vStereo ] = 0;
					VehicleInfo[ izbor ][ vHydraulics ] = 0;
					VehicleInfo[ izbor ][ vFrontBumper ] = 0;
					VehicleInfo[ izbor ][ vRearBumper ] = 0;
					VehicleInfo[ izbor ][ vVents ] = 0;
					VehicleInfo[ izbor ][ vPaintJob ] = 255;
					ChangeVehiclePaintjob( VehicleInfo[ izbor ][ vID ], 3 );
					new componentid;

					for( new i; i < 14; i++ ) {
						componentid = GetVehicleComponentInSlot( VehicleInfo[ izbor ][ vID ], i );
						if( componentid != 0 )
							RemoveVehicleComponent( VehicleInfo[ izbor ][ vID ], componentid );
					}

					SendClientMessagee( playerid, SVETLOCRVENA, "Skinuli ste tuning sa vozila." );
					SaveVehicle( izbor );
				}
				case 7: {
					/*new izbor = ChosenVehicle[ playerid ];
					if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");
					if( GetPlayerVehicleSeat( playerid ) != 0) return GRESKA( playerid, "Morate biti u svom vozilu na vozackom mjestu!");
					if( VehicleInfo[ izbor ][ vNeon ] == 0 ) return GRESKA( playerid, "Na ovom vozilu nije ugradjena neonka!");
					if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 0 ) {
						Neon[ VehicleInfo[ izbor ][ vID ] ] = 1;
						NeonObject1[ VehicleInfo[ izbor ][ vID ] ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						NeonObject2[ VehicleInfo[ izbor ][ vID ] ] = CreateDynamicObject( VehicleInfo[ izbor ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( NeonObject1[ VehicleInfo[ izbor ][ vID ] ],  VehicleInfo[ izbor ][ vID ] , -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						AttachDynamicObjectToVehicle( NeonObject2[ VehicleInfo[ izbor ][ vID ] ],  VehicleInfo[ izbor ][ vID ] , 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						format( globalstring, sizeof( globalstring ), "* %s pritisce dugme na komodi i postavlja neonke.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					}
					else if( Neon[ VehicleInfo[ izbor ][ vID ] ] == 1 ) {
						Neon[ VehicleInfo[ izbor ][ vID ] ] = 0;
						DestroyDynamicObject( NeonObject1[ VehicleInfo[ izbor ][ vID ] ] );
						DestroyDynamicObject( NeonObject2[ VehicleInfo[ izbor ][ vID ] ] );
						format( globalstring, sizeof( globalstring ), "* %s pritisce gumb na komodi i uvlaci neonke.", ImeIgraca( playerid ) );
						PorukaRadius(30.0, playerid, globalstring, LJUBICASTA );
					}*/
					SendInfoMessage(playerid, "Koristite komandu '/neonke' za upravljanje neon-svetlima na vozilima!");
				}
				case 8: {
					SendInfoMessage( playerid, "Koristite /gepek za upravljanje gepekom." );
				}
				case 9: {
					ShowPlayerDialog( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_ACCEPTVEH ) {
		if( response ) {
		
			new seller = GlobalProdaja[ playerid ];
			new autoid = GlobalID[ playerid ];
			
			if( seller == IPI  ) return GRESKA( playerid, "Taj igrac je offline.");
			if( carspawntimer == 1 ) return GRESKA( playerid, "Netko je spawnao/parkirao vozilo prije vas.Pokusajte za 3 sekunde. (Anticrash)");
			if( PlayerInfo[ seller ][ xVoziloID ][ 0 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 1 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 2 ] != autoid && PlayerInfo[ seller ][ xVoziloID ][ 3 ] != autoid ) return GRESKA( playerid, "To vozilo nije u vlasnistvu igraca koji vam ga je ponudio!");
			if( !IsPlayerNearPlayer(5.0, playerid, seller ) ) return GRESKA( playerid, "Niste blizu igraca koji vam zeli prodati vozilo.");
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca za kupiti vozilo.");
			if( !IsPlayerConnected( seller ) ) {
				GRESKA( playerid, "Taj igrac je offline.");
				GlobalProdaja[ playerid ] = -1;
				GlobalCena[ playerid ] = -1;
				GlobalID[ playerid ] = -1;
				return 1;
			}

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
				if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
				else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
			}
			else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );

			strmid( VehicleInfo[ autoid ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);

			if( PlayerInfo[ seller ][ xVoziloID ][ 0 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 0 ] = -1; }
			else if( PlayerInfo[ seller ][ xVoziloID ][ 1 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 1 ] = -1; }
			else if( PlayerInfo[ seller ][ xVoziloID ][ 2 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 2 ] = -1; }
			else if( PlayerInfo[ seller ][ xVoziloID ][ 3 ] == VehicleInfo[ autoid ][ vProvera ] ) { PlayerInfo[ seller ][ xVoziloID ][ 3 ] = -1; }

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = autoid;}
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = autoid; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = autoid; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = autoid; }

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaVozila.log", string1 );

			SaveVehicle( autoid );
			DajIgracuNovac( seller, GlobalCena[ playerid ] );
			Dimi_RemovePlayerFromVehicle( seller );

			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendInfoMessage( playerid, "Uspjesno ste kupili vozilo." );
			SendInfoMessage( seller, "Uspjesno ste prodali vozilo." );

			carspawntimer = 1;
			SetTimer("AntiSpawnCrash", 3000, 0);
			
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu vozla!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_VEHSELLTP ) {
		if( !response ) return 1;
		if( response ) {
			new idigraca, string[ 128 ], cena, autoid = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_VEHSELLTP, DSI, D_NASLOV, "Unesite id igraca kome zelite da prodate vozilo i cijenu.\nPrimer: 145 12003", D_ODABERI, D_ODUSTANI );
			if( !IsPlayerConnected( idigraca ) || idigraca == INVALID_PLAYER_ID ) return GRESKA( playerid, "Nevaljan ID igraca.");
			if( !IsPlayerNearPlayer( 5.0, playerid, idigraca ) ) return GRESKA( playerid, "Taj igrac mora biti u vasoj blizini!");
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati vozilo!");

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == autoid ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == autoid ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == autoid ) { }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == autoid ) { }
			else return GRESKA( playerid, "Broj vozila koji ste uneli nije u vasem vlasnistvu." );

			if( PlayerInfo[ idigraca ][ xVoziloID ][ 0 ] == -1 ) { }
			else if( PlayerInfo[ idigraca ][ xVoziloID ][ 1 ] == -1 ) { }
			else if( PlayerInfo[ idigraca ][ xVoziloID ][ 2 ] == -1 ) { }
			else if( PlayerInfo[ idigraca ][ xVoziloID ][ 3 ] == -1 ) {
				if( PlayerInfo[ idigraca ][ xDonatorSlot ] == true ) { }
				else return GRESKA( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );
			}
			else return GRESKA( playerid, "Svi slotovi vozila izabranog igraca su zauzeti." );

			if( cena < ( VehicleInfo[ autoid ][ vPrice ]/2 ) ) return GRESKA( playerid, "Cena mora biti veca od polovine kupljene.");

			if( !IsVehicleBajs( VehicleInfo[ autoid ][ vID ] ) ) {
				if( PlayerInfo[ idigraca ][ xLevel ] < 5 ) return GRESKA( playerid, "Igrac mora biti level 5+ da bi ste mu prodali vozilo." );
			}

			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s vozilo po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = autoid;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovo vozilo marke %s za %d", ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTVEH, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );

		}
	}
	else if( dialogid == dialog_VEHCOLOR ) {
		if( !response ) return 1;
		if( response ) {
			new boja1, boja2, izbor = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "ii", boja1, boja2 ) ) ShowPlayerDialog( playerid, dialog_VEHCOLOR, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 vozila.\nPrimer: 1 2", D_ODABERI, D_ODUSTANI );

			if( boja1 < 0 || boja1 > 255 ) return GRESKA( playerid, "Prva boja ne moze biti manja od 0 ili veca od 255.");
			if( boja2 < 0 || boja2 > 255 ) return GRESKA( playerid, "Druga boja ne moze biti manja od 0 ili veca od 255.");

			if( !IsPlayerInVehicle( playerid, VehicleInfo[ izbor ][ vID ] ) ) return GRESKA( playerid, "Morate biti u svom vozilu!");

			VehicleInfo[ izbor ][ vColor1 ] = boja1;
			VehicleInfo[ izbor ][ vColor2 ] = boja2;
			SaveVehicle( izbor );

			ChangeVehicleColor( VehicleInfo[ izbor ][ vID ], boja1, boja2 );
			SendInfoMessage( playerid, "Promenili ste boju vozila u %d, %d.", boja1, boja2 );
		}
	}
	else if( dialogid == dialog_VEHICLEPUTMATS ) {
	
		if( !response ) return 1;
		if( response ) {
		
			new kolicina, izbor = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );

			if( PlayerInfo[ playerid ][ xMaterijali ] == 0 ) return GRESKA( playerid, "Nemate materijale kod vas!" );
			if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xMaterijali ] ) return GRESKA( playerid, "Nemate toliko materijala kod vas!");

			if( (VehicleInfo[ izbor ][ vMaterijali ]+kolicina) > 10000 ) return GRESKA( playerid, "Najvise u gepeku moze stati 10000 materijala." );

			PlayerInfo[ playerid ][ xMaterijali ] -= kolicina;
			
			format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Stavili ste %d materijala u gepek.", kolicina );

			VehicleInfo[ izbor ][ vMaterijali ] += kolicina;

			SaveVehicle( izbor );
			
		}
	}
	else if( dialogid == dialog_VEHICLETAKEMATS ) {

		if( !response ) return 1;
		if( response ) {

			new kolicina, izbor = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "d", kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI );

			if( VehicleInfo[ izbor ][ vMaterijali ] == 0 ) return GRESKA( playerid, "Nema materijala u gepeku!" );
			if( kolicina < 1 || kolicina > VehicleInfo[ izbor ][ vMaterijali ] ) return GRESKA( playerid, "Nemate toliko materijala u gepeku!");

			PlayerInfo[ playerid ][ xMaterijali ] += kolicina;

			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Uzeli ste %d materijala iz gepeka.", kolicina );

			VehicleInfo[ izbor ][ vMaterijali ] -= kolicina;

			SaveVehicle( izbor );
		}
	}
	else if( dialogid == dialog_VEHICLEPUTDRUG ) {
		if( !response ) return 1;
		if( response ) {
			#if nerp_droga == 1
			new slot, slot2, kolicina, izbor = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

			if( slot < 1 || slot > 5 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Nemate droge pod tim slotom!" );
			if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return GRESKA( playerid, "Nemate toliko droge pod tim slotom!");
			if( kolicina > 500 ) return GRESKA( playerid, "Najvise u 1 slotu gepeka moze stati 500g droge." );
			if( VehicleInfo[ izbor ][ vDrugCode ][ 0 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 1 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 2 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 3 ] != 0 && VehicleInfo[ izbor ][ vDrugCode ][ 4 ] != 0 &&
				VehicleInfo[ izbor ][ vDrugCode ][ 5 ] != 0 ) return GRESKA( playerid, "Svih 6 slotova droge u autu su zauzeti!");

			PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u gepek.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Stavili ste %d grama %s u gepek.", kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

			if( VehicleInfo[ izbor ][ vDrugCode ][ 0 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 0 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 1 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 1 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 2 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 2 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 3 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 3 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 4 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 4 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 4 ] = kolicina;
			}
			else if( VehicleInfo[ izbor ][ vDrugCode ][ 5 ] == 0) {
				VehicleInfo[ izbor ][ vDrugCode ][ 5 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				VehicleInfo[ izbor ][ vDrug ][ 5 ] = kolicina;
			}
			SaveVehicle( izbor );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0)
				PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;

			#endif
		}
	}
	else if( dialogid == dialog_VEHICLETAKEDRUG ) {
		if( !response ) return 1;
		if( response ) {
			#if nerp_droga == 1
			new slot, slot2, kolicina, izbor = ChosenVehicle[ playerid ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return ShowPlayerDialog( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

			if( slot < 1 || slot > 6 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Ovo vozilo nema drogu pod tim slotom!");
			if( kolicina < 1 || kolicina > VehicleInfo[ izbor ][ vDrug ][ slot2 ] ) return GRESKA( playerid, "Ovo vozilo nema toliko droge pod tim slotom!");

			VehicleInfo[ izbor ][ vDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz gepeka.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "Uzeli ste %d grama %s iz gepeka.", kolicina, GetDrugNameByDrugID( VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] ) );

			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = VehicleInfo[ izbor ][ vDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}

			if( VehicleInfo[ izbor ][ vDrug ][ slot2 ] <= 0 )
				VehicleInfo[ izbor ][ vDrugCode ][ slot2 ] = 0;

			SaveVehicle( izbor );
			#endif
		}
	}
	else if( dialogid == dialog_PORTABLE ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xRank ] < 4 ) return GRESKA( playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !" );
					SearchingHit( playerid );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xRank ] < 4 ) return GRESKA( playerid, "Samo Rank 4 Agencije ili preko moze da dodjeli mete !" );
					if( hitfound == 0 ) return GRESKA( playerid, "Trenutno nema pronadjenih meta, koristite prvo /portable da vidite dostupne mete!");
					ShowPlayerDialog( playerid, dialog_GIVEHIT, DSI, D_NASLOV, "Unesite ID ubojice kojem dajete metu:", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
					SendClientMessagee( playerid, BELA, "|__________________ Rankovi Agencije __________________|");
					new string[ 64 ], OrgID = PlayerInfo[ playerid ][ xClan ];
					for(new i; i < MAX_PLAYERS; i++) {
						if( IsPlayerConnected( i ) && PlayerLogged[ i ] == true && PlayerInfo[ i ][ xClan ] == OrgID ) {
							format( string, sizeof( string ), "* %s: Rank %d", ImeIgraca( i ), PlayerInfo[ i ][ xRank ] );
							SendClientMessagee( playerid, SIVA, string );
						}
					}
				}
				case 3: {
					ShowPlayerDialog( playerid, dialog_HORDER, DSL, "Dostupni Paketi", "Paket 1($200)Rank 1+\nPaket 2($300)Rank 2+\nPaket 3($500)Rank 3+\nPaket 4($750)Rank 4+\nPaket 5($1000)Rank 5+", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GIVEHIT ) {
		if( !response ) return 1;
		if( response ) {
			new id;
			if( sscanf( inputtext, "u", id ) ) return GRESKA( playerid, "Krivi id" );
			if( id == INVALID_PLAYER_ID ) return GRESKA( playerid, "Krivi id" );
			if( OI[ PlayerInfo[ id ][ xClan ] ][ oTip ] != ORG_TIP_HITM ) return GRESKA( playerid, "Taj igrac nije clan agencije!");
			if( HitmanInfo[ id ][ GoChase ] < 999 ) return GRESKA( playerid, "Taj clan ima vec dodjeljenu metu !");
			if( PlayerInfo[ ahitid ][ xHitmenCena ] == 0 ) return GRESKA( playerid, "Prvo moras da vidis kontrakte." );
			if( IsPlayerConnected( ahitid ) ) {
				for( new a = 1; a < MAX_ORG; a++) {
					if( OI[ a ][ oTip ] == ORG_TIP_HITM ) {
						format( globalstring, sizeof( globalstring ), "* Hitman %s, je dodelio ubojici %s-u da ubije: %s(ID:%d), za $%d.", ImeIgraca( playerid ), ImeIgraca( id ), ImeIgraca( ahitid ), ahitid, PlayerInfo[ ahitid ][ xHitmenCena ] );
						OrgPoruka( a, ZUTA, globalstring );
					}
				}
				HitmanInfo[ id ][ GoChase ] = ahitid;
				HitmanInfo[ ahitid ][ GetChased ] = id;
				HitmanInfo[ ahitid ][ GotHit ] = 1;
				ahitid = 0;
				hitfound = 0;
			}
			else return GRESKA( playerid, "Meta je trenutno offline, potrazite nove !");
		}
	}
	else if( dialogid == dialog_HORDER ) {
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) {
				case 0: {
					if( PlayerInfo[ playerid ][ xRank ] < 1 ) return GRESKA( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( PlayerInfo[ playerid ][ xNovac ] > 200 ) {
						SendClientMessagee( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 200$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
						GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 100 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						DajIgracuNovac( playerid, -200 );
					}
					else return GRESKA( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xRank ] < 2 ) return GRESKA( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( PlayerInfo[ playerid ][ xNovac ] > 300 ) {
						SendClientMessagee( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 300$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
						GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						DajIgracuNovac( playerid, -300 );
					}
					else return GRESKA( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xRank ] < 3 ) return GRESKA( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( PlayerInfo[ playerid ][ xNovac ] > 500 ) {
						SendClientMessagee( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 500$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
						GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						DajIgracuNovac( playerid, -500 );
					}
					else return GRESKA( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xRank ] < 4 ) return GRESKA( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( PlayerInfo[ playerid ][ xNovac ] > 750 ) {
						SendClientMessagee( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 750$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
						GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 31, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
						DajIgracuNovac( playerid, -750 );
					}
					else return GRESKA( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
				case 4: {
					if( PlayerInfo[ playerid ][ xRank ] < 5 ) return GRESKA( playerid, "Da bi porucili zeljeni paket morate imati visi rank!" );
					if( PlayerInfo[ playerid ][ xNovac ] > 1000 ) {
						SendClientMessagee( playerid, SVETLOPLAVA, "* Narucili ste paket, cena ovog paketa je 1000$, paket je bacen iz helikoptera i sada se nalazi kod vas." );
						GiveWeaponToPlayer( playerid, 24, 50 );
						GiveWeaponToPlayer( playerid, 29, 500 );
						GiveWeaponToPlayer( playerid, 25, 50 );
						GiveWeaponToPlayer( playerid, 30, 500 );
						GiveWeaponToPlayer( playerid, 4, 1 );
						GiveWeaponToPlayer( playerid, 34, 20 );
						DajIgracuNovac( playerid, -1000 );
					}
					else return GRESKA( playerid, "Nemate dovoljno novca za odabrani paket!");
				}
			}
		}
	}
	else if( dialogid == dialog_RESETIRAJ )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 1 );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je pokrenuo respawn osobnih vozila!", ImeIgraca( playerid ) );
					SCMA( 0x86C6DBAA, globalstring );
					SCMA( 0x86C6DBAA, ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"Respawn krece za 15 sekundi!" );
				}
				case 1:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 2 );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je pokrenuo respawn rent vozila!", ImeIgraca( playerid ) );
					SCMA( 0x86C6DBAA, globalstring );
					SCMA( 0x86C6DBAA, ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"Respawn krece za 15 sekundi!" );
				}
				case 2:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 3 );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je pokrenuo respawn organizacijskih vozila!", ImeIgraca( playerid ) );
					SCMA( 0x86C6DBAA, globalstring );
					SCMA( 0x86C6DBAA, ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"Respawn krece za 15 sekundi!" );
				}
				case 3:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 7 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 4 );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je pokrenuo respawn rentanih vozila vozila!", ImeIgraca( playerid ) );
					SCMA( 0x86C6DBAA, globalstring );
					SCMA( 0x86C6DBAA, ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"Respawn krece za 15 sekundi!" );
				}
				case 4:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 2 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					SetTimerEx( "RespawnCall", 15000, false, "dd", playerid, 5 );
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je pokrenuo respawn svih vozila!", ImeIgraca( playerid ) );
					SCMA( 0x86C6DBAA, globalstring );
					SCMA( 0x86C6DBAA, ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"Respawn krece za 15 sekundi!" );
				}
				case 5:
				{
					if( ServerInfo[ RRVehicle ] == true  ) return GRESKA( playerid, "Respawn je vec pokrenut!" );
					//if( PlayerInfo[ playerid ][ xAdmin ] < 2 ) return GRESKA( playerid, "Niste ovlasteni za ovu komandu!" );
					for( new i = 0; i < MAX_VEHICLES; i++ )
					{
						if( IsValidVehicle( i ) && IsVehiclePrikolica( i ) )
						{
							SetVehicleToRespawn( i );
						}
					}
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|| RESPAWN || "SERVERBOJA_AQUA"%s je respawnao sve cisterne!", ImeIgraca( playerid ) );
					AdminPoruka( 0x86C6DBAA, globalstring );
				}
			}
		}
	} 
	else if( dialogid == dialog_APOENI )
	{
	
		if( !response ) return 1;
		if( response )
		{
		
			new APOEN;
			switch( listitem )
			{
			
				case 0:
				{
				
					APOEN = 2;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xVIPLevel ] = 1;
					PlayerInfo[ playerid ][ xVipTime ] = 5;
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 1. Vrijeme trajanja VIP paketa: 5 sati");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je aktivirao VIP level 1 apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 1:
				{

					APOEN = 4;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xVIPLevel ] = 2;
					PlayerInfo[ playerid ][ xVipTime ] = 10;
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 2. Vrijeme trajanja VIP paketa: 10 sati");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je aktivirao VIP level 2 apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 2:
				{

					APOEN = 6;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xVIPLevel ] = 3;
					PlayerInfo[ playerid ][ xVipTime ] = 24;
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - VIP level 3. Vrijeme trajanja VIP paketa: 24h - 1 dan");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je aktivirao VIP level 3 apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 3:
				{

					APOEN = 3;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xLevel ]++;
					SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - Level UP.");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je dodao level up apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 4: {
					APOEN = 3;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xZlato ] += 5;
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - 5g zlata.");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );
					UpdateZlatoTD(playerid);

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je 5g zlata sebi apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 5: {
					APOEN = 1;
					if( PlayerInfo[ playerid ][ xApoeni ] < APOEN ) return GRESKA( playerid, "Nemate dovoljno APoena bodova." );
					PlayerInfo[ playerid ][ xRespekt ]++;
					SetPlayerScore( playerid, PlayerInfo[ playerid ][ xLevel ] );
					PlayerInfo[ playerid ][ xApoeni ] -= APOEN;
					SavePlayer( playerid );
					SendClientMessagee( playerid, SVETLOCRVENA, "Uzeli ste paket - 1 respekt.");
					SendClientMessageEx( playerid, CRVENA, "Iskoristili ste %d APoena imate jos %d APoena.", APOEN, PlayerInfo[ playerid ][ xApoeni ] );

					new stringbre[ 128 ];
					format( stringbre, sizeof( stringbre ), "Igrac %s je dodao level up apoenima", ImeIgraca( playerid ) );
					LogSave( "Ostalo/LogApoeni.log", stringbre );
				}
				case 6:
				{
					SendSrwMessage(playerid, "Vi imate %d aktivnih poena kod sebe!", PlayerInfo[playerid][xApoeni]);
				}
				case 7:
				{
					SendInfoMessage(playerid, "Aktivni poeni su poeni koji nagradjuju vasu aktivnost!");
					SendInfoMessage(playerid, "Na svakoj plati dobijate jedan aktivni poen sa kojim mozete kupiti nesto!");
					SendInfoMessage(playerid, "Moguce je kupiti: VIP LEVEL 1 - 3 ili obican level up!");
				}
			}
		}
	}
	else if( dialogid == dialog_SELECTVGUN ) { 
		if( !response ) return 1;
		if( response ) {
			switch( listitem ) { 
				case 0: {
					if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return GRESKA( playerid, "Nemate dovoljno novca 9.500$!");
					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 25, 50 );
					SendInfoMessage( playerid, "Kupili ste Shotgun sa 50 metaka za 9.500$." );
				}
				case 1: {
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Nemate dovoljno novca 1.000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 5, 1 );
					SendInfoMessage( playerid, "Kupili ste palicu za 1.000$." );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Nemate dovoljno novca 1.000$!");
					DajIgracuNovac( playerid, -1000 );
					GiveWeaponToPlayer( playerid, 14, 1 );
					SendInfoMessage( playerid, "Kupili ste cvece za 1.000$." );
				}
				case 3: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 7000 ) return GRESKA( playerid, "Nemate dovoljno novca 7.000$!");
					DajIgracuNovac( playerid, -7000 );
					GiveWeaponToPlayer( playerid, 24, 50 );
					SendInfoMessage( playerid, "Kupili ste deagle sa 50 metaka za 7.000$." );
				}
				case 4: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 2 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 2+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 4000 ) return GRESKA( playerid, "Nemate dovoljno novca 4.000$!");
					DajIgracuNovac( playerid, -4000 );
					GiveWeaponToPlayer( playerid, 22, 100 );
					SendInfoMessage( playerid, "Kupili ste Pistol 9mm sa 100 metaka za 4.000$." );
				}
				case 5: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 9000 ) return GRESKA( playerid, "Nemate dovoljno novca 9.000$!");
					DajIgracuNovac( playerid, -9000 );
					GiveWeaponToPlayer( playerid, 28, 150 );
					SendInfoMessage( playerid, "Kupili ste Uzi sa 150 metaka za 9.000$." );
				}
				case 6: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 3 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 3+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 9500 ) return GRESKA( playerid, "Nemate dovoljno novca 9.500$!");
					DajIgracuNovac( playerid, -9500 );
					GiveWeaponToPlayer( playerid, 29, 150 );
					SendInfoMessage( playerid, "Kupili ste MP5 sa 150 metaka za 9.500$." );
				}
				case 7: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 11000 ) return GRESKA( playerid, "Nemate dovoljno novca 11.000$!");
					DajIgracuNovac( playerid, -11000 );
					GiveWeaponToPlayer( playerid, 31, 200 );
					SendInfoMessage( playerid, "Kupili ste M4 sa 200 metaka za 11.000$." );
				}
				case 8: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 4 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 4+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 11500 ) return GRESKA( playerid, "Nemate dovoljno novca 11.500$!");
					DajIgracuNovac( playerid, -11500 );
					GiveWeaponToPlayer( playerid, 30, 200 );
					SendInfoMessage( playerid, "Kupili ste AK47 sa 200 metaka za 11.500$." );
				}
				case 9: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return GRESKA( playerid, "Pancir moze da kupi samo VIP Level 5+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 12000 ) return GRESKA( playerid, "Nemate dovoljno novca 12.000$!");
					DajIgracuNovac( playerid, -12000 );
					Dimi_SetPlayerArmour( playerid, 100 );
					SendInfoMessage( playerid, "Kupili ste pancir za 10.000$." );
				}
				case 10: {
					if( PlayerInfo[ playerid ][ xVIPLevel ] < 5 ) return GRESKA( playerid, "Ovo oruzje moze da kupi samo VIP Level 5+." );
					if( PlayerInfo[ playerid ][ xNovac ] < 20000 ) return GRESKA( playerid, "Nemate dovoljno novca 20.000$!");
					DajIgracuNovac( playerid, -20000 );
					GiveWeaponToPlayer( playerid, 34, 30 );
					SendInfoMessage( playerid, "Kupili ste Sniper sa 10 metaka za 20.000$." );
				}
			}
		}
	}
	else if( dialogid == dialog_SELECTPPORT )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem )
			{
				case 0:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 708.9829, -1429.8517, 13.6136 ); }
					else { Dimi_SetPlayerPos( playerid, 708.9829, -1429.8517, 13.6136 ); }
					SendInfoMessage( playerid, "Teleportovao si do Promoter baze." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Promoter baze!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 1:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1460.7733,-1030.4546,23.6563 ); }
					else { Dimi_SetPlayerPos( playerid, 1460.7733,-1030.4546,23.6563 ); }
					SendInfoMessage( playerid, "Teleportovao si do Banke." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Banke!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 2:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1203.5892,-934.1453,42.7340 ); }
					else { Dimi_SetPlayerPos( playerid, 1203.5892,-934.1453,42.7340 ); }
					SendInfoMessage( playerid, "Teleportovao si do MC Donalds" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do MC Donalds!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 3:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1472.5190, -1729.9408, 13.8051 ); }
					else { Dimi_SetPlayerPos( playerid, 1472.5190, -1729.9408, 13.8051 ); }
					SendInfoMessage( playerid, "Teleportovao si do Opstine." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Opstine!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 4:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1986.7963,-1455.4180,13.3899 ); }
					else { Dimi_SetPlayerPos( playerid, 1986.7963,-1455.4180,13.3899 ); }
					SendInfoMessage( playerid, "Teleportovao si do Bolnice." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Bolnice!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 5:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1104.1843,-1393.3989,13.4706 ); }
					else { Dimi_SetPlayerPos( playerid, 1104.1843,-1393.3989,13.4706 ); }
					SendInfoMessage( playerid, "Teleportovao si do Tempo marketa." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Tempo marketa!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 6:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1962.5972, -2175.8284, 13.8022 ); }
					else { Dimi_SetPlayerPos( playerid, 1962.5972, -2175.8284, 13.8022 ); }
					SendInfoMessage( playerid, "Teleportovao si do Aerodrom." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Aerodrom!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 7:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1695.2245,-1865.5634,13.5480 ); }
					else { Dimi_SetPlayerPos( playerid, 1695.2245,-1865.5634,13.5480 ); }
					SendInfoMessage( playerid, "Teleportovao si do Spawn kolodvor" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Spawn kolodvor!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 8:
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 369.5132,-2029.6797,7.6719 ); }
					else { Dimi_SetPlayerPos( playerid, 369.5132,-2029.6797,7.6719 ); }
					SendInfoMessage( playerid, "Teleportovao si do Spawn plaza" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| P-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Spawn plaza!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				
				
				
			}
			PromoterPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
	}
	else if( dialogid == dialog_SELECTVPORT )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			switch( listitem )
			{
				case 0://vipa baza
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 2842.6694,-1539.0750,11.0991 ); }
					else { Dimi_SetPlayerPos( playerid, 2842.6694,-1539.0750,11.0991 ); }
					SendInfoMessage( playerid, "Teleportovan si kod VIP baze." );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do VIP baze!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 1://MC Donalds
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1203.5892,-934.1453,42.7340 ); }
					else { Dimi_SetPlayerPos( playerid, 1203.5892,-934.1453,42.7340 ); }
					SendInfoMessage( playerid, "Teleportovan si do MC Donalds" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do MC Donalds!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 2://Banka
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1460.7733,-1030.4546,23.6563 ); }
					else { Dimi_SetPlayerPos( playerid, 1460.7733,-1030.4546,23.6563 ); }
					SendInfoMessage( playerid, "Teleportovan si do Banke" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Banke!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 3://Bolnica
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1986.7963,-1455.4180,13.3899 ); }
					else { Dimi_SetPlayerPos( playerid, 1986.7963,-1455.4180,13.3899 ); }
					SendInfoMessage( playerid, "Teleportovan si do Bolnice" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Bolnice!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 4://Lutrija
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1718.9985,-1278.3367,13.3828 ); }
					else { Dimi_SetPlayerPos( playerid, 1718.9985,-1278.3367,13.3828 ); }
					SendInfoMessage( playerid, "Teleportovan si do Lutrije" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Lutrije!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 5://Zlatara
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1230.7386,-1407.3661,13.0741 ); }
					else { Dimi_SetPlayerPos( playerid, 1230.7386,-1407.3661,13.0741 ); }
					SendInfoMessage( playerid, "Teleportovan si do Zlatare" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Zlatare!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 6://Auto salon
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1965.4161,-2005.4799,13.3828 ); }
					else { Dimi_SetPlayerPos( playerid, 1965.4161,-2005.4799,13.3828 ); }
					SendInfoMessage( playerid, "Teleportovan si do Auto salona" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Auto salona!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 7://Spawn kolodvor
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1695.2245,-1865.5634,13.5480 ); }
					else { Dimi_SetPlayerPos( playerid, 1695.2245,-1865.5634,13.5480 ); }
					SendInfoMessage( playerid, "Teleportovan si do Spawn kolodvor" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Spawn kolodvor!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 8://Spawn plaza
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 369.5132,-2029.6797,7.6719 ); }
					else { Dimi_SetPlayerPos( playerid, 369.5132,-2029.6797,7.6719 ); }
					SendInfoMessage( playerid, "Teleportovan si do Spawn plaza" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Spawn plaza!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 9://Tempo market
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1104.1843,-1393.3989,13.4706 ); }
					else { Dimi_SetPlayerPos( playerid, 1104.1843,-1393.3989,13.4706 ); }
					SendInfoMessage( playerid, "Teleportovan si do Tempo market" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Tempo market!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				case 10://Aerodrom
				{
					if( GetPlayerState( playerid ) == 2 ) { Dimi_SetVehiclePos( tmpcar, 1963.8955,-2245.2466,13.5469 ); }
					else { Dimi_SetPlayerPos( playerid, 1963.8955,-2245.2466,13.5469 ); }
					SendInfoMessage( playerid, "Teleportovan si do Aerodrom" );
					format( globalstring, sizeof( globalstring ), "{FF0000}|| V-PORT || "SERVERBOJA_AQUA"%s {FFFFFF}se teleportovao do Aerodrom!", ImeIgraca( playerid ) );
					AdminPoruka( -1, globalstring );
				}
				
			}
			VIPPort[ playerid ] = 60;
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
		}
	}
	//--------------------------------------------------------------------------
	else if( dialogid == dialog_PORTAJADMINABG )
	{
		if( !response ) return ShowPlayerDialog( playerid, dialog_SELECTAPORT, DSL, "Admin port", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, AportBGInfo[ listitem ][ BGaportPos ][ 0 ], AportBGInfo[ listitem ][ BGaportPos ][ 1 ], AportBGInfo[ listitem ][ BGaportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, AportBGInfo[ listitem ][ BGaportPos ][ 0 ], AportBGInfo[ listitem ][ BGaportPos ][ 1 ], AportBGInfo[ listitem ][ BGaportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovani ste do lokacije ' %s '.", AportBGInfo[ listitem ][ BGaportName ] );
		}
	}
	//--------------------------------------------------------------------------
	else if( dialogid == dialog_PORTAJADMINASA )
	{
		if( !response ) return ShowPlayerDialog( playerid, dialog_SELECTAPORT, DSL, "Admin port", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, AportSAInfo[ listitem ][ SAaportPos ][ 0 ], AportSAInfo[ listitem ][ SAaportPos ][ 1 ], AportSAInfo[ listitem ][ SAaportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, AportSAInfo[ listitem ][ SAaportPos ][ 0 ], AportSAInfo[ listitem ][ SAaportPos ][ 1 ], AportSAInfo[ listitem ][ SAaportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovani ste do lokacije ' %s '.", AportSAInfo[ listitem ][ SAaportName ] );
		}
	}
	//--------------------------------------------------------------------------
	else if( dialogid == dialog_PORTAJADMINAZG )
	{
		if( !response ) return ShowPlayerDialog( playerid, dialog_SELECTAPORT, DSL, "Admin port", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, AportZGInfo[ listitem ][ ZGaportPos ][ 0 ], AportZGInfo[ listitem ][ ZGaportPos ][ 1 ], AportZGInfo[ listitem ][ ZGaportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, AportZGInfo[ listitem ][ ZGaportPos ][ 0 ], AportZGInfo[ listitem ][ ZGaportPos ][ 1 ], AportZGInfo[ listitem ][ ZGaportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovani ste do lokacije ' %s '.", AportZGInfo[ listitem ][ ZGaportName ] );
		}
	}
	//--------------------------------------------------------------------------
	else if( dialogid == dialog_PORTAJADMINAOS )
	{
		if( !response ) return ShowPlayerDialog( playerid, dialog_SELECTAPORT, DSL, "Admin port", "Beograd\nSarajevo\nZagreb\nOstale lokacije", D_ODABERI, D_ODUSTANI );
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, AportOSInfo[ listitem ][ OSaportPos ][ 0 ], AportOSInfo[ listitem ][ OSaportPos ][ 1 ], AportOSInfo[ listitem ][ OSaportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, AportOSInfo[ listitem ][ OSaportPos ][ 0 ], AportOSInfo[ listitem ][ OSaportPos ][ 1 ], AportOSInfo[ listitem ][ OSaportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Teleportovani ste do lokacije ' %s '.", AportOSInfo[ listitem ][ OSaportName ] );
		}
	}
	
	//--------------------------------------------------------------------------
	else if( dialogid == dialog_SELECTAPORT )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
				case 0://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGAPORTS; i++ )
					{
						if( AportBGInfo[ i ][ BGaportCreated ] == 1)
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportBGInfo[ i ][ BGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJADMINABG, DSL, "Beogradske lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 1://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SAAPORTS; i++ )
					{
						if( AportSAInfo[ i ][ SAaportCreated ] == 1)
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportSAInfo[ i ][ SAaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJADMINASA, DSL, "Sarajevske lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGAPORTS; i++ )
					{
						if( AportZGInfo[ i ][ ZGaportCreated ] == 1)
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportZGInfo[ i ][ ZGaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJADMINAZG, DSL, "Zagrebacke lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 3://OK
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSAPORTS; i++ )
					{
						if( AportOSInfo[ i ][ OSaportCreated ] == 1)
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, AportOSInfo[ i ][ OSaportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJADMINAOS, DSL, "Ostale lokacije", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				

			}

		}
	}

	//-------------------------------------------
	else if( dialogid == dialog_SELECTSPORT )
	{
		if( !response ) return 1;
		if( response )
		{
			switch( listitem )
			{
			
				case 0:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_BGSPORTS; i++ )
					{
						if( BGsupportInfo[ i ][ BGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, BGsupportInfo[ i ][ BGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJGMABG, DSL, "Beogradski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
			
				case 1:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_SASPORTS; i++ )
					{
						if( SAsupportInfo[ i ][ SAsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, SAsupportInfo[ i ][ SAsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJGMASA, DSL, "Sarajevski portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
				case 2:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_ZGSPORTS; i++ )
					{
						if( ZGsupportInfo[ i ][ ZGsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, ZGsupportInfo[ i ][ ZGsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJGMAZG, DSL, "Zagrebacki portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
			
				case 3:
				{
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					for( new i = 0; i < MAX_OSSPORTS; i++ )
					{
						if( OSsupportInfo[ i ][ OSsupportCreated ] == 1 )
						{
							format( DialogStrgEx, sizeof( DialogStrgEx ), "%s%s\n", DialogStrgEx, OSsupportInfo[ i ][ OSsupportName ] );
						}
					}
					ShowPlayerDialog( playerid, dialog_PORTAJGMAOS, DSL, "Ostale lokacije portovi", DialogStrgEx, D_ODABERI, D_ODUSTANI );
				}
			
			}

		}
	}
	
	else if( dialogid == dialog_PORTAJGMABG )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, BGsupportInfo[ listitem ][ BGsupportPos ][ 0 ], BGsupportInfo[ listitem ][ BGsupportPos ][ 1 ], BGsupportInfo[ listitem ][ BGsupportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, BGsupportInfo[ listitem ][ BGsupportPos ][ 0 ], BGsupportInfo[ listitem ][ BGsupportPos ][ 1 ], BGsupportInfo[ listitem ][ BGsupportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Uspjesno ste se teleportovali do lokacije ' %s '.", BGsupportInfo[ listitem ][ BGsupportName ] );
		}
	}
	
	else if( dialogid == dialog_PORTAJGMASA )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, SAsupportInfo[ listitem ][ SAsupportPos ][ 0 ], SAsupportInfo[ listitem ][ SAsupportPos ][ 1 ], SAsupportInfo[ listitem ][ SAsupportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, SAsupportInfo[ listitem ][ SAsupportPos ][ 0 ], SAsupportInfo[ listitem ][ SAsupportPos ][ 1 ], SAsupportInfo[ listitem ][ SAsupportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Uspjesno ste se teleportovali do lokacije ' %s '.", SAsupportInfo[ listitem ][ SAsupportName ] );
		}
	}
	else if( dialogid == dialog_PORTAJGMAZG )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, ZGsupportInfo[ listitem ][ ZGsupportPos ][ 0 ], ZGsupportInfo[ listitem ][ ZGsupportPos ][ 1 ], ZGsupportInfo[ listitem ][ ZGsupportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, ZGsupportInfo[ listitem ][ ZGsupportPos ][ 0 ], ZGsupportInfo[ listitem ][ ZGsupportPos ][ 1 ], ZGsupportInfo[ listitem ][ ZGsupportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Uspjesno ste se teleportovali do lokacije ' %s '.", ZGsupportInfo[ listitem ][ ZGsupportName ] );
		}
	}
	else if( dialogid == dialog_PORTAJGMAOS )
	{
		if( !response ) return 1;
		if( response )
		{
			new tmpcar = GetPlayerVehicleID( playerid );
			if( GetPlayerState( playerid ) == 2 )
			{
				Dimi_SetVehiclePos( tmpcar, OSsupportInfo[ listitem ][ OSsupportPos ][ 0 ], OSsupportInfo[ listitem ][ OSsupportPos ][ 1 ], OSsupportInfo[ listitem ][ OSsupportPos ][ 2 ] );
			}
			else
			{
				Dimi_SetPlayerPos( playerid, OSsupportInfo[ listitem ][ OSsupportPos ][ 0 ], OSsupportInfo[ listitem ][ OSsupportPos ][ 1 ], OSsupportInfo[ listitem ][ OSsupportPos ][ 2 ] );
			}
			SetPlayerInterior( playerid, 0 );
			SetPlayerVirtualWorld( playerid, 0 );
			SendInfoMessage( playerid, "Uspjesno ste se teleportovali do lokacije ' %s '.", OSsupportInfo[ listitem ][ OSsupportName ] );
		}
	}
	
	
	
	else if( dialogid == dialog_HOTEL ) {
		if( response ) {
			switch( listitem ) {
				case 0: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
					new string[ 128 ], hid = PlayerInfo[ playerid ][ xHotelID ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "__________________________________________________________________\n \n");
					strcat( DialogStrgEx, "Hotel - Informacije\n \n" );
					format( string, sizeof( string ), "Racun hotela: [%d$] | Cena najma: [%d$]\n \n", hotelInfo[ hid ][ hMoney ], hotelInfo[ hid ][ hRoomPrice ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 1: %s\n", hotelInfo[ hid ][ hGuest_1 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 2: %s\n", hotelInfo[ hid ][ hGuest_2 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 3: %s\n", hotelInfo[ hid ][ hGuest_3 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 4: %s\n", hotelInfo[ hid ][ hGuest_4 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 5: %s\n", hotelInfo[ hid ][ hGuest_5 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 6: %s\n", hotelInfo[ hid ][ hGuest_6 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 7: %s\n", hotelInfo[ hid ][ hGuest_7 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 8: %s\n", hotelInfo[ hid ][ hGuest_8 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 9: %s\n", hotelInfo[ hid ][ hGuest_9 ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Gost u sobi 10: %s\n \n", hotelInfo[ hid ][ hGuest_10 ] );
					strcat( DialogStrgEx, string );
					strcat( DialogStrgEx, "__________________________________________________________________");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				}
				case 1: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
					ShowPlayerDialog( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cijenu najma sobe.", D_ODABERI, D_ODUSTANI );
				}
				case 2: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
					new hid = PlayerInfo[ playerid ][ xHotelID ];
					new string[ 260 ];
					format( string, sizeof( string ), ""col_white"%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s\n%s",
						hotelInfo[ hid ][ hGuest_1 ],
						hotelInfo[ hid ][ hGuest_2 ],
						hotelInfo[ hid ][ hGuest_3 ],
						hotelInfo[ hid ][ hGuest_4 ],
						hotelInfo[ hid ][ hGuest_5 ],
						hotelInfo[ hid ][ hGuest_6 ],
						hotelInfo[ hid ][ hGuest_7 ],
						hotelInfo[ hid ][ hGuest_8 ],
						hotelInfo[ hid ][ hGuest_9 ],
						hotelInfo[ hid ][ hGuest_10 ] );
					ShowPlayerDialog( playerid, dialog_HOTELIZBACI, DSL, "Izaberite koga zelite izbaciti:", string, D_ODABERI, D_ODUSTANI );
				}
				case 3: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
					ShowPlayerDialog( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
				}
				case 4: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
					ShowPlayerDialog( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
				}
				case 5: {
					if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u/pored hotelu/a!");
					ShowPlayerDialog( playerid, dialog_HOTELLOCK, DSMSG, D_NASLOV, "Molimo vas da odaberete da li zelite da ?", "Otkljucate", "Zakljucate" );
				}
				case 6: {
					if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Niste blizu ulaza hotela!");
					ShowPlayerDialog( playerid, dialog_HOTELSELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vas hotel drzavi?", "Da", "Ne" );
				}
				case 7: {
					if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Niste blizu ulaza hotela!");
					ShowPlayerDialog( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu hotel", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_HOTELSELLTP ) {
		if( !response ) return 1;
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xHotelID ];
			new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_HOTELSELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu hotel", "Ponudi", D_ODUSTANI );
			GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return GRESKA( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return GRESKA( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return GRESKA( playerid, "Unijeli ste pogresan ID igraca, isti nije dostupan - pokusajte ponovno kasnije!" );
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati hotel!");
			if( PlayerInfo[ idigraca ][ xHotelID ] != -1 )return GRESKA( playerid, "Igrac vec ima hotel!");
			if( PlayerInfo[ idigraca ][ xLevel ] < hotelInfo[ id ][ hLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Igrac mora biti level %d+ da bi ste mu prodali hotel.", hotelInfo[ id ][ hLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s hotel po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegov hotel za %d", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTHOTEL, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
		}
	}
	else if( dialogid == dialog_ACCEPTHOTEL ) {
		if( response ) {
			new id = PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ];
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca.");

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspjesno ste kupili hotel od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xHotelID ] = -1;
			PlayerInfo[ playerid ][ xHotelID ] = id;
			strmid( hotelInfo[ id ][ hOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			SaveHotel( id ); HotelRefresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste hotel igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			SendClientMessagee( playerid, -1, "Kupili ste hotel!" );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu hotelaa!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_HOTELSELLDRZAVA ) {
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas hotel dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xHotelID ];
			if( PlayerInfo[ playerid ][ xHotelID ] == -1 ) return GRESKA( playerid, "Ne posedujes hotel!");
			if( GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Niste blizu ulaza hotela!");

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao hotel ID %d na buy", ImeIgraca( playerid ), id );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );

			hotelInfo[ id ][ hOwned ] = 0;
			strmid( hotelInfo[ id ][ hOwner ], "Drzava", 0, strlen( "Drzava" ), 24 );
			hotelInfo[ id ][ hLocked ] = 0;
			DajIgracuNovac( playerid, hotelInfo[ id ][ hPrice ]/2 );
			PlayerInfo[ playerid ][ xHotelID ] = -1;
			SaveHotel( id );
			SendInfoMessage( playerid, "Hotel uspjesno prodana!" );
			HotelRefresh( id );
			SavePlayer( playerid );
		}
		if( !response ) {
			SendClientMessagee( playerid, -1, "Odustali ste od prodaje hotela drzavi." );
		}
	}
	else if( dialogid == dialog_HOTELLOCK ) {
		new hid = PlayerInfo[ playerid ][ xHotelID ];
		if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] && GetNearestHotel( playerid ) != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u/pored hotelu/a!");
		if( response ) {
			hotelInfo[ hid ][ hLocked ] = 0;
			announcement( playerid, "Hotel ~g~otkljucana!", 3000, 3 );
			SaveHotel( hid );
		}
		else {
			hotelInfo[ hid ][ hLocked ] = 1;
			announcement( playerid, "Hotel ~r~zakljucana!", 3000, 3 );
			SaveHotel( hid );
		}
	}
	else if( dialogid == dialog_HOTELRENTP ) {
		if( response ) {
			if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf( inputtext, "i", iznos ) ) return ShowPlayerDialog( playerid, dialog_HOTELRENTP, DSI, D_NASLOV, "Molimo vas da unesete vasu cijenu najma sobe.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 1000 ) return GRESKA( playerid, "Cena najma ne moze biti ispod 1 i iznad 1000!");
			hotelInfo[ hid ][ hRoomPrice ] = iznos;
			SaveHotel( hid ); HotelRefresh( hid );
			SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste promenili cijenu najma u %d$.", iznos );
		}
	}
	else if( dialogid == dialog_HOTELIZBACI ) {
		if( response ) {
			if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
			new hid = PlayerInfo[ playerid ][ xHotelID ];
			switch( listitem ) {
				case 0: {
					if( strcmp( hotelInfo[ hid ][ hGuest_1 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_1 ] );
						strmid( hotelInfo[ hid ][ hGuest_1 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 1: {
					if( strcmp( hotelInfo[ hid ][ hGuest_2 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_2 ] );
						strmid( hotelInfo[ hid ][ hGuest_2 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 2: {
					if( strcmp( hotelInfo[ hid ][ hGuest_3 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_3 ] );
						strmid( hotelInfo[ hid ][ hGuest_3 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 3: {
					if( strcmp( hotelInfo[ hid ][ hGuest_4 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_4 ] );
						strmid( hotelInfo[ hid ][ hGuest_4 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 4: {
					if( strcmp( hotelInfo[ hid ][ hGuest_5 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_5 ] );
						strmid( hotelInfo[ hid ][ hGuest_5 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 5: {
					if( strcmp( hotelInfo[ hid ][ hGuest_6 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_6 ] );
						strmid( hotelInfo[ hid ][ hGuest_6 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 6: {
					if( strcmp( hotelInfo[ hid ][ hGuest_7 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_7 ] );
						strmid( hotelInfo[ hid ][ hGuest_7 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 7: {
					if( strcmp( hotelInfo[ hid ][ hGuest_8 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_8 ] );
						strmid( hotelInfo[ hid ][ hGuest_8 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 8: {
					if( strcmp( hotelInfo[ hid ][ hGuest_9 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_9 ] );
						strmid( hotelInfo[ hid ][ hGuest_9 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
				case 9: {
					if( strcmp( hotelInfo[ hid ][ hGuest_10 ], "Niko", true ) ) {
						SendClientMessageEx( playerid, UGBOJA, "Uspjesno ste izbacili %s iz sobe.", hotelInfo[ hid ][ hGuest_10 ] );
						strmid( hotelInfo[ hid ][ hGuest_10 ], "Niko", 0, strlen( "Niko" ), 24  );
					}
				}
			}
			SaveHotel( hid );
		}
	}
	else if( dialogid == dialog_HOMONEY ) {
		if( !response ) return true;
		if( response ) {
			if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf(inputtext, "i", iznos ) ) return ShowPlayerDialog( playerid, dialog_HOMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000) return GRESKA( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
			if( iznos > PlayerInfo[ playerid  ][ xNovac ] ) return GRESKA( playerid, "Nemate toliko novca kod sebe!");
			DajIgracuNovac( playerid, -iznos ); hotelInfo[ hid ][ hMoney ] += iznos;
			SendInfoMessage( playerid, "Ostavili ste %d$ u kasu hotela!", iznos );
			SaveHotel( hid );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_HPMONEY ) {
		if( !response ) return true;
		if( response ) {
			if( inHotel[ playerid ] != PlayerInfo[ playerid ][ xHotelID ] ) return GRESKA( playerid, "Morate biti u hotelu!");
			new iznos, hid = PlayerInfo[ playerid ][ xHotelID ];
			if( sscanf( inputtext, "i", iznos ) ) return ShowPlayerDialog( playerid, dialog_HPMONEY, DSI, D_NASLOV, "Molimo vas da unesete kolicinu novca koju zelite da podignete.", D_ODABERI, D_ODUSTANI );
			if( iznos < 1 || iznos > 10000 ) return GRESKA( playerid, "Kolicina novca ne moze biti ispod 1 i iznad 10000!");
			if( iznos > hotelInfo[ hid ][ hMoney ] ) return GRESKA( playerid, "Nemate toliko novca u kasi!");
			DajIgracuNovac( playerid, iznos ); hotelInfo[ hid ][ hMoney ] -= iznos;
			SendInfoMessage( playerid, "Podigli ste %d$ iz kase hotela!", iznos );
			SaveHotel( hid );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_PILOT )
	{
		if( !response ) return Dimi_RemovePlayerFromVehicle( playerid ),SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			//if( AccountVerified[ playerid ] == false ) return Dimi_RemovePlayerFromVehicle( playerid ), GRESKA( playerid, "Prvo morate verifikovati svoj nalog(/verifikacija).");
			switch( listitem )
			{
				case 0:
				{
					if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 511  )
					{
						Dimi_SetPlayerCheckpoint( playerid, 1850.6820,-2494.7190,13.5547, 5.0 );
						LetSF[ playerid ] = 1; CheckpointStatus[ playerid ] = 20;
						AccountVerified[ playerid ] = false;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike do Zagreba.");
						StaroVreme[ playerid ] = gettime();
						NovoVreme[ playerid ] = 120;
					}
				}
				case 1:
				{
					if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 519 || GetVehicleModel( GetPlayerVehicleID( playerid ) ) == 511  )
					{
						Dimi_SetPlayerCheckpoint( playerid, 1850.6820,-2494.7190,13.5547, 5.0 );
						LetLV[ playerid ] = 1; CheckpointStatus[ playerid ] = 21;
						AccountVerified[ playerid ] = false;
						SendJobMessage( playerid, "Krenuli ste sa poslom, prevozite putnike do Sarajeva.");
						StaroVreme[ playerid ] = gettime();
						NovoVreme[ playerid ] = 120;
					}
				}
			}
		}
	}
	else if( dialogid == dialog_GEPEK ) {
		if( !response ) return true;
		if( response ) {
			new vehicleid, found, engine, lights, alarm, doors, bonnet, boot, objective;
			for( new i = 0; i < MAX_VEHICLES; i++) {
				new Float:X, Float:Y, Float:Z;
				GetVehiclePos(i, X, Y, Z);
				if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
					vehicleid = i;
					found = 1;
					break;
				}
				else
					continue;
			}
			if( found == 0 ) return GRESKA( playerid, "Niste blizu vozila.");

			new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return GRESKA( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return GRESKA( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return GRESKA( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				GRESKA( playerid, "Nepoznata akcija.");
				return 1;
			}
			
			if( TipVozila[ vehicleid ] == PRIVATNO_VOZILO ) {
			
				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] ][ vID ] == vehicleid ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 1 ] ][ vID ] == vehicleid ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 2 ] ][ vID ] == vehicleid ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] != -1 && VehicleInfo[ PlayerInfo[ playerid ][ xVoziloID ][ 3 ] ][ vID ] == vehicleid ) { }
				else return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( TipVozila[ vehicleid ] == ORGANIZACIJSKO_VOZILO ) {
				if( OrgaVozila[ vehicleid ] != PlayerInfo[ playerid ][ xClan ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( TipVozila[ vehicleid ] == POSLOVNO_VOZILO ) {
				if( PosaoVozila[ vehicleid ] != PlayerInfo[ playerid ][ xPosao ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			
			new autoid = ScriptIDVozila[ vehicleid ];
			
			switch( listitem ) {
				case 0: {
					GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 1, objective );
					} else {
						SetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, 0, objective );
					}
				}
				case 1: {
					GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return GRESKA( playerid, "Morate prvo otvoriti gepek." );
					
					new wepname1[32],
						wepname2[32],
						wepname3[32],
						#if nerp_droga == 1
						drug1 = VehicleInfo[ autoid ][ vDrugCode ][ 0 ],
						drug2 = VehicleInfo[ autoid ][ vDrugCode ][ 1 ],
						drug3 = VehicleInfo[ autoid ][ vDrugCode ][ 2 ],
						drug4 = VehicleInfo[ autoid ][ vDrugCode ][ 3 ],
						drug5 = VehicleInfo[ autoid ][ vDrugCode ][ 4 ],
						drug6 = VehicleInfo[ autoid ][ vDrugCode ][ 5 ];
						#endif

					//printf("%i",ok);

					if( VehicleInfo[ autoid ][ vWeap1 ] != 0 )
						format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
						strmid(wepname1, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vWeap2 ] != 0)
						format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
						strmid(wepname2, "None", 0, 5);

					if( VehicleInfo[ autoid ][ vMelee ] != 0)
						format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
						strmid(wepname3, "None", 0, 5);

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					
					format( globalstring, sizeof( globalstring ), "Materijali: %d\n", VehicleInfo[ autoid ][ vMaterijali ] );
					strcat( DialogStrgEx, globalstring );
					#if nerp_droga == 1
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					
					format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), VehicleInfo[ autoid ][ vDrug ][ 0 ], GetDrugNameByDrugID(drug2), VehicleInfo[ autoid ][ vDrug ][ 1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), VehicleInfo[ autoid ][ vDrug ][ 2 ], GetDrugNameByDrugID(drug4), VehicleInfo[ autoid ][ vDrug ][ 3 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Drug5: %s(%d g) | Drug6: %s(%d g)\n", GetDrugNameByDrugID(drug5), VehicleInfo[ autoid ][ vDrug ][ 4 ], GetDrugNameByDrugID(drug6), VehicleInfo[ autoid ][ vDrug ][ 5 ] );
					strcat( DialogStrgEx, globalstring );
					#endif
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					format( globalstring, sizeof( globalstring ), "Melee:[%s]\n", wepname3 );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 1:[%s]    |    Metaka: %d\n", wepname1, VehicleInfo[ autoid ][ vAmmo1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Slot 2:[%s]    |    Metaka: %d\n", wepname2, VehicleInfo[ autoid ][ vAmmo2 ] );
					strcat( DialogStrgEx, globalstring );
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					format( globalstring, sizeof( globalstring ), "Gajbica 1:[%s]    |    Komada: %d\n", getGajbicaName( VehicleInfo[ autoid ][ vGajbica ][ 0 ] ), VehicleInfo[ autoid ][ vGajbicaAmmount ][ 0 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Gajbica 2:[%s]    |    Komada: %d\n", getGajbicaName( VehicleInfo[ autoid ][ vGajbica ][ 1 ] ), VehicleInfo[ autoid ][ vGajbicaAmmount ][ 1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Gajbica 3:[%s]    |    Komada: %d\n", getGajbicaName( VehicleInfo[ autoid ][ vGajbica ][ 2 ] ), VehicleInfo[ autoid ][ vGajbicaAmmount ][ 2 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Gajbica 4:[%s]    |    Komada: %d\n", getGajbicaName( VehicleInfo[ autoid ][ vGajbica ][ 3 ] ), VehicleInfo[ autoid ][ vGajbicaAmmount ][ 3 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Gajbica 5:[%s]    |    Komada: %d\n", getGajbicaName( VehicleInfo[ autoid ][ vGajbica ][ 4 ] ), VehicleInfo[ autoid ][ vGajbicaAmmount ][ 4 ] );
					strcat( DialogStrgEx, globalstring );
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 2: {
					GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return GRESKA( playerid, "Morate prvo otvoriti gepek." );
					
					ChosenVehicle[ playerid ] = autoid;
					ShowPlayerDialog( playerid, dialog_GEPEKOSTAVI, DSL, D_NASLOV, "Ostavi oruzje\n(Coming soon...)\nOstavi gajbicu\nOstavi materijale", D_ODABERI, D_ODUSTANI );
				}
				case 3: {
					GetVehicleParamsEx( vehicleid, engine, lights, alarm, doors, bonnet, boot, objective );
					if( boot == 0 ) return GRESKA( playerid, "Morate prvo otvoriti gepek." );
					
					ChosenVehicle[ playerid ] = autoid;
					ShowPlayerDialog( playerid, dialog_GEPEKIZVADI, DSL, D_NASLOV, "Izvadi oruzje\n(Coming soon...)\nIzvadi gajbicu\nIzvadi materijale", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GEPEKIZVADI ) {
		if( !response ) return true;
		if( response ) {
			new vehicleid, found;
			for( new i = 0; i < MAX_VEHICLES; i++) {
				new Float:X, Float:Y, Float:Z;
				GetVehiclePos(i, X, Y, Z);
				if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
					vehicleid = i;
					found = 1;
					break;
				}
				else
					continue;
			}
			if( found == 0 ) return GRESKA( playerid, "Niste blizu vozila.");

			new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return GRESKA( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return GRESKA( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return GRESKA( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				GRESKA( playerid, "Nepoznata akcija.");
				return 1;
			}

			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == POSLOVNO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vJob ] != PlayerInfo[ playerid ][ xPosao ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else { }

			switch( listitem ) {
				case 0: {
					new wepname1[32], wepname2[32], wepname3[32];
					if( VehicleInfo[ autoid ][ vMelee ] ==  0 && VehicleInfo[ autoid ][ vWeap1 ] == 0 && VehicleInfo[ autoid ][ vWeap2 ] == 0) return GRESKA( playerid, "Svi slotovi su prazni!");
					if( VehicleInfo[ autoid ][ vWeap1 ] != 0)
						format( wepname1, sizeof( wepname1 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap1 ] ] );
					else
						format(wepname1, sizeof(wepname1), "None");

					if( VehicleInfo[ autoid ][vWeap2] != 0)
						format( wepname2, sizeof( wepname2 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vWeap2 ] ] );
					else
						format(wepname2, sizeof(wepname2), "None");

					if( VehicleInfo[ autoid ][vMelee] != 0)
						format( wepname3, sizeof( wepname3 ), "%s", WeapNames[ VehicleInfo[ autoid ][ vMelee ] ] );
					else
						format(wepname3, sizeof(wepname3), "None");
					TrunkVehicle[ playerid ] = autoid;
					format( globalstring, sizeof( globalstring ), "%s\n%s\n%s", wepname1, wepname2, wepname3 );
					ShowPlayerDialog( playerid, dialog_VEHICLEWEPTAKE, DSL, D_NASLOV, globalstring, D_ODABERI, D_ODUSTANI );
				}
				case 1: {
					#if nerp_droga == 1
					ShowPlayerDialog( playerid, dialog_VEHICLETAKEDRUG, DSI, D_NASLOV, "Unesite slot droge u vozilu i kolicinu droge za uzimanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
					#endif
				}
				case 2: {
					new coordsstring[ 64 ], vrsta[ 10 ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				
					for( new i = 0; i < 5; i++ ) {
						if( VehicleInfo[ autoid ][ vGajbica ][ i ] != -1 ) {
						
							if( VehicleInfo[ autoid ][ vGajbica ][ i ] == 0 ) { 
								format( coordsstring, sizeof( coordsstring ), "Slot %d - Prazna gajbica\n", i+1 );
							}
							else {
								if( VehicleInfo[ autoid ][ vGajbica ][ i ] == BILJKA_SLJIVA ) { vrsta = "Sljiva"; }
								else if( VehicleInfo[ autoid ][ vGajbica ][ i ] == BILJKA_KRUSKA ) { vrsta = "Kruska"; }
								else if( VehicleInfo[ autoid ][ vGajbica ][ i ] == BILJKA_JABUKA ) { vrsta = "Jabuka"; }
								else if( VehicleInfo[ autoid ][ vGajbica ][ i ] == BILJKA_KUPUS ) { vrsta = "Kupus"; }
								else if( VehicleInfo[ autoid ][ vGajbica ][ i ] == BILJKA_RUZE ) { vrsta = "Ruze"; }

								format( coordsstring, sizeof( coordsstring ), "Gajbica %d - %s - %d komada\n", i+1, vrsta, VehicleInfo[ autoid ][ vGajbicaAmmount ][ i ] );
							}
							strcat( DialogStrgEx, coordsstring );
						}
						else if( VehicleInfo[ autoid ][ vGajbica ][ i ] == -1 ) {
							format( coordsstring, sizeof( coordsstring ), "Slot %d - Nema gajbice\n", i+1 );
							strcat( DialogStrgEx, coordsstring );
						}
					}
					ShowPlayerDialog( playerid, dialog_IZVADIGAJBICE, DSL, D_NASLOV, DialogStrgEx, D_ODABERI, D_ODUSTANI );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
				case 3: {
				
					ShowPlayerDialog( playerid, dialog_VEHICLETAKEMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za uzimanje iz gepeka.", D_ODABERI, D_ODUSTANI );
				
				}
			}
		}
	}
	else if( dialogid == dialog_IZVADIGAJBICE ) {
		if( !response ) return true;
		if( response ) {
			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == -1 ) return GRESKA( playerid, "Ovaj slot je prazan." );
			if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) return GRESKA( playerid, "Vec imas gajbicu u rukama." );
			
			if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == 0 ) {
				PraznaGajbica[ playerid ] = true;
				SetPlayerAttachedObject( playerid, OBJECT_SLOT_RHAND, 19639, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00 );
			}
			else if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] > 0 ) {
				if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == BILJKA_SLJIVA ) {
					GajbicaBiljka[ playerid ] = BILJKA_SLJIVA;
					PlayerInfo[ playerid ][ xSljive ] += VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ];
				}
				else if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == BILJKA_KRUSKA ) {
					GajbicaBiljka[ playerid ] = BILJKA_KRUSKA;
					PlayerInfo[ playerid ][ xKruske ] += VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ];
				}
				else if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == BILJKA_JABUKA ) {
					GajbicaBiljka[ playerid ] = BILJKA_JABUKA;
					PlayerInfo[ playerid ][ xJabuke ] += VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ];
				}
				else if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == BILJKA_KUPUS ) {
					GajbicaBiljka[ playerid ] = BILJKA_KUPUS;
					PlayerInfo[ playerid ][ xKupus ] += VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ];
				}
				else if( VehicleInfo[ autoid ][ vGajbica ][ listitem ] == BILJKA_RUZE ) {
					GajbicaBiljka[ playerid ] = BILJKA_RUZE;
					PlayerInfo[ playerid ][ xRuze ] += VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ];
				}
				PraznaGajbica[ playerid ] = false;
				SetPlayerAttachedObject( playerid, OBJECT_SLOT_RHAND, 19636, 1, 0.10, 0.46, -0.01, 0.0, 89.0, 85.0, 1.04, 1.00, 1.00 );
			}
			
			VehicleInfo[ autoid ][ vGajbica ][ listitem ] = -1;
			VehicleInfo[ autoid ][ vGajbicaAmmount ][ listitem ] = 0;
			SaveVehicle( autoid );
			
			format( globalstring, sizeof( globalstring ), "* %s vadi gajbicu iz prtljaznika.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			
			ApplyAnimation( playerid, "CARRY", "crry_prtial", 4.1, 0, 1, 1, 1, 1, 1 );
		}
	}
	else if( dialogid == dialog_GEPEKOSTAVI ) {
		if( !response ) return true;
		if( response ) {
			new vehicleid, found;
			for( new i = 0; i < MAX_VEHICLES; i++) {
				new Float:X, Float:Y, Float:Z;
				GetVehiclePos(i, X, Y, Z);
				if( IsPlayerInRangeOfPoint( playerid, 5.0, X, Y, Z)) {
					vehicleid = i;
					found = 1;
					break;
				}
				else
					continue;
			}
			if( found == 0 ) return GRESKA( playerid, "Niste blizu vozila.");

			new Float:vehPos[ 3 ];
			getPosBehindVehicle( vehicleid, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ], 0.0 );
			if( !IsPlayerInRangeOfPoint( playerid, 2, vehPos[ 0 ], vehPos[ 1 ], vehPos[ 2 ] ) ) return GRESKA( playerid, "Morate biti pored prtljaznika." );

			if( IsANoTrunkVehicle( vehicleid ) ) return GRESKA( playerid, "Ovo vozilo nema prtljaznik!");
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return GRESKA( playerid, "Morate biti na nogama.");
			if( IsVehicleBajs( vehicleid ) || IsVehicleMotor( vehicleid ) || IsVehicleBrod( vehicleid ) ) {
				GRESKA( playerid, "Nepoznata akcija.");
				return 1;
			}
			
			new autoid = ChosenVehicle[ playerid ];
			if( VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO ) {
				if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 ) { }
				else return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == ORGANIZACIJSKO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vOrganization ] != PlayerInfo[ playerid ][ xClan ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else if( VehicleInfo[ autoid ][ vUsage ] == POSLOVNO_VOZILO ) {
				if( VehicleInfo[ autoid ][ vJob ] != PlayerInfo[ playerid ][ xPosao ] ) return GRESKA( playerid, "Nemate kljuceve ovog vozila.");
			}
			else { }
			
			switch( listitem )
			{
				case 0:
				{
					if( GetFactionType( playerid ) == ORG_TIP_PD || GetFactionType( playerid ) == ORG_TIP_HITM )
					{
						GRESKA( playerid, "MUP/SAJ/HITMAN ne moze ubaciti oruzje u gepek!");
						return 1;
					}
					if( WARPInfo[ playerid ][ WARIgrac ] != -1 ) return GRESKA( playerid, "Ne mozes ovo dok si u waru." );
					if( NaDmEventu[ playerid ] == true ) return GRESKA( playerid, "Ne mozes ovo dok si na dmu." );
					new wepname[32];
					if( ForbiddenWeap( playerid ) ) return GRESKA( playerid, "Ne mozes ubaciti zabranjena oruzja u gepek." );
					if( IsMeleeWeapon( GetWeapon( playerid ) ) && VehicleInfo[ autoid ][ vMelee ] != 0 ) return GRESKA( playerid, "Slot za melee oruzja je zauzet!");
					if( !IsMeleeWeapon( GetWeapon( playerid )) && VehicleInfo[ autoid ][ vWeap1 ] != 0 && VehicleInfo[ autoid ][ vWeap2 ] != 0) return GRESKA(playerid,  "Slotovi za vatrena oruzja su zauzeti!");
					if( IsMeleeWeapon( GetWeapon( playerid ) ) ) {
						format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
						antiCheatCS[ playerid ][ WeaponDetect ] = 3;
						VehicleInfo[ autoid ][ vMelee ] = GetWeapon( playerid );
						RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
						SaveVehicle( autoid );

						format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
						PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );

					}
					else if( VehicleInfo[ autoid ][ vWeap1 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo1 ] + GetPlayerAmmo( playerid ) ) < 501 ) {
							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							VehicleInfo[ autoid ][ vAmmo1 ] = GetPlayerAmmo( playerid );
							VehicleInfo[ autoid ][ vWeap1 ] = GetWeapon( playerid );
							RemovePlayerWeapon(playerid, GetWeapon( playerid ) );
							SaveVehicle( autoid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
					else if( VehicleInfo[ autoid ][ vWeap2 ] == 0) {
						if( ( VehicleInfo[ autoid ][ vAmmo2 ] + GetPlayerAmmo( playerid ) ) < 501) {
							format( wepname, sizeof( wepname ), "%s", WeapNames[ GetWeapon( playerid ) ] );
							antiCheatCS[ playerid ][ WeaponDetect ] = 3;
							VehicleInfo[ autoid ][ vAmmo2 ] = GetPlayerAmmo( playerid );
							VehicleInfo[ autoid ][ vWeap2 ] = GetWeapon( playerid );
							RemovePlayerWeapon( playerid, GetWeapon( playerid ) );
							SaveVehicle( autoid );

							format( globalstring, sizeof( globalstring ), "* %s sprema %s u prtljaznik.", ImeIgraca( playerid ), wepname);
							PorukaRadius(6.0, playerid, globalstring, LJUBICASTA );
						} else GRESKA(playerid,  "U slot mozete staviti najvise 500 metaka!");
					}
				}
				case 1: {
					#if nerp_droga == 1
					ShowPlayerDialog( playerid, dialog_VEHICLEPUTDRUG, DSI, D_NASLOV, "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
					#endif
				}
				case 2: {
					if( !IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) return GRESKA( playerid, "Nemate gajbicu u rukama." );
					new brojg = 0, brojg2;
					
					if( VehicleInfo[ autoid ][ vGajbica ][ 0 ] != -1 ) { brojg++; }
					else if( VehicleInfo[ autoid ][ vGajbica ][ 1 ] != -1 ) { brojg++; }
					else if( VehicleInfo[ autoid ][ vGajbica ][ 2 ] != -1 ) { brojg++; }
					else if( VehicleInfo[ autoid ][ vGajbica ][ 3 ] != -1 ) { brojg++; }
					else if( VehicleInfo[ autoid ][ vGajbica ][ 4 ] != -1 ) { brojg++; }
					
					if( brojg == 5 ) return GRESKA( playerid, "Svi slotovi za gajbice su zauzeti." );
					
					brojg2 = brojg-1;
					
					VehicleInfo[ autoid ][ vGajbica ][ brojg2 ] = GajbicaBiljka[ playerid ];
					
					if( PraznaGajbica[ playerid ] == true ) {
						VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = 0;
					}
					else if( PraznaGajbica[ playerid ] == false ) {
						if( GajbicaBiljka[ playerid ] == BILJKA_SLJIVA ) {
							VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = PlayerInfo[ playerid ][ xSljive ];
							PlayerInfo[ playerid ][ xSljive ] = 0;
						}
						else if( GajbicaBiljka[ playerid ] == BILJKA_KRUSKA ) {
							VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = PlayerInfo[ playerid ][ xKruske ];
							PlayerInfo[ playerid ][ xKruske ] = 0;
						}
						else if( GajbicaBiljka[ playerid ] == BILJKA_JABUKA ) {
							VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = PlayerInfo[ playerid ][ xJabuke ];
							PlayerInfo[ playerid ][ xJabuke ] = 0;
						}
						else if( GajbicaBiljka[ playerid ] == BILJKA_KUPUS ) {
							VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = PlayerInfo[ playerid ][ xKupus ];
							PlayerInfo[ playerid ][ xKupus ] = 0;
						}
						else if( GajbicaBiljka[ playerid ] == BILJKA_RUZE ) {
							VehicleInfo[ autoid ][ vGajbicaAmmount ][ brojg2 ] = PlayerInfo[ playerid ][ xRuze ];
							PlayerInfo[ playerid ][ xRuze ] = 0;
						}
					}
					
					SaveVehicle( autoid );
					
					ClearAnimations( playerid );
					if( IsPlayerAttachedObjectSlotUsed( playerid, OBJECT_SLOT_RHAND ) ) RemovePlayerAttachedObject( playerid, OBJECT_SLOT_RHAND );
				}
				case 3: {
				
					ShowPlayerDialog( playerid, dialog_VEHICLEPUTMATS, DSI, D_NASLOV, "Unesite kolicinu materijala za ostavljanje.", D_ODABERI, D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GARAZA ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					new string[ 128 ], status[ 20 ], id = PlayerInfo[ playerid ][ xGarageID ];
					if( garageInfo[ id ][ garageLocked ] == true ) { status = "Zakljucano"; }
					else { status = "Otkljucano"; }
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "__________________________________________________________________\n \n");
					strcat( DialogStrgEx, "Garaza - Informacije\n \n" );
					format( string, sizeof( string ), "Vlasnik garaze: [%s] | Cena garaze: [%d$]\n", garageInfo[ id ][ garageOwner ], garageInfo[ id ][ garagePrice ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Level garaze: [%d] | Status brave: [%s]\n \n", garageInfo[ id ][ garageLevel ], status );
					strcat( DialogStrgEx, string );
					strcat( DialogStrgEx, "__________________________________________________________________");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
				case 1: {
					if( GetNearestGarage( playerid ) != PlayerInfo[ playerid ][ xGarageID ] ) return GRESKA( playerid, "Morate biti pored ulaza svoje garaze." );
					ShowPlayerDialog( playerid, dialog_GARAGELOCK, DSMSG, D_NASLOV, "Odaberite opciju:", "Otkljucaj", "Zakljucaj" );
				}
				case 2: {
					new id = PlayerInfo[ playerid ][ xGarageID ];
					if( GetNearestGarage( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje garaze!" );
					if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {
						ShowPlayerDialog( playerid, dialog_GARAGESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vasu garazu drzavi?", "Da", "Ne" );

					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 3: {
					new id = PlayerInfo[ playerid ][ xGarageID ];
					if( GetNearestGarage( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje garaze!" );
					ShowPlayerDialog( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu garaze", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_GARAGESELLDRZAVA ) {
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xGarageID ];
			if( GetNearestGarage( playerid ) != id ) return GRESKA( playerid, "Niste pored svoje garaze!" );
			if( strcmp( ImeIgraca( playerid ), garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], true) == 0 ) {

				PlayerInfo[ playerid ][ xGarageID ] = -1;

				new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

				strmid( garageInfo[ GetNearestGarage( playerid ) ][ garageOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
				DajIgracuNovac( playerid, (garageInfo[ GetNearestGarage( playerid ) ][ garagePrice ]/2) );
				garageInfo[ GetNearestGarage( playerid ) ][ garageOwned ] = false; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				SavePlayer( playerid ); Garage_Refresh( GetNearestGarage( playerid ) ); Garage_Save( GetNearestGarage( playerid ) );

			} else GRESKA( playerid, "Ovo nije vase.." );
		}
		if( !response ) {
			SendClientMessagee( playerid, -1, "Odustali ste od prodaje garaze drzavi" );
		}
	}
	else if( dialogid == dialog_GARAGESELLTP ) {
		if( !response ) return 1;
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas garazu dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xGarageID ];
			new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_GARAGESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu garaze", "Ponudi", D_ODUSTANI );
			GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return GRESKA( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return GRESKA( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return GRESKA( playerid, "Unijeli ste pogresan ID igraca, isti nije dostupan - pokusajte ponovno kasnije!" );
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati garazu!");
			if( PlayerInfo[ idigraca ][ xGarageID ] != -1 )return GRESKA( playerid, "Igrac vec ima garazu!");
			if( PlayerInfo[ idigraca ][ xLevel ] < garageInfo[ id ][ garageLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu garazu, on mora biti level %d+.", garageInfo[ id ][ garageLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s garazu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovu garazu za %d", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTGARAGE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
		}
	}
	else if( dialogid == dialog_ACCEPTGARAGE ) {
		if( response ) {
			new id = GlobalID[ playerid ];
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca.");

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xGarageID ] = -1;

			PlayerInfo[ playerid ][ xGarageID ] = id;

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao garazu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );
			
			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspjesno ste kupili garazu od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			strmid( garageInfo[ id ][ garageOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			Garage_Save( id ); Garage_Refresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste garazu igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu garaze!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_GARAGELOCK ) {
		new id = PlayerInfo[ playerid ][ xGarageID ];
		if( GetNearestGarage( playerid ) != PlayerInfo[ playerid ][ xGarageID ] ) return GRESKA( playerid, "Morate biti pored ulaza svoje garaze." );
		if( response ) {
			if( garageInfo[ id ][ garageLocked ] == false ) return GRESKA( playerid, "Garaza je vec otkljucana." );
			garageInfo[ id ][ garageLocked ] = false;
			Garage_Save( id );
			SendInfoMessage( playerid, "Otkljucao si svoju garazu." );
		}
		else if( !response ) {
			if( garageInfo[ id ][ garageLocked ] == true ) return GRESKA( playerid, "Garaza je vec zakljucana." );
			garageInfo[ id ][ garageLocked ] = true;
			Garage_Save( id );
			SendInfoMessage( playerid, "Zakljucao si svoju garazu." );
		}
	}
	else if( dialogid == dialog_IMANJE ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					new string[ 128 ], id = PlayerInfo[ playerid ][ xFieldID ];
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, "__________________________________________________________________\n \n");
					strcat( DialogStrgEx, "Imanje - Informacije\n \n" );
					format( string, sizeof( string ), "Vlasnik imanja: [%s] | Cijena imanja: [%d$]\n", fieldInfo[ id ][ fieldOwner ], fieldInfo[ id ][ fieldPrice ] );
					strcat( DialogStrgEx, string );
					format( string, sizeof( string ), "Level imanja: [%d] | Zasadjeno biljaka: [%d]\n \n", fieldInfo[ id ][ fieldLevel ], fieldInfo[ id ][ fieldStalkNumber ] );
					strcat( DialogStrgEx, string );
					strcat( DialogStrgEx, "__________________________________________________________________");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "U redu", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				}
				case 1: {
					new id = PlayerInfo[ playerid ][ xFieldID ];
					if( GetNearestField( playerid ) != id ) return GRESKA( playerid, "Niste pored svog imanja!" );
					if( strcmp( ImeIgraca( playerid ), fieldInfo[ GetNearestField( playerid ) ][ fieldOwner ], true) == 0 ) {
						ShowPlayerDialog( playerid, dialog_IMANJESELLDRZAVA, DSMSG, D_NASLOV, "Da li ste sigurni da zelite prodati vase imanje drzavi?", "Da", "Ne" );

					} else GRESKA( playerid, "Ovo nije vase.." );
				}
				case 2: {
					new id = PlayerInfo[ playerid ][ xFieldID ];
					if( GetNearestField( playerid ) != id ) return GRESKA( playerid, "Niste pored svog imanja!" );
					ShowPlayerDialog( playerid, dialog_IMANJESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imanja", "Ponudi", D_ODUSTANI );
				}
			}
		}
	}
	else if( dialogid == dialog_IMANJESELLDRZAVA ) {
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas imanje dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xFieldID ];
			if( GetNearestField( playerid ) != id ) return GRESKA( playerid, "Niste pored svog imanja!" );
			if( strcmp( ImeIgraca( playerid ), fieldInfo[ GetNearestField( playerid ) ][ fieldOwner ], true) == 0 ) {

				PlayerInfo[ playerid ][ xFieldID ] = -1;

				new string1[ 128 ]; 
				format( string1, sizeof( string1 ), "Igrac %s je prodao imanje ID %d na buy", ImeIgraca( playerid ), id );
				LogSave( "Ostalo/LogProdajaImovine.log", string1 );

				strmid( fieldInfo[ GetNearestField( playerid ) ][ fieldOwner ], "Drzava", 0, strlen( "Drzava" ), 32);
				DajIgracuNovac( playerid, (fieldInfo[ GetNearestField( playerid ) ][ fieldPrice ]/2) );
				fieldInfo[ GetNearestField( playerid ) ][ fieldOwned ] = false; PlayerPlaySound( playerid, 1058, 0, 0, 0 );
				SavePlayer( playerid ); Field_Refresh( GetNearestField( playerid ) ); Field_Save( GetNearestField( playerid ) );

			} else GRESKA( playerid, "Ovo nije vase.." );
		}
		if( !response ) {
			SendClientMessagee( playerid, -1, "Odustali ste od prodaje imanja drzavi" );
		}
	}
	else if( dialogid == dialog_IMANJESELLTP ) {
		if( !response ) return 1;
		if( response ) {
			if( PlayerInfo[ playerid ][ xBRacun ] < 0 ) return GRESKA( playerid, "Ne mozes da prodas imanje dok ne izadjes iz minusa u banci." );
			new id = PlayerInfo[ playerid ][ xFieldID ];
			new idigraca, cena, string[ 128 ], Float:Pos[ 3 ];
			if( sscanf( inputtext, "ui", idigraca, cena ) ) return ShowPlayerDialog( playerid, dialog_IMANJESELLTP, DSI, D_NASLOV, "U prazni prostor ispod unesite ID igraca i cijenu imanja", "Ponudi", D_ODUSTANI );
			GetPlayerPos( idigraca, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );
			if( !IsPlayerInRangeOfPoint( playerid, 3.0, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] ) ) return GRESKA( playerid, "Igrac nije blizu vas");
			if( cena < 1 ) return GRESKA( playerid, "Cena ne moze biti manja od 1$!");
			if( idigraca == IPI ) return GRESKA( playerid, "Unijeli ste pogresan ID igraca, isti nije dostupan - pokusajte ponovno kasnije!" );
			if( idigraca == playerid ) return GRESKA( playerid, "Ne mozes sam sebi prodati imanje!");
			if( PlayerInfo[ idigraca ][ xFieldID ] != -1 )return GRESKA( playerid, "Igrac vec ima imanje!");
			if( PlayerInfo[ idigraca ][ xLevel ] < fieldInfo[ id ][ fieldLevel ] ) return SendClientMessageEx( playerid, CRVENA, "Da bi ste tom igracu prodali ovu imanje, on mora biti level %d+.", fieldInfo[ id ][ fieldLevel ] );
			SendClientMessageEx( playerid, SVETLOPLAVA, "Ponudili ste igracu %s imovinu po ceni od %d.", ImeIgraca( idigraca ), cena );
			GlobalProdaja[ idigraca ] = playerid;
			GlobalCena[ idigraca ] = cena;
			GlobalID[ idigraca ] = id;
			format( string, sizeof( string ), "Igrac %s vam je ponudio da kupite njegovo imanje za %d", ImeIgraca( playerid ), cena );
			ShowPlayerDialog( idigraca, dialog_ACCEPTIMANJE, DSMSG, D_NASLOV, string, "Prihvati", "Odbij" );
		}
	}
	else if( dialogid == dialog_ACCEPTIMANJE ) {
		if( response ) {
			new id = GlobalID[ playerid ];
			if( PlayerInfo[ playerid ][ xNovac ] < GlobalCena[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca.");

			PlayerInfo[ GlobalProdaja[ playerid ] ][ xFieldID ] = -1;

			PlayerInfo[ playerid ][ xFieldID ] = id;

			new string1[ 128 ]; 
			format( string1, sizeof( string1 ), "Igrac %s je prodao imanje ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );
			LogSave( "Ostalo/LogProdajaImovine.log", string1 );
			
			SendClientMessageEx( playerid, SVETLOPLAVA, "Uspjesno ste kupili imanje od igraca %s za $d.", ImeIgraca( GlobalProdaja[ playerid ] ), GlobalCena[ playerid ] );
			strmid( fieldInfo[ id ][ fieldOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
			Field_Save( id ); Field_Refresh( id );
			SavePlayer( playerid ); SavePlayer( GlobalProdaja[ playerid ] );
			format( globalstring, sizeof( globalstring ), "Prodali ste imanje igracu %s za %d!", ImeIgraca( playerid ), GlobalCena[ playerid ] );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			DajIgracuNovac( GlobalProdaja[ playerid ], GlobalCena[ playerid ] );
			DajIgracuNovac( playerid, -GlobalCena[ playerid ] );
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
		else if( !response ) {
			format( globalstring, sizeof( globalstring ),"Igrac %s je odbio vasu ponudu za kupovinu imanja!", ImeIgraca( playerid ) );
			SendClientMessagee( GlobalProdaja[ playerid ], -1, globalstring );
			SendClientMessagee( playerid, -1, "Odbili ste ponudu!");
			GlobalProdaja[ playerid ] = -1;
			GlobalCena[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_CREATEFIELD ) {
		if( !response ) return true;
		if( response ) {
			new id = CreatingField[ playerid ], level, cena;
			if( sscanf( inputtext, "ii", level, cena ) ) return ShowPlayerDialog( playerid, dialog_CREATEFIELD, DSI, D_NASLOV, "Unesite u prazno polje level i cijenu imanja.\nPrimer: 4 10000", D_ODABERI, D_NAZAD );
			if( level < 1 || cena > 9999999 ) return ShowPlayerDialog( playerid, dialog_CREATEFIELD, DSI, D_NASLOV, "Unesite u prazno polje level i cijenu imanja.\nPrimer: 4 12323", D_ODABERI, D_NAZAD );

			fieldInfo[ id ][ fieldPrice ] = cena;
			fieldInfo[ id ][ fieldLevel ] = level;
			Field_Save( id );
			Field_Refresh( id );
			SendInfoMessage( playerid, "Postavio si cijenu na "col_white"%d%"col_balkanstory", i level na "col_white"%d.", cena, level );
			CreatingField[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_INVENTORY )
	{
		if( !response ) return true;
		if( response )
		{
			new
				itemid = ChosenItem[ playerid ];

			switch( listitem )
			{
				case 0:
				{
					if( IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Ne mozes dok si u vozilu." );
					CallLocalFunction( "OnPlayerUseItem", "dds", playerid, itemid, inventoryInfo[ playerid ][ itemid ][ invItem ] );
				}
				case 1:
				{
					ChosenItem[ playerid ] = itemid;
					if( IsInventoryWeapon( inventoryInfo[ playerid ][ itemid ][ invItem ] ) ) return GRESKA( playerid, "Oruzje dajete na komandu /daj." );
					ShowPlayerDialog( playerid, dialog_GIVEITEM, DSI, "Inventory", "Upisite ime/ID igraca kome dajete:", "Uredu", "Odustani");
				}
				case 2:
				{
					if( GetNearestContainer( playerid ) != -1 )
					{

						Inventory_Remove( playerid, inventoryInfo[ playerid ][ itemid ][ invItem ] );
						format( globalstring, sizeof( globalstring ), "** %s je bacio %s u kontejner.", ImeIgraca(playerid), inventoryInfo[ playerid ][ itemid ][ invItem ]);
						PorukaRadius( 30.0 , playerid, globalstring, LJUBICASTA );
					}
					else GRESKA( playerid, "Nisi pored kontejnera." );
				}
			}
		}
	}
	else if( dialogid == dialog_GIVEITEM )
	{
		if( !response ) return true;
		if( response )
		{
			static
				userid = -1,
				itemid = -1;

			if( sscanf(inputtext, "u", userid ) )
				//GRESKA( playerid, "Pogresan ID!" );
				return ShowPlayerDialog(playerid, dialog_GIVEITEM, DSI, "Davanje stvari", "Upisite ime/ID igraca kome zelite dati:", "Ok", "Izadji");

			if( userid == INVALID_PLAYER_ID )
				//GRESKA( playerid, "Pogresan ID!" );
				return ShowPlayerDialog(playerid, dialog_GIVEITEM, DSI, "Davanje stvari", "Upisite ime/ID igraca kome zelite dati:", "Ok", "Izadji");

			if( !IsPlayerNearPlayer( 6.0, playerid, userid ) )
				//GRESKA( playerid, "Niste blizu igraca!" );
				return ShowPlayerDialog(playerid, dialog_GIVEITEM, DSI, "Davanje stvari", "Upisite ime/ID igraca kome zelite dati:", "Ok", "Izadji");

			if( userid == playerid )
				//GRESKA( playerid, "Ne mozes sebi!" );
				return ShowPlayerDialog(playerid, dialog_GIVEITEM, DSI, "Davanje stvari", "Upisite ime/ID igraca kome zelite dati:", "Ok", "Izadji");

			itemid = ChosenItem[ playerid ];

			if( itemid == -1 )
				return false;


			if( inventoryInfo[ playerid ][ itemid ][ invQuantity ] == 1 )
			{

				new id = Inventory_Add( userid, inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invModel ] );

				if( id == -1 )return GRESKA(playerid, "Igracu je pun inventory!");
				
				if( IsInventoryWeapon( inventoryInfo[ playerid ][ itemid ][ invItem ] ) )
				{
					OruzjeUInventoriju[ userid ]++;
					OruzjeUInventoriju[ playerid ]--;
				}
				
				SendInfoMessage( playerid, "Dali ste %s igracu %s.", inventoryInfo[ playerid ][ itemid ][ invItem ], ImeIgraca( userid ) );
				SendInfoMessage( userid, "Igrac %s vam je dao %s i ubacili ste u inventory!", ImeIgraca( playerid ), inventoryInfo[ playerid ][ itemid ][ invItem ] );

				Inventory_Remove( playerid, inventoryInfo[ playerid ][ itemid ][ invItem ] );
			}
			else
			{
				new stringic[ 180 ];
				format( stringic, sizeof( stringic ), "Dajete: %s (Kolicina: %d)\n\nUnesite koliku kolicinu dajete igracu %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], ImeIgraca( userid ) );
				ShowPlayerDialog( playerid, dialog_GIVEQUANTITY, DSI, "Davanje stvari", stringic, "Daj", "Izadji" );
				GiveItemID[ playerid ] = userid;
			}
		}
	}
	else if( dialogid == dialog_GIVEQUANTITY )
	{
		if( !response ) return true;
		if( response )
		{
			if( GiveItemID[ playerid ] != INVALID_PLAYER_ID ) {
				new
					userid = GiveItemID[ playerid ],
					itemid = ChosenItem[ playerid ];

				if( isnull( inputtext ) )
				{
					new stringic[ 180 ];
					format( stringic, sizeof( stringic ), "Dajete: %s (Kolicina: %d)\n\nUnesite koliku kolicinu dajete igracu %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], ImeIgraca( userid ) );
					ShowPlayerDialog( playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji" );
					return 1;
				}

				if( strval( inputtext ) < 1 || strval( inputtext ) > inventoryInfo[ playerid ][ itemid ][ invQuantity ] )
				{
					new stringic[ 180 ];
					format( stringic, sizeof( stringic ), "Dajete: %s (Kolicina: %d)\n\nUnesite koliku kolicinu dajete igracu %s:", inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invQuantity ], ImeIgraca( userid ) );
					ShowPlayerDialog( playerid, dialog_GIVEQUANTITY, DSI, "Daj predmet", stringic, "Daj", "Izadji" );
					return 1;
				}
					
				new id = Inventory_Add( userid, inventoryInfo[ playerid ][ itemid ][ invItem ], inventoryInfo[ playerid ][ itemid ][ invModel ], strval( inputtext ) );

				if( id == -1 )
					return GRESKA(playerid, "Igracu je pun inventory!" );

				SendInfoMessage( playerid, "Dali ste %s igracu %s.", inventoryInfo[ playerid ][ itemid ][ invItem ], ImeIgraca( userid ) );
				SendInfoMessage( userid, "Igrac %s vam je dao %s i ubacili ste u inventory!", ImeIgraca( playerid ), inventoryInfo[ playerid ][ itemid ][ invItem ] );

				Inventory_Remove( playerid, inventoryInfo[ playerid ][ itemid ][ invItem ], strval( inputtext ) );
			}
		}
	}
	
	
	else if( dialogid == dialog_TUNING ) {
			if( response ) {
				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Morate biti u vozilu." );
				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return GRESKA( playerid, "Morate biti na mjestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid ), Float:Pos[ 6 ];

				TPInfo[ playerid ][ tID ] = -1;

				switch( listitem ) {
					case 0: {

						for( new i = 0; i < NUMBER_TYPE_PAINTJOB; i++ ) {
							if( pjInfo[ i ][ vehID ] == GetVehicleModel( vehicleid ) ) {
								TPInfo[ playerid ][ tID ] = i;
								break;
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih boja za vas model auta." );

						new tpid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tPaintjob ] = true;

						GetVehicleColor( vehicleid, TPInfo[ playerid ][ PJColor ][ 0 ], TPInfo[ playerid ][ PJColor ][ 1 ] );

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						ChangeVehicleColor( vehicleid, 1, 1 );
						ChangeVehiclePaintjob( vehicleid, pjInfo[ tpid ][ pNumber ] );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Paintjobs" );
						format( globalstring, sizeof( globalstring ), "%s", pjInfo[ tpid ][ pNameBre ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 1: {
						ShowPlayerDialog( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
					}
					case 2: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_EXHAUST ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_EXHAUST;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Exhausts" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], -2, -5, 0 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 3: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_FRONT_BUMPER ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_FRONT_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );
						
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Front Bumper" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 4: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_REAR_BUMPER ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_REAR_BUMPER;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Rear Bumper" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 5: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_ROOF ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_ROOF;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Roof" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, 6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 6: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_SPOILER ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SPOILER;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Spoilers" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 7: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_SIDESKIRT ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_SIDESKIRT;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Side Skirts" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 8: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_WHEELS ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_WHEELS;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Wheels" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 4, 0, 0.5 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 9: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_STEREO ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_STEREO;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Car Stereo" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 10: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_HYDRAULICS ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_HYDRAULICS;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Hydraulics" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 2, 2, 2 );
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
					case 11: {

						for( new i = 0; i < MAX_COMPONENTS; i++ ) {
							if( cInfo[ i ][ cType ] == CARMODTYPE_NITRO ) {
								if( cInfo[ i ][ cID ] == IsComponentidCompatible( GetVehicleModel( vehicleid ), cInfo[ i ][ cID ] ) ) {
									TPInfo[ playerid ][ tID ] = i;
									break;
								}
							}
						}
						if( TPInfo[ playerid ][ tID ] == -1 ) return GRESKA( playerid, "Nema kompatibilnih komponenti izabrane vrste za vas model auta." );

						new cid = TPInfo[ playerid ][ tID ];
						TPInfo[ playerid ][ tType ] = CARMODTYPE_NITRO;
						TPInfo[ playerid ][ tPaintjob ] = false;

						TogglePlayerControllable( playerid, false );
						TuningTDShow( playerid, true );

						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 1 ], "Nitro" );
						format( globalstring, sizeof( globalstring ), "%s", cInfo[ cid ][ cName ] );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 3 ], globalstring );
						format( globalstring, sizeof( globalstring ), "%s", GetVehicleNameEx( GetVehicleModel( vehicleid ) ) );
						PlayerTextDrawSetString( playerid, TuningBuy[ playerid ][ 4 ], globalstring );

						AddVehicleComponent( vehicleid, cInfo[ cid ][ cID ] );

						GetVehicleCameraPos( vehicleid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ], 0, -6, 2 ); // done
						SetPlayerCameraPos( playerid, Pos[ 0 ], Pos[ 1 ], Pos[ 2 ] );

						GetVehiclePos( vehicleid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );
						SetPlayerCameraLookAt( playerid, Pos[ 0 ],Pos[ 1 ],Pos[ 2 ] );

						SelectTextDraw( playerid, UGBOJA );
					}
				}
			}
			else if( !response ) {
				SetCameraBehindPlayer( playerid );
				TuningTDControl( playerid, false );
				PlayerTuningCar[ playerid ] = false;
			}
	}
	else if( dialogid == dialog_TUNING_2 )
	{
			if( !response ) return 1;
			if( response )
			{
				if( !IsPlayerInAnyVehicle( playerid ) ) return GRESKA( playerid, "Morate biti u vozilu." );
				if( GetPlayerState( playerid ) != PLAYER_STATE_DRIVER ) return GRESKA( playerid, "Morate biti na mjestu vozaca." );
				new vehicleid = GetPlayerVehicleID( playerid );
				new b1, b2;
				if( sscanf( inputtext, "ii", b1, b2 ) ) return ShowPlayerDialog( playerid, dialog_TUNING_2, DSI, D_NASLOV, "Unesi id boje 1 i id boje 2 boje koje zelis za svoje auto.\nFormat:0 1", D_ODABERI, D_ODUSTANI );
				if( b1 < 0 || b2 < 0 || b1 > 255 || b2 > 255 ) return GRESKA( playerid, "ID boje ne moze biti manji od 0 ili veci od 255!");

				ChangeVehicleColor( vehicleid, b1, b2 );

				ShowPlayerDialog( playerid, dialog_TUNING, DSL, D_NASLOV, "Paintjobs\nColors\nExhausts\nFront Bumper\nRear Bumper\nRoof\nSpoilers\nSide Skirts\nWheels\nCar Stereo\nHydraulics\nNitro", D_ODABERI, D_ODUSTANI );
			}
	}
	else if( dialogid == dialog_BIRAJLOKACIJU ) { 
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					Dimi_SetPlayerCheckpoint( playerid, -569.0004, -93.3358, 63.9587, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara drveca." );
				}
				case 1: {
					Dimi_SetPlayerCheckpoint( playerid, 2482.1101, -2081.8760, 14.5476, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara goriva." );
				}
				case 2: {
					Dimi_SetPlayerCheckpoint( playerid, 620.8951, 832.1742, -42.9609, 5.0 );
					CheckpointStatus[ playerid ] = 15;
					SendJobMessage( playerid, "Oznacena vam je lokacija utovara sljunka." );
				}
			}
		}
	}
	else if( dialogid == dialog_VERIFIKACIJA ) {
		if( !response ) return true;
		if( response ) {
			if( PlayerCode[ playerid ] == strval( inputtext ) && !isnull( inputtext ) ) {
				SendInfoMessage( playerid, "Vas account je verifikovan, sada mozete pokrenuti posao." );
				AccountVerified[ playerid ] = true;
			}
			else return GRESKA( playerid, "Uneli ste pogresan kod." );
		}
	}
	else if( dialogid == dialog_CCTV )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					SetPlayerPos( playerid, 1462.7770, -1010.1996, 26.9577 );
					SetPlayerCameraPos(playerid, 1467.6172, -1048.2443, 30.1781);
					SetPlayerCameraLookAt(playerid, 1467.3369, -1047.2794, 30.0231);
					SetPlayerInterior( playerid, 0 );
					SetPlayerVirtualWorld( playerid, 0 );
				}
				case 1:
				{
					SetPlayerPos( playerid, 1473.5449, -1011.5173, 2065.3208 );
					SetPlayerCameraPos(playerid, 1474.0724, -1012.1747, 2059.8696);
					SetPlayerCameraLookAt(playerid, 1473.1829, -1011.7255, 2059.6013);
					SetPlayerInterior( playerid, 1 );
					SetPlayerVirtualWorld( playerid, 1 );
				}
				case 2:
				{
					SetPlayerPos( playerid, 1460.1008, -1010.8947, 2063.4331 );
					SetPlayerCameraPos(playerid, 1459.9272, -1012.4574, 2060.0027);
					SetPlayerCameraLookAt(playerid, 1460.5386, -1011.6682, 2059.8335);
					SetPlayerInterior( playerid, 1 );
					SetPlayerVirtualWorld( playerid, 1 );
				}
				case 3:
				{
					SetPlayerPos( playerid, 1473.9985, -997.5958, 2063.4919 );
					SetPlayerCameraPos(playerid, 1474.1492, -997.1581, 2060.1272);
					SetPlayerCameraLookAt(playerid, 1473.1796, -996.9211, 2059.7727);
					SetPlayerInterior( playerid, 1 );
					SetPlayerVirtualWorld( playerid, 1 );
				}
				case 4:
				{
					SetPlayerPos( playerid, 1477.8391, -996.0196, 2051.1995 );
					SetPlayerCameraPos(playerid, 1478.4259, -996.6038, 2048.0793);
					SetPlayerCameraLookAt(playerid, 1477.8000, -997.3799, 2047.9006);
					SetPlayerInterior( playerid, 1 );
					SetPlayerVirtualWorld( playerid, 1 );
				}
			}
		}
	}
	else if( dialogid == dialog_RADIOPLAY )
	{
		if( !response ) return true;
		if( response )
		{
			switch( listitem )
			{
				case 0:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://radio.bumbumradio.rs:8010" );
					SendInfoMessage( playerid, "Pustili ste BUM radio." );
				}
				case 1:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://stream.b92.net:7999/radio-b92.mp3.m3u" );
					SendInfoMessage( playerid, "Pustili ste B92 radio." );
				}
				case 2:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://94.23.38.225:7005" );
					SendInfoMessage( playerid, "Pustili ste Antena radio." );
				}
				case 3:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://rtvmerak.com:8003" );
					SendInfoMessage( playerid, "Pustili ste radio Juzni Vetar." );
				}
				case 4:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://176.9.30.66/listen.pls" );
					SendInfoMessage( playerid, "Pustili ste Cool Radio." );
				}
				case 5:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://naxi128.streaming.rs:9150" );
					SendInfoMessage( playerid, "Pustili ste Naxi Radio." );
				}
				case 6:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://50.7.70.66:8559" );
					SendInfoMessage( playerid, "Pustili ste Pingvin Radio." );
				}
				case 7:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://carsija.topstream.net:19406" );
					SendInfoMessage( playerid, "Pustili ste Carsija Radio." );
				}
				case 8:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://stream.rtvbn.com:8522" );
					SendInfoMessage( playerid, "Pustili ste Radio BN." );
				}
				case 9:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://195.222.33.217:8026" );
					SendInfoMessage( playerid, "Pustili ste Radio M." );
				}
				case 10:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://stream2.radio-banovina.hr:9996" );
					SendInfoMessage( playerid, "Pustili ste Radio Banovina." );
				}
				case 11:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://88.198.53.74:9996" );
					SendInfoMessage( playerid, "Pustili ste Radio Super." );
				}
				case 12:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://balkan.dj.topstream.net:8070" );
					SendInfoMessage( playerid, "Pustili ste radio Balkan DJ." );
				}
				case 13:
				{
					StopAudioStreamForPlayer( playerid );
					PlayAudioStreamForPlayer( playerid, "http://myradiostream.com/2/30232.pls" );
					SendInfoMessage( playerid, "Pustili ste radio D Plus." );
				}
				case 14:
				{
					StopAudioStreamForPlayer( playerid );
					SendInfoMessage( playerid, "Ugasili ste radio." );
				}
			}
		}
	}
	else if( dialogid == dialog_IZAZOVITRKA ) {
		if( !response ) return true;
		if( response ) {
			if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return GRESKA( playerid, "Ne mozes ako nisi level 3+." );
			if( PlayerCuffed[ playerid ] >= 1 ) return GRESKA( playerid, "Ne mozes na izazov dok si cuffovan." );
			if( IgracZavezan[ playerid ] == true ) return GRESKA( playerid, "Ne mozes na izazov dok si vezan." );
			if( IsPlayerInAnyVehicle( playerid )  ) return GRESKA( playerid, "Morate biti na nogamo da bi otisli na izazov." );
			if( GetPlayerState( playerid ) != PLAYER_STATE_ONFOOT ) return GRESKA( playerid, "Morate biti na nogamo da bi otisli na izazov." );
			if( GetPlayerInterior( playerid ) != 0 ) return GRESKA( playerid, "Ne mozete koristiti u interijeru." );
			if( GetPlayerVirtualWorld( playerid ) != 0 ) return GRESKA( playerid, "Ne mozete koristiti u interijeru/vwu." );
			if( PlayerInfo[ playerid ][ xWanted ] >= 1 ) return GRESKA( playerid, "Ne mozete na izazov dok imate wanted.");
			if( PlayerInfo[ playerid ][ xZatvor ] >= 1 ) return GRESKA( playerid, "Ne mozete na izazov dok ste u zatvoru / ALKATRAZ.");
			if( PlayerInfo[ playerid ][ xNovac ] < UlogTrke[ playerid ] ) return GRESKA( playerid, "Nemate dovoljno novca za ulog." );
			if( NaUtrci[ playerid ] ) return GRESKA( playerid, "Vec si na trci." );
	
			new igrac = PonudioIgrac[ playerid ];
			new model = ModelTrke[ playerid ];
			new ulog = UlogTrke[ playerid ];
			new virtualworld = playerid;
			if( igrac == IPI ) return GRESKA( playerid, "Igrac koji vas je izazvao nije na serveru." );

			if( PljackaNovac[ playerid ] > 0 ) return GRESKA( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
			if( PljackaNovac[ igrac ] > 0 ) return GRESKA( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
			if( PljackaZlato[ igrac ] > 0 ) return GRESKA( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );
			if( PljackaZlato[ playerid ] > 0 ) return GRESKA( playerid, "Ne mozes da ides na trku dok si u toku pljacke." );

			GetPlayerPos( playerid, PlayerPos[ playerid ][ 0 ], PlayerPos[ playerid ][ 1 ], PlayerPos[ playerid ][ 2 ] );
			PlayerPosInt[ playerid ] = GetPlayerInterior( playerid );
			PlayerPosVW[ playerid ] = GetPlayerVirtualWorld( playerid );
			
			GetPlayerPos( igrac, PlayerPos[ igrac ][ 0 ], PlayerPos[ igrac ][ 1 ], PlayerPos[ igrac ][ 2 ] );
			PlayerPosInt[ igrac ] = GetPlayerInterior( igrac );
			PlayerPosVW[ igrac ] = GetPlayerVirtualWorld( igrac );

			TrkaVozilo[ igrac ] = Dimi_CreateVehicle( -1, -1, -1, -1, -1, model, -1392.8976, -226.2226, 1042.9152, 0, random( 128 ), random( 128 ), 3600 );
			Dimi_SetPlayerPos( igrac, -1392.8976, -226.2226, 1042.9152 );
			Dimi_PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
			SetVehicleVirtualWorld( TrkaVozilo[ igrac ], virtualworld );
			LinkVehicleToInterior( TrkaVozilo[ igrac ], 7 );
			SetPlayerVirtualWorld( igrac, virtualworld );
			SetPlayerInterior( igrac, 7 );
			vCanDrive[ TrkaVozilo[ igrac ] ] = 1;
			Fuel[ TrkaVozilo[ igrac ] ] = 100;
			Dimi_PutPlayerInVehicle( igrac, TrkaVozilo[ igrac ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ igrac ] );
			SetVehicleParamsEx( TrkaVozilo[ igrac ], 1, 0, 0, 0, 0, 0, 0);
			TogglePlayerControllable( igrac, false );
			Krugovi[ igrac ] = 0; TrkaCheckpoint[ igrac ] = 0;
			TrkaIzazov[ igrac ] = 4;
			NaUtrci[ igrac ] = true;
			DajIgracuNovac( igrac, -ulog );
			
			TrkaVozilo[ playerid ] = Dimi_CreateVehicle( -1, -1, -1, -1, -1, model, -1398.1986, -223.7272, 1042.8796, 0, random( 128 ), random( 128 ), 3600 );
			Dimi_SetPlayerPos( playerid, -1398.1986, -223.7272, 1042.8796 );
			Dimi_PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
			SetVehicleVirtualWorld( TrkaVozilo[ playerid ], virtualworld );
			LinkVehicleToInterior( TrkaVozilo[ playerid ], 7 );
			SetPlayerVirtualWorld( playerid, virtualworld );
			SetPlayerInterior( playerid, 7 );
			vCanDrive[ TrkaVozilo[ playerid ] ] = 1;
			Fuel[ TrkaVozilo[ playerid ] ] = 100;
			Dimi_PutPlayerInVehicle( playerid, TrkaVozilo[ playerid ], 0 );
			ResetVehicleStatistics( TrkaVozilo[ playerid ] );
			SetVehicleParamsEx( TrkaVozilo[ playerid ], 1, 0, 0, 0, 0, 0, 0);
			TogglePlayerControllable( playerid, false );
			Krugovi[ playerid ] = 0; TrkaCheckpoint[ playerid ] = 0;
			TrkaIzazov[ playerid ] = 4;
			NaUtrci[ playerid ] = true;
			DajIgracuNovac( playerid, -ulog );
			
			SendInfoMessage( igrac, "Izazvani %s je prihvatio vas izazov.", ImeIgraca( playerid ) );
			SendInfoMessage( playerid, "Prihvatili ste izazov od %s.", ImeIgraca( igrac ) );
			
			SendInfoMessage( playerid, "Ko prvi zavrsi 10 krugova je pobednik." );
			SendInfoMessage( igrac, "Ko prvi zavrsi 10 krugova je pobednik." );
			
			IzazivanjeTimer[ playerid ] = SetTimerEx( "TimerIzazov", 1000, true, "d", playerid );
			IzazivanjeTimer[ igrac ] = SetTimerEx( "TimerIzazov", 1000, true, "d", igrac );
		}
		else if( !response ) {
		
			if( PonudioIgrac[ playerid ] != -1 ) SendInfoMessage( PonudioIgrac[ playerid ], "Izazvani %s je odbio vas izazov.", ImeIgraca( playerid ) );

			SendInfoMessage( playerid, "Odbili ste izazov od %s.", ImeIgraca( PonudioIgrac[ playerid ] ) );
			
			PonudioIgrac[ playerid ] = -1;
			ModelTrke[ playerid ] = 0;
		}
	}
	else if( dialogid == dialog_ORGSAFE ) {
		if( !response ) return true;
		if( response ) {
			switch( listitem ) {
				case 0: {
					new OrgID = PlayerInfo[ playerid ][ xClan ],
						#if nerp_droga == 1
						drug1 = OI[ OrgID ][ oSafeDrugCode ][ 0 ],
						drug2 = OI[ OrgID ][ oSafeDrugCode ][ 1 ],
						drug3 = OI[ OrgID ][ oSafeDrugCode ][ 2 ],
						drug4 = OI[ OrgID ][ oSafeDrugCode ][ 3 ];
						#endif

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					
					format( globalstring, sizeof( globalstring ), "Novac: %d$\n", OI[ OrgID ][ oSafeMoney ] );
					strcat( DialogStrgEx, globalstring );
					#if nerp_droga == 1
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					format( globalstring, sizeof( globalstring ), "Drug1: %s(%d g) | Drug2: %s(%d g)\n", GetDrugNameByDrugID(drug1), OI[ OrgID ][ oSafeDrug ][ 0 ], GetDrugNameByDrugID(drug2), OI[ OrgID ][ oSafeDrug ][ 1 ] );
					strcat( DialogStrgEx, globalstring );

					format( globalstring, sizeof( globalstring ), "Drug3: %s(%d g) | Drug4: %s(%d g)\n", GetDrugNameByDrugID(drug3), OI[ OrgID ][ oSafeDrug ][ 2 ], GetDrugNameByDrugID(drug4), OI[ OrgID ][ oSafeDrug ][ 3 ] );
					strcat( DialogStrgEx, globalstring );
					#endif
					strcat( DialogStrgEx, ""col_balkanstory"__________________________"col_white"__________________________\n");
					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				}
				case 1: {
					ShowPlayerDialog( playerid, dialog_ORGSAFEPUT, DSMSG, D_NASLOV,  "Izaberi sta zelis da ostavis?", "Novac", "Drogu" );
				}
				case 2: {
					if( PlayerInfo[ playerid ][ xLider ] == 0 ) return GRESKA( playerid, "Ovo moze samo lider." );
					ShowPlayerDialog( playerid, dialog_ORGSAFETAKE, DSMSG, D_NASLOV,  "Izaberi sta zelis da uzmes?", "Novac", "Drogu" );
				}
			}
		}
	}
	else if( dialogid == dialog_ORGSAFEPUT ) {
		if( response ) {
			ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
		}
		#if nerp_droga == 1
		else if( !response ) {
			ShowPlayerDialog( playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );
		}
		#endif
	}
	else if( dialogid == dialog_ORGSAFETAKE ) {
		if( response ) {
			ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
		}
		#if nerp_droga == 1
		else if( !response ) {
		
			new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ], OrgID = PlayerInfo[ playerid ][ xClan ];
			if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 1 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 2 ] == 0 && OI[ OrgID ][ oSafeDrugCode ][ 3 ] == 0 ) return GRESKA( playerid, "Svi slotovi droge su prazni!");

			if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 )
				format( drugname1, sizeof( drugname1 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 0 ] ) );
			else
				format( drugname1, sizeof( drugname1 ), "None" );

			if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 )
				format( drugname2, sizeof( drugname2 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 1 ] ) );
			else
				format( drugname2, sizeof( drugname2 ), "None" );

			if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 )
				format( drugname3, sizeof( drugname3 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 2 ] ) );
			else
				format( drugname3, sizeof( drugname3 ), "None" );
				
			if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 )
				format( drugname4, sizeof( drugname4 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 3 ] ) );
			else
				format( drugname4, sizeof( drugname4 ), "None" );
				
			new string[ 256 ];
			format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
			ShowPlayerDialog( playerid, dialog_ORGSAFETDRUG, DSI, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
		}
		#endif
	}
	#if nerp_droga == 1
	else if( dialogid == dialog_ORGSAFETDRUG ) {
		if( !response ) return 1;
		if( response ) {

			new slot, slot2, kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) {
			
				new drugname1[ 32 ], drugname2[ 32 ], drugname3[ 32 ], drugname4[ 32 ];
				
				if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 )
					format( drugname1, sizeof( drugname1 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 0 ] ) );
				else
					format( drugname1, sizeof( drugname1 ), "None" );

				if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 )
					format( drugname2, sizeof( drugname2 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 1 ] ) );
				else
					format( drugname2, sizeof( drugname2 ), "None" );

				if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 )
					format( drugname3, sizeof( drugname3 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 2 ] ) );
				else
					format( drugname3, sizeof( drugname3 ), "None" );

				if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 )
					format( drugname4, sizeof( drugname4 ), "%s", GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ 3 ] ) );
				else
					format( drugname4, sizeof( drugname4 ), "None" );

				new string[ 256 ];
				format( string, sizeof( string ), "1. %s\n2. %s\n3. %s\n4. %s\nUnesite slot droge u sefu i kolicinu droge za uzimanje.\nPrimer: 1 232", drugname1, drugname2, drugname3, drugname4 );
				ShowPlayerDialog( playerid, dialog_ORGSAFETDRUG, DSL, D_NASLOV, string, D_ODABERI, D_ODUSTANI );
				
				return 1;
			}

			if( slot < 1 || slot > 4 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( OI[ OrgID ][ oSafeDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Ovaj sef nema drogu pod tim slotom!");
			if( kolicina < 1 || kolicina > OI[ OrgID ][ oSafeDrug ][ slot2 ] ) return GRESKA( playerid, "Ovaj sef nema toliko droge pod tim slotom!");

			OI[ OrgID ][ oSafeDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s uzima nesto iz sefa.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, UGBOJA, "%s | Uzeli ste %d grama %s iz sefa.", OI[ OrgID ][ oPreFix ], kolicina, GetDrugNameByDrugID( OI[ OrgID ][ oSafeDrugCode ][ slot2 ] ) );

			if( PlayerInfo[ playerid ][ xDrugCode ][ 0 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 0 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 0 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 1 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 1 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 1 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 2 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 2 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 2 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 3 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 3 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 3 ] = kolicina;
			}
			else if( PlayerInfo[ playerid ][ xDrugCode ][ 4 ] == 0 ) {
				PlayerInfo[ playerid ][ xDrugCode ][ 4 ] = OI[ OrgID ][ oSafeDrugCode ][ slot2 ];
				PlayerInfo[ playerid ][ xDrug ][ 4 ] = kolicina;
			}

			if( OI[ OrgID ][ oSafeDrug ][ slot2 ] <= 0 )
				OI[ OrgID ][ oSafeDrugCode ][ slot2 ] = 0;
				
			SaveOrganization( OrgID );
		}
	}
	else if( dialogid == dialog_ORGSAFEPDRUG ) {
		if( !response ) return 1;
		if( response ) {
			new slot, slot2, kolicina, OrgID = PlayerInfo[ playerid ][ xClan ];
			if( sscanf( inputtext, "dd", slot, kolicina ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPDRUG, DSI, D_NASLOV,  "Unesite slot droge kod igraca i kolicinu droge za ostavljanje.\nPrimer: 1 232.", D_ODABERI, D_ODUSTANI );

			if( slot < 1 || slot > 5 ) return GRESKA( playerid, "Krivi broj slota!");
			slot2 = slot-1;
			if( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] == 0 ) return GRESKA( playerid, "Nemate droge pod tim slotom!" );
			if( kolicina < 1 || kolicina > PlayerInfo[ playerid ][ xDrug ][ slot2 ] ) return GRESKA( playerid, "Nemate toliko droge pod tim slotom!");
			if( kolicina > 1000 ) return GRESKA( playerid, "Najvise u 1 slotu sefa moze stati 1000g droge." );
			if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 1 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 2 ] != 0 && OI[ OrgID ][ oSafeDrugCode ][ 3 ] != 0 ) return GRESKA( playerid, "Svih 4 slotova droge u sefu su zauzeti!");

			PlayerInfo[ playerid ][ xDrug ][ slot2 ] -= kolicina;
			format( globalstring, sizeof( globalstring ), "* %s stavlja nesto u sef.", ImeIgraca( playerid ) );
			PorukaRadius( 10.0, playerid, globalstring, LJUBICASTA );
			SendClientMessageEx( playerid, ZUTA, "%s | Stavili ste %d grama %s u sef.", OI[ OrgID ][ oPreFix ], kolicina , GetDrugNameByDrugID( PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] ) );

			if( OI[ OrgID ][ oSafeDrugCode ][ 0 ] == 0 ) {
				OI[ OrgID ][ oSafeDrugCode ][ 0 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				OI[ OrgID ][ oSafeDrug ][ 0 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 1 ] == 0) {
				OI[ OrgID ][ oSafeDrugCode ][ 1 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				OI[ OrgID ][ oSafeDrug ][ 1 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 2 ] == 0) {
				OI[ OrgID ][ oSafeDrugCode ][ 2 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				OI[ OrgID ][ oSafeDrug ][ 2 ] = kolicina;
			}
			else if( OI[ OrgID ][ oSafeDrugCode ][ 3 ] == 0) {
				OI[ OrgID ][ oSafeDrugCode ][ 3 ] = PlayerInfo[ playerid ][ xDrugCode ][ slot2 ];
				OI[ OrgID ][ oSafeDrug ][ 3 ] = kolicina;
			}
			SaveOrganization( OrgID );

			if( PlayerInfo[ playerid ][ xDrug ][ slot2 ] <= 0 )
				PlayerInfo[ playerid ][ xDrugCode ][ slot2 ] = 0;
		}
	}
	#endif
	else if( dialogid == dialog_ORGSAFEPMONEY ) {
		if( !response ) return true;
		if( response ) {
			new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( novac < 1 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );
			if( novac > PlayerInfo[ playerid ][ xNovac ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFEPMONEY, DSI, D_NASLOV,  "GRESKA: Nemate toliko novca kod sebe\nUnesite koliko novca zelite da ostavite.", D_ODABERI, D_ODUSTANI );

			DajIgracuNovac( playerid, -novac );
			OI[ OrgID ][ oSafeMoney ] += novac;
			SaveOrganization( OrgID );

			SendClientMessageEx( playerid, ZUTA, "%s | Ostavili ste %d$ u sef.", OI[ OrgID ][ oPreFix ], novac );
		}
	}
	else if( dialogid == dialog_ORGSAFETMONEY ) {
		if( !response ) return true;
		if( response ) {
			new novac, OrgID = PlayerInfo[ playerid ][ xClan ];
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "Unesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			if( novac < 1 || novac > 100000 ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Ne moze ispod 1 ili iznad 100000\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );
			if( novac > OI[ OrgID ][ oSafeMoney ] ) return ShowPlayerDialog( playerid, dialog_ORGSAFETMONEY, DSI, D_NASLOV,  "GRESKA: Nema toliko novca u sefu\nUnesite koliko novca zelite da uzmete iz sefa.", D_ODABERI, D_ODUSTANI );

			DajIgracuNovac( playerid, novac );
			OI[ OrgID ][ oSafeMoney ] -= novac;
			SaveOrganization( OrgID );

			SendClientMessageEx( playerid, ZUTA, "%s | Uzeli ste %d$ iz sefa.", OI[ OrgID ][ oPreFix ], novac );
		}
	}
	else if( dialogid == dialog_RCONPROVERA ) {
	
		if( !response ) return Kick( playerid );
		if( response ) {
		
			new broj;
			if( sscanf( inputtext, "i", broj ) ) return ShowPlayerDialog( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kodn\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
			if( broj != 447832 ) return ShowPlayerDialog( playerid, dialog_RCONPROVERA, DSP, D_NASLOV, "Da bi mogli da koristite RCON admina, morate da ukucate sigurnosni RCON kodn\nMolimo vas da kod unesete ispod!", D_ODABERI, D_ODUSTANI );
			
			SendInfoMessage( playerid, "Uspjesno si se ulogovao kao RCON administrator!" );
		}
	}
	else if( dialogid == dialog_ASKLISTA )
	{
		if( !response ) return true;
		if( response )
		{
			listitem++;
			new string[ 256 ];
			if( askqList[ listitem ][ askqSend ] == false ) return GRESKA( playerid, "Taj slot je prazan!" );
			
			IzabraniAskQ[ playerid ] = listitem;
			
			format( string, sizeof( string ), "Igrac %s je poslao pitanje.\n\nTekst pitanja: %s", askqList[ listitem ][ askqOwner ], askqList[ listitem ][ askqQuestion ] );
			
			ShowPlayerDialog( playerid, dialog_ASKLISTA_2, DSI, "Nova Era | Pitanje igraca", string, D_ODABERI, D_ODUSTANI );
		}
	}
	else if( dialogid == dialog_ASKLISTA_2 )
	{
		if( !response ) return true;
		if( response )
		{
			new text[ 128 ];
			if( sscanf( inputtext, "s[128]", text ) ) return 1;
			
			new askid = IzabraniAskQ[ playerid ];

			if( askqList[ askid ][ askqSend ] == false ) return GRESKA( playerid, "Tu nema pitanja na koje bi mogao dati odgovor!" );

			askqList[ askid ][ askqSend ] = false;
			
			new id = askqList[ askid ][ askqID ];
			IzabraniAskQ[ playerid ] = -1;
			
			if( strcmp( ImeIgraca( id ), askqList[ askid ][ askqOwner ], true ) == 0 )
			{

				askqInfo[ id ][ askqAnswered ] = true;
				strmid( askqInfo[ id ][ askqAdmin ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32 );
				strmid( askqInfo[ id ][ askqAnswer ], text, 0, strlen( text ), 128 );
				
				if( PlayerInfo[ playerid ][ xHelper ] >= 1 )
				{
					format( globalstring, sizeof( globalstring ), ""col_balkanstory"|GM-ODG| %s -> %s : %s!.", ImeIgraca( playerid ), askqList[ askid ][ askqOwner ], text );
					RPTChatPlus( HELPER, globalstring );
				}
				
				SendInfoMessage( playerid, "Odgovorili ste igracu %s na postavljeno pitanje!", askqList[ askid ][ askqOwner ] );
				SendInfoMessage( playerid, "Tekst odgovora: %s.", text );
				
				//SendClientMessageEx( id, -1, "{FF0000}<< ODGOVOR >> {FFFFFF}Dobili ste odgovor od Admin/GM tima!" );
				SendInfoMessage(id,"Staff je odgovorio na tvoj report na /pitaj, da vidis odgovor - /pogledajodgovor.");
				strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
				askqList[ askid ][ askqID ] = -1;
				
				/*new string[ 256 ];
				format( string, sizeof( string ), "{FFFFFF}Admin/GM %s je dao odgovor na vas upit!\n\nText odgovora: %s", askqInfo[ id ][ askqAdmin ], askqInfo[ id ][ askqAnswer ] );
				ShowPlayerDialog( id, 0, DSMSG, "Odgovor na vase pitanje", string, "Uredu", "" );
				askqInfo[ id ][ askqSended ] = false;
				askqInfo[ id ][ askqAnswered ] = false;
				strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
				strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );*/

			}
			else
			{
			
				if( id != IPI )
				{
				
					askqInfo[ id ][ askqSended ] = false;
					askqInfo[ id ][ askqAnswered ] = false;
					strmid( askqInfo[ id ][ askqAdmin ], "None", 0, strlen( "None" ), 32 );
					strmid( askqInfo[ id ][ askqAnswer ], "None", 0, strlen( "None" ), 128 );
				}
				
				strmid( askqList[ askid ][ askqOwner ], "None", 0, strlen( "None" ), 32 );
				askqList[ askid ][ askqID ] = -1;
				GRESKA( playerid, "Taj igrac nije online." );
				return 1;
			}
		}
	}
	else if( dialogid == dialog_ZAMENA_2 ) {

		if( !response ) return 1;
		if( response ) {
		
			new slot1, slot2, igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];
			
			strmid( VehicleInfo[ ID_1 ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
			strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { slot1 = 1; }//PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2; }
			else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { slot1 = 2; }//PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
			else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { slot1 = 3; }//PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
			else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { slot1 = 4; }//PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

			if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { slot2 = 1; }//PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_1; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { slot2 = 2; }//PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_1; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { slot2 = 3; }//PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_1; }
			else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { slot2 = 4; }//PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_1; }

			if( slot1 == 1 ) { PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2; }
			else if( slot1 == 2 ) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
			else if( slot1 == 3 ) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
			else if( slot1 == 4 ) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }
			
			if( slot2 == 1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = ID_1; }
			else if( slot2 == 2 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = ID_1; }
			else if( slot2 == 3 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = ID_1; }
			else if( slot2 == 4 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = ID_1; }


			new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaV | %s - %s(ID %d) -> %s - %s(ID %d)", ImeIgraca( igrac ), GetVehicleNameEx( VehicleInfo[ ID_1 ][ vModel ] ), ID_1, ImeIgraca( playerid ), GetVehicleNameEx( VehicleInfo[ ID_2 ][ vModel ] ), ID_2 );
			LogSave( "Ostalo/LogZamenaVozila.log", string1 );

			SavePlayer( playerid ); SavePlayer( igrac );
			SaveVehicle( ID_1 ); SaveVehicle( ID_2 );
		}
	}
	else if( dialogid == dialog_ZAMENA_4 ) {

		if( !response ) return 1;
		if( response ) {

			new slot1, slot2, igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

			strmid( II[ ID_1 ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
			strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == II[ ID_1 ][ iVW ] ) { slot1 = 1; }
			else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == II[ ID_1 ][ iVW ] ) { slot1 = 2; }
			else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == II[ ID_1 ][ iVW ] ) { slot1 = 3; }

			if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == II[ ID_2 ][ iVW ] ) { slot2 = 1; }
			else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == II[ ID_2 ][ iVW ] ) { slot2 = 2; }
			else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == II[ ID_2 ][ iVW ] ) { slot2 = 3; }

			if( slot1 == 1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
			else if( slot1 == 2 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
			else if( slot1 == 3 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

			if( slot2 == 1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = ID_1; }
			else if( slot2 == 2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = ID_1; }
			else if( slot2 == 3 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = ID_1; }

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaI | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2 );
			LogSave( "Ostalo/LogZamenaImovina.log", string1 );
			
			SavePlayer( playerid ); SavePlayer( igrac );
			SaveProperty( ID_1 ); SaveProperty( ID_2 );
		}
	}
	else if( dialogid == dialog_ZAMENA_3 ) {

		if( !response ) return 1;
		if( response ) {

			new igrac = GlobalProdaja[ playerid ], ID_1 = PlayerInfo[ igrac ][ xFirmaID ], ID_2 = PlayerInfo[ playerid ][ xFirmaID ];

			strmid( BussinesInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);
			strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

			PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
			PlayerInfo[ playerid ][ xFirmaID ] = ID_1;

			new string1[ 128 ];
			format( string1, sizeof( string1 ), "ZamenaF | %s - ID %d -> %s - ID %d", ImeIgraca( igrac ), ID_1, ImeIgraca( playerid ), ID_2 );
			LogSave( "Ostalo/LogZamenaFirmi.log", string1 );

			SavePlayer( playerid ); SavePlayer( igrac );
			SaveBussines( ID_1 ); SaveBussines( ID_2 );
		}
	}
	#if kladionica == 1
	else if( dialogid == dialog_UPLATITIKET ) {
	
		if( response ) {
		
			IzabraniPar[ playerid ] = listitem;
			
			new str[ 20 ];
			
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			format( str, sizeof( str ), "1 - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "X - %.2f\n", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ] );
			strcat( DialogStrgEx, str );
			format( str, sizeof( str ), "2 - %.2f", Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ] );
			strcat( DialogStrgEx, str );

			ShowPlayerDialog( playerid, dialog_UPLATITIKET_2, DSL, "Izaberi konacan ishod", DialogStrgEx, "Izaberi", "Odustani" );

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		}
		else if( !response ) {
		
			for( new i = 0; i < 10; i++ ) {
				KladionicaListic[ playerid ][ parID ][ i ] = -1;
				KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
				KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
				KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
			KladionicaListic[ playerid ][ Dobitak ] = 0;
			KladionicaListic[ playerid ][ Status ] = false;
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
		
	}
	else if( dialogid == dialog_UPLATITIKET_2 ) {

		if( response ) {
		
			for( new ic = 0; ic < 10; ic++ ) {
			
				if( IzabraniPar[ playerid ] == KladionicaListic[ playerid ][ parID ][ ic ] ) {
				
					new str[ 128 ];

					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
					strcat( DialogStrgEx, str );

					for(  new i = 0; i < 10; i++ ) {

						format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

						strcat( DialogStrgEx, str );
					}

					ShowPlayerDialog( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
					strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				
					GRESKA( playerid, "Vec imate taj par na listicu." );
					return true;
				
				}
			}
		
			new izabraniID = -1;
			for( new i = 0; i < 10; i++ ) {
			
				if( KladionicaListic[ playerid ][ parID ][ i ] == -1 ) {

					izabraniID = i;
					break;

				}
			}
			if( izabraniID == -1 ) {
			
				ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
				GRESKA( playerid, "Vec imas odigranih 10 parova." );
				return 1;
			}
			
			switch( listitem ) {
			
				case 0: { 
				
					KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
					KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 1;
					KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 0 ];
				}
				case 1: {
				
					KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
					KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 2;
					KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 2 ];
				}
				case 2: {
				
					KladionicaListic[ playerid ][ parID ][ izabraniID ] = IzabraniPar[ playerid ];
					KladionicaListic[ playerid ][ keciksdva ][ izabraniID ] = 3;
					KladionicaListic[ playerid ][ Kvota ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ Kvota ][ 1 ];
				}
			}
			KladionicaListic[ playerid ][ teamID1 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 0 ];
			KladionicaListic[ playerid ][ teamID2 ][ izabraniID ] = Parovi[ IzabraniPar[ playerid ] ][ parID ][ 1 ];
			
			ShowPlayerDialog( playerid, dialog_UPLATITIKET_3, DSMSG, "Nastavak", "Da li zelite da odigrate jos neki par?", "Da", "Ne" );
		}
		else if( !response ) {
		
			for(  new i = 0; i < 10; i++ ) {
				KladionicaListic[ playerid ][ parID ][ i ] = -1;
				KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
				KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
				KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
			KladionicaListic[ playerid ][ Dobitak ] = 0;
			KladionicaListic[ playerid ][ Status ] = false;
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}

	}
	else if( dialogid == dialog_UPLATITIKET_3 ) {

		if( response ) {
		
			new broj = 0;
			for(  new i = 0; i < 10; i++ ) {

				if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {

					broj++;
				}
			}
			if( broj == 10 ) {
			
				ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
			
				GRESKA( playerid, "Vec imate odigranih 10 parova." );
				return true;
			}
		
			new str[ 128 ];

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
			strcat( DialogStrgEx, str );

			for(  new i = 0; i < 10; i++ ) {

				format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

				strcat( DialogStrgEx, str );
			}

			ShowPlayerDialog( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
		
		}
		else if( !response ) {
		
			new broj = 0;
			for(  new i = 0; i < 10; i++ ) {

				if( KladionicaListic[ playerid ][ parID ][ i ] != -1 ) {
				
					broj++;
				}
			}
			if( broj == 0 ) {
			
				new str[ 128 ];

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				strcat( DialogStrgEx, str );

				for(  new i = 0; i < 10; i++ ) {

					format( str, sizeof( str ), "%s vs %s\n", bettingInfo[ Parovi[ i ][ parID ][ 0 ] ][ teamName ], bettingInfo[ Parovi[ i ][ parID ][ 1 ] ][ teamName ] );

					strcat( DialogStrgEx, str );
				}

				ShowPlayerDialog( playerid, dialog_UPLATITIKET, DSL, "Izaberi par:", DialogStrgEx, "Izaberi", "Odustani" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
			
				GRESKA( playerid, "Nemate odigranu ni jednu tekmu." );
				return true;
			}
			
			ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
		}
	}
	else if( dialogid == dialog_UPLATITIKET_4 ) {

		if( response ) {
		
			new novac, Float:kvota[ 10 ];
			if( sscanf( inputtext, "i", novac ) ) return ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Unesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
			if( novac < 20 || novac > 300 ) return ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: samo od 20 do 200 dolara.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );
			if( PlayerInfo[ playerid ][ xNovac ] < novac ) return ShowPlayerDialog( playerid, dialog_UPLATITIKET_4, DSI, "Uplata", "Greska: nemate toliko novca.\nUnesite koliko novaca zelite da uplatite za tiket", "Unesi", "Odustani" );

			new hour, minute, second, day, year, month;
			getdate( year, month, day );
			gettimeEx( hour, minute, second );
			FixHour( hour );
			hour = shifthour;
			
			if( minute > 30 ) return GRESKA( playerid, "Proslo je pola sata za uplate, ekajte sledece kolo." );

			DajIgracuNovac( playerid, -novac );
			BussinesMoney( uFirmi[ playerid ], novac );

			SendInfoMessage( playerid, "Da vidis svoj tiket kucaj /mojlistic." );
			
			KladionicaListic[ playerid ][ Uplata ] = novac;
			KladionicaListic[ playerid ][ Uplaceno ] = true;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			
			if( KladionicaListic[ playerid ][ Kvota ][ 0 ] == 0 ) { kvota[ 0 ] = 1; } else { kvota[ 0 ] = KladionicaListic[ playerid ][ Kvota ][ 0 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 1 ] == 0 ) { kvota[ 1 ] = 1; } else { kvota[ 1 ] = KladionicaListic[ playerid ][ Kvota ][ 1 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 2 ] == 0 ) { kvota[ 2 ] = 1; } else { kvota[ 2 ] = KladionicaListic[ playerid ][ Kvota ][ 2 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 3 ] == 0 ) { kvota[ 3 ] = 1; } else { kvota[ 3 ] = KladionicaListic[ playerid ][ Kvota ][ 3 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 4 ] == 0 ) { kvota[ 4 ] = 1; } else { kvota[ 4 ] = KladionicaListic[ playerid ][ Kvota ][ 4 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 5 ] == 0 ) { kvota[ 5 ] = 1; } else { kvota[ 5 ] = KladionicaListic[ playerid ][ Kvota ][ 5 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 6 ] == 0 ) { kvota[ 6 ] = 1; } else { kvota[ 6 ] = KladionicaListic[ playerid ][ Kvota ][ 6 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 7 ] = 1; } else { kvota[ 7 ] = KladionicaListic[ playerid ][ Kvota ][ 7 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 7 ] == 0 ) { kvota[ 8 ] = 1; } else { kvota[ 8 ] = KladionicaListic[ playerid ][ Kvota ][ 8 ]; }
			if( KladionicaListic[ playerid ][ Kvota ][ 8 ] == 0 ) { kvota[ 9 ] = 1; } else { kvota[ 9 ] = KladionicaListic[ playerid ][ Kvota ][ 9 ]; }
			
			KladionicaListic[ playerid ][ Dobitak ] = novac*
													  kvota[ 0 ]*
													  kvota[ 1 ]*
													  kvota[ 2 ]*
													  kvota[ 3 ]*
													  kvota[ 4 ]*
													  kvota[ 5 ]*
													  kvota[ 6 ]*
													  kvota[ 7 ]*
													  kvota[ 8 ]*
													  kvota[ 9 ];
			SendInfoMessage( playerid, "Uspjesno ste uplatili tiket. Dobitak %.2f.$", KladionicaListic[ playerid ][ Dobitak ] );
			
			

			new staar[ 32 ];
			format( staar, sizeof( staar ), "%d.%d.%d %02d:30", day, month, year, hour );
			strmid( KladionicaListic[ playerid ][ HourPobeda ], staar, 0, strlen( staar ), 32 );
			
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
		else if( !response ) {
		
			for(  new i = 0; i < 10; i++ ) {
				KladionicaListic[ playerid ][ parID ][ i ] = -1;
				KladionicaListic[ playerid ][ keciksdva ][ i ] = -1;
				KladionicaListic[ playerid ][ Kvota ][ i ] = 0.0;
				KladionicaListic[ playerid ][ teamID1 ][ i ] = -1;
				KladionicaListic[ playerid ][ teamID2 ][ i ] = -1;
			}
			KladionicaListic[ playerid ][ Uplaceno ] = false;
			KladionicaListic[ playerid ][ Zavrseno ] = false;
			KladionicaListic[ playerid ][ Uplata ] = 0;
			KladionicaListic[ playerid ][ Dobitak ] = 0;
			KladionicaListic[ playerid ][ Status ] = false;
			SaveKladionica( playerid );
			KladionicaTDControl( playerid, false );
		}
	}
	#endif
	else if( dialogid == dialog_DONATORBOJA ) {
	
		if( response ) {

			PlayerInfo[ playerid ][ xDBoja ] = listitem+1;
			DonatorBoja( playerid );
			SendInfoMessage( playerid, "Vasa boja imena je promenjena." );
			SavePlayer( playerid );
		}
	}
	else if( dialogid == dialog_ZAMENA_1 ) {

		if( response ) {
		
			new ponudjeno = Ponudjeno[ playerid ], trazeno = Trazio[ playerid ], igrac = GlobalProdaja[ playerid ], ID_1 = GlobalID[ playerid ], ID_2 = GlobalID_2[ playerid ];

			if( igrac == IPI ) return GRESKA( playerid, "Taj igrac trenutno nije online." );
			
			if( ponudjeno >= 1 && ponudjeno <= 4 ) {

				strmid( VehicleInfo[ ID_1 ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 24);

				if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = -1; }
				else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = -1; }
				else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = -1; }
				else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_1 ][ vProvera ] ) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = -1; }

				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = ID_1;}
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = ID_1; }

				//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaVozila.log", string1 );

				SavePlayer( playerid ); SavePlayer( igrac );
				SaveVehicle( ID_1 );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaVozila.log", string1 );

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaImovine.log", string1 );


					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

					PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
			}
			else if( ponudjeno >= 5 && ponudjeno <= 7 ) {
			
				if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = -1; }
				else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = -1; }
				else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == ID_1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = -1; }

				if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = ID_1; }
				else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = ID_1; }

				//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaImovine.log", string1 );

				strmid( II[ ID_1 ][ iOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				SaveProperty( ID_1 ); PropertyRefresh( ID_1 );
				SavePlayer( playerid ); SavePlayer( igrac );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaVozila.log", string1 );

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaImovine.log", string1 );


					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

					PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
			
			}
			else if( ponudjeno == 8 ) {
			
				PlayerInfo[ igrac ][ xFirmaID ] = -1;
				PlayerInfo[ playerid ][ xFirmaID ] = ID_1;
				strmid( BussinesInfo[ ID_1 ][ bOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 255);
				SaveBussines( ID_1 ); Bussines_Refresh( ID_1 );
				SavePlayer( playerid ); SavePlayer( igrac );
				
				if( trazeno >= 1 && trazeno <= 4 ) {

					strmid( VehicleInfo[ ID_2 ][ vOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 24);

					if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = -1; }
					else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == VehicleInfo[ ID_2 ][ vProvera ] ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = -1; }

					if( PlayerInfo[ igrac ][ xVoziloID ][ 0 ] == -1){ PlayerInfo[ igrac ][ xVoziloID ][ 0 ] = ID_2;}
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 1 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 2 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 2 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xVoziloID ][ 3 ] == -1) { PlayerInfo[ igrac ][ xVoziloID ][ 3 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao vozilo %s igracu %s za %d", ImeIgraca( seller ), GetVehicleNameEx( VehicleInfo[ autoid ][ vModel ] ), ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaVozila.log", string1 );

					SavePlayer( playerid ); SavePlayer( igrac );
					SaveVehicle( ID_2 );
				}
				else if( trazeno >= 5 && trazeno <= 7 ) {

					if( PlayerInfo[ playerid ][ xProperty ][ 0 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 0 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 1 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 1 ] = -1; }
					else if( PlayerInfo[ playerid ][ xProperty ][ 2 ] == ID_2 ) { PlayerInfo[ playerid ][ xProperty ][ 2 ] = -1; }

					if( PlayerInfo[ igrac ][ xProperty ][ 0 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 0 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 1 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 1 ] = ID_2; }
					else if( PlayerInfo[ igrac ][ xProperty ][ 2 ] == -1 ) { PlayerInfo[ igrac ][ xProperty ][ 2 ] = ID_2; }

					//new string1[ 128 ]; new s, m, se, year, month, day; getdate( year, month, day );  format( string1, sizeof( string1 ), "Igrac %s je prodao imovinu ID %d igracu %s za %d", ImeIgraca( GlobalProdaja[ playerid ] ), id, ImeIgraca( playerid ), GlobalCena[ playerid ] );  LogSave( "Ostalo/LogProdajaImovine.log", string1 );


					strmid( II[ ID_2 ][ iOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveProperty( ID_2 ); PropertyRefresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}
				else if( trazeno == 8 ) {

					PlayerInfo[ playerid ][ xFirmaID ] = -1;
					PlayerInfo[ igrac ][ xFirmaID ] = ID_2;
					strmid( BussinesInfo[ ID_2 ][ bOwner ], ImeIgraca( igrac ), 0, strlen( ImeIgraca( igrac ) ), 255);
					SaveBussines( ID_2 ); Bussines_Refresh( ID_2 );
					SavePlayer( playerid ); SavePlayer( igrac );

				}

			}
			
			Ponudjeno[ playerid ] = -1;
			Trazio[ playerid ] = -1;
			GlobalProdaja[ playerid ] = -1;
			GlobalID[ playerid ] = -1;
			GlobalID_2[ playerid ] = -1;

		}
		else if( !response ) {
		}
	}
	else if( dialogid == dialog_RULET_1 && response) {
	
		switch( listitem ) {
		
			case 0: {
			
				ShowPlayerDialog( playerid, dialog_RULET_2, DSL, "Rulet", "Crvena\nCrna", "Dalje", "Odustani");
			}
			case 1: {
			
				ShowPlayerDialog( playerid, dialog_RULET_3, DSI ,"Rulet", "Unesite broj koji zelite odigrati:\n\n","Dalje","Odustani");
			}
			case 2: {
			
				ShowPlayerDialog( playerid, dialog_RULET_4, DSL, "Rulet", "Parno\nNeparno", "Dalje", "Odustani");
			}
			case 3: {
			
				ShowPlayerDialog( playerid, dialog_RULET_5, DSL, "Rulet", "Zero\nMala\nOrfa", "Dalje", "Odustani");
			}
		}
	}
	else if( dialogid == dialog_RULET_5 && response ) {
	
		switch( listitem ) {
		
			case 0: {
			
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*19/10;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}ZERO");
				if(IsBrojKombinacija(1, aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj je dio zero kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else
				{
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj nije dio zero kombinacije!");
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				}
				RuletAccount[ playerid ] = 0;
			}
			case 1: {
			
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*24/10;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}MALA");
				if(IsBrojKombinacija(1, aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj je dio mala kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else
				{
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj nije dio mala kombinacije!");
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				}
				RuletAccount[ playerid ] = 0;
			}
			case 2: {
			
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*28/10;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vasa kombinacija je: {FFFFFF}ORFA");
				if(IsBrojKombinacija(1, aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj je dio orfa kombinacije!");
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else
				{
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobiveni broj nije dio orfa kombinacije!");
					SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				}
				RuletAccount[ playerid ] = 0;
			}
		}
	}
	else if(dialogid == dialog_RULET_2 && response)
	{
		switch (listitem)
		{
			case 0:
			{
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*2;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vasa boja je: {FFFFFF}CRVENA");
				if(!ParnostBroja(aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				RuletAccount[ playerid ] = 0;
			}
			case 1:
			{
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*2;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "CRNO";
				else aizaslitekst = "CRVENO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vasa boja je: {FFFFFF}CRNA");
				if(ParnostBroja(aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				RuletAccount[ playerid ] = 0;
			}
		}
	}
	else if( dialogid == dialog_RULET_4 && response ) {
	
		switch( listitem ) {
		
			case 0: {
			
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*2;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "PARNO";
				else aizaslitekst = "NEPARNO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vas tip je: {FFFFFF}PARNO");
				if(ParnostBroja(aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				RuletAccount[ playerid ] = 0;
			}
			case 1: {
			
				new aizbacenbroj, adobitakbrt;
				aizbacenbroj = random(36);
				adobitakbrt = RuletAccount[ playerid ]*2;
				new aizaslitekst[16];
				if(ParnostBroja(aizbacenbroj)) aizaslitekst = "PARNO";
				else aizaslitekst = "NEPARNO";
				SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", aizbacenbroj, aizaslitekst);
				SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vas tip je: {FFFFFF}NEPARNO");
				if(!ParnostBroja(aizbacenbroj))
				{
					DajIgracuNovac(playerid, adobitakbrt);
					SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", adobitakbrt);
				}
				else SendClientMessagee(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
				RuletAccount[ playerid ] = 0;
			}
		}
	}
	else if( dialogid == dialog_RULET_3 && response ) {
	
		new unesenibroj, izbacenbroj, dobitakbrt, dobitaknula;
		unesenibroj = strval(inputtext);
		if(unesenibroj < 0 || unesenibroj > 36) return GRESKA(playerid, "Odaberite broj od 0 do 36!");
		izbacenbroj = random(36);
		dobitakbrt = RuletAccount[ playerid ]*36;
		dobitaknula = dobitakbrt;
		new izaslitekst[16];
		if(ParnostBroja(izbacenbroj)) izaslitekst = "CRNO";
		else izaslitekst = "CRVENO";
		SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Izasao je: {FFFFFF}%d {00C0FF}| {FFFFFF}%s", izbacenbroj, izaslitekst);
		SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Vas broj je: {FFFFFF}%d", unesenibroj);
		if( unesenibroj == izbacenbroj ) {
		
			DajIgracuNovac(playerid, dobitaknula);
			SendClientMessageEx(playerid, NARANDZASTA, ""col_balkanstory"[RULET]{00C0FF}Dobili ste: {FFFFFF}%d$", dobitaknula);
		}
		else SendClientMessagee( playerid, NARANDZASTA, ""col_balkanstory"[RULET]{FFAF00}Izgubili ste!");
		RuletAccount[ playerid ] = 0;
	}
	else if( dialogid == dialog_SAVEZ ) {
	
		if( response ) {
		
			new id = GlobalProdaja[ playerid ];
			
			OI[ PlayerInfo[ playerid ][ xClan ] ][ oSavez ] = PlayerInfo[ id ][ xClan ];
			OI[ PlayerInfo[ id ][ xClan ] ][ oSavez ] = PlayerInfo[ playerid ][ xClan ];
			
			SaveOrganization( PlayerInfo[ playerid ][ xClan ] );
			SaveOrganization( PlayerInfo[ id ][ xClan ] );
			
			SendInfoMessage( playerid, "Cestitamo, sada ste u savezu sa %s.", OI[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Cestitamo, sada ste u savezu sa %s.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );

			SendInfoMessage( playerid, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'." );
			SendInfoMessage( id, "Mozete koristiti zajednicki chat izmedju lidera saveza i podlidera '/sa'." );
			
			GlobalProdaja[ playerid ] = -1;
		}
		else if( !response ) {
		
			new id = GlobalProdaja[ playerid ];
			
			SendInfoMessage( playerid, "Odbili ste savez sa %s.", OI[ PlayerInfo[ id ][ xClan ] ][ oName ] );
			SendInfoMessage( id, "Lider %s je odbio savez sa vama.", OI[ PlayerInfo[ playerid ][ xClan ] ][ oName ] );
			
			GlobalProdaja[ playerid ] = -1;
		}
	}
	else if( dialogid == dialog_VEHGOLDBUY ) {
	
		if( response ) {
	
			new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
				if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
				if( PlayerInfo[ playerid ][ xZlato ] < VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 2 ] ) return GRESKA( playerid, "Nemas dovoljno zlata kod sebe." );

				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
					if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
					else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
				}
				else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );

				if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return GRESKA( playerid, "Morate biti level 3+ da bi ste kupili vozilo." );

				if( AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ] == 0 ) return GRESKA( playerid, "Nemamo vise ovih modela u prodaji." );

				for( new i = 1; i < MAX_CARS; i++ ) {
					new fileauta[ 40 ];
					format(fileauta, sizeof( fileauta ), V_FILE, i);
					if( !fexist( fileauta ) ) {
						VehicleInfo[ i ][ vOwned ] = 1;
						VehicleInfo[ i ][ vNeaktivnost ] = 0;
						VehicleInfo[ i ][ vPrice ] = VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ];
						strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
						VehicleInfo[ i ][ vLocked ] = 0;
						VehicleInfo[ i ][ vLokacijaX ] = AutoSalon[ as ][ aVehBuyedPos ][ 0 ];
						VehicleInfo[ i ][ vLokacijaY ] = AutoSalon[ as ][ aVehBuyedPos ][ 1 ];
						VehicleInfo[ i ][ vLokacijaZ ] = AutoSalon[ as ][ aVehBuyedPos ][ 2 ];
						VehicleInfo[ i ][ vLokacijaA ] = AutoSalon[ as ][ aVehBuyedPos ][ 3 ];
						VehicleInfo[ i ][ vVirtualWorld ] = 0;
						VehicleInfo[ i ][ vInterior ] = 0;
						VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
						VehicleInfo[ i ][ vJob ] = -1;
						VehicleInfo[ i ][ vOrganization ] = -1;
						VehicleInfo[ i ][ vFuelProperty ] = -1;
						
						VehicleInfo[ i ][ vColor1 ] = AutoSalonBojaVozila[ playerid ];
						VehicleInfo[ i ][ vColor2 ] = AutoSalonBojaVozila[ playerid ];
						
						VehicleInfo[ i ][ vModel ] = AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ];
						VehicleInfo[ i ][ vReg ] = 0;
						VehicleInfo[ i ][ vRegVreme ] = 0;
						VehicleInfo[ i ][ vTeh ] = 0;
						VehicleInfo[ i ][ vGPS ] = 0;
						VehicleInfo[ i ][ vOsiguranje ] = 5;
						VehicleInfo[ i ][ vLock ] = 0;
						VehicleInfo[ i ][ vAlarm ] = 0;
						VehicleInfo[ i ][ vTuned ] = 0;
						VehicleInfo[ i ][ vNeon ] = 0;
						VehicleInfo[ i ][ vImobilizator ] = 0;
						VehicleInfo[ i ][ vSpoiler ] = 0;
						VehicleInfo[ i ][ vHood ] = 0;
						VehicleInfo[ i ][ vRoof ] = 0;
						VehicleInfo[ i ][ vSkirt ] = 0;
						VehicleInfo[ i ][ vLamps ] = 0;
						VehicleInfo[ i ][ vNitro ] = 0;
						VehicleInfo[ i ][ vExhaust ] = 0;
						VehicleInfo[ i ][ vWheels ] = 0;
						VehicleInfo[ i ][ vStereo ] = 0;
						VehicleInfo[ i ][ vHydraulics ] = 0;
						VehicleInfo[ i ][ vFrontBumper ] = 0;
						VehicleInfo[ i ][ vRearBumper ] = 0;
						VehicleInfo[ i ][ vVents ] = 0;
						VehicleInfo[ i ][ vPaintJob ] = 255;
						VehicleInfo[ i ][ vProvera ] = i;
						VehicleInfo[ i ][ vMaterijali ] = 0;
						#if nerp_droga == 1
						VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
						VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
						#endif
						VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
						VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
						VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;

						VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
						LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
						SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
						VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
						SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
						SaveVehicle( i );
						carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
						SetTimer("AntiSpawnCrash", 3000, 0);

						if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
						else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
						else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
						else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;


						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
							SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						}

						PlayerInfo[ playerid ][ xZlato ] -= VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 2 ];
						UpdateZlatoTD( playerid );

						if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = i; }
						SavePlayer( playerid );

						new string[ 128 ];
						format( string, sizeof( string ), "Igrac %s je kupio vozilo %s u salonu ID %d", ImeIgraca( playerid ), ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ], as );
						LogSave( "Ostalo/LogKupiVozilo.log", string );

						AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ]--;
						AutoSalon[ as ][ AlreadyBuying ] = false;
						SaveSalon( as );

						PlayerBuyingAS[ playerid ] = -1;
						AutoSalonBojaVozila[ playerid ] = -1;
						ModelCar[ playerid ] = 0;

						Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
						VehicleInfo[ slotid ][ vID ] = Dimi_CreateVehicle( i, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], VehicleInfo[ slotid ][ vFuelProperty ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
						SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
						LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

						BuyCarTDControl( playerid, false );
						BojaVozilaTDControl( playerid, false );
						TogPlayerHud( playerid );
						TogglePlayerControllable( playerid, true );

						SetCameraBehindPlayer( playerid );
						CancelSelectTextDraw( playerid );
						SendInfoMessage( playerid, "Uspjesno ste kupili vozilo, oznaceno vam je na radaru markerom." );

						Dimi_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
						CheckpointStatus[ playerid ] = 15;
						break;
					}
				}
			}
		}
		else if( !response ) {
		
			new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
				AutoSalon[ as ][ AlreadyBuying ] = false;

				PlayerBuyingAS[ playerid ] = -1;
				AutoSalonBojaVozila[ playerid ] = -1;
				ModelCar[ playerid ] = 0;

				Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				VehicleInfo[ slotid ][ vID ] = Dimi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], VehicleInfo[ slotid ][ vFuelProperty ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
				SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
				LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

				BuyCarTDControl( playerid, false );
				BojaVozilaTDControl( playerid, false );
				TogPlayerHud( playerid );
				TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
				CancelSelectTextDraw( playerid );
			}
		
		}
	}
	else if( dialogid == dialog_IZABERITABLICE )
	{

		if( response )
		{
			if( listitem == 0 )
			{
				new izbor = PonudioIgrac[ playerid ];
				VehicleInfo[ izbor ][ vTeh ] = 3; SaveVehicle( izbor );
				SendInfoMessage( playerid, "Sada mozete postaviti tablice na vozilo /postavitablice" );
				SendInfoMessage( playerid, "Kada postavite tablice, auto se respawna." );
			}
			if( listitem == 1 )
			{
				ShowPlayerDialog( playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani" );
			}
		}
	}
	else if( dialogid == dialog_IZABERITABLICE_2 )
	{
		if( response )
		{
			new izbor = PonudioIgrac[ playerid ];
			new plate[ 14 ];
			if( sscanf( inputtext, "s[14]", plate ) ) return ShowPlayerDialog( playerid, dialog_IZABERITABLICE_2, DSI, D_NASLOV, "Unesite zeljeni tekst, koji ce se nalaziti na vasim tablicama.\nMaksimum je 16 karaktera.", "Izaberi", "Odustani" );
			VehicleInfo[ izbor ][ vTeh ] = 4; SaveVehicle( izbor );
			strmid( VehicleInfo[ izbor ][ vTablice ], plate, 0, strlen( plate ), 32 );
			SaveVehicle( izbor );
			SendInfoMessage( playerid, "Preuzeli ste specijalne tablice '%s' postavljate ih na /postavitablice", plate );
		}
	}
	else if( dialogid == dialog_DONATE ) {

		if( response ) {
		
			if( listitem == 0 ) {
			
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

				strcat( DialogStrgEx, ""col_white"Ingame Statistika:\n\n" );
				strcat( DialogStrgEx, ""col_balkanstory"1) "col_white"Level UP - "col_balkanstory"180din/1.5Eura\n2) "col_white"1 milion - "col_balkanstory"300din/2.5Eura\n3) "col_white"5 miliona - "col_balkanstory"1200din/10E\n" );
				strcat( DialogStrgEx, ""col_balkanstory"4) "col_white"10miliona - "col_balkanstory"2400din/20Eura\n5) "col_white"Obicna promena imena - "col_balkanstory"600din/5Eura\n6) "col_white"Specijalno ime - "col_balkanstory"3000din/25Eura\n" );
				strcat( DialogStrgEx, ""col_balkanstory"7) "col_white"Privatna organizacija koja traje mesec dana - "col_balkanstory"1200din/10Eura\n\n"col_white"Mapanje:\n\n" );
				strcat( DialogStrgEx, ""col_balkanstory"1) "col_white"Mapanje kuce "col_balkanstory"25din/0.21Eura"col_white" po objektu\n" );
				strcat( DialogStrgEx, ""col_balkanstory"2) "col_white"Pokretna kapija "col_balkanstory"600din/5Eura\n3) "col_white"Donatorska kuca - "col_balkanstory"1200din/10Eura\n4) "col_white"Donatorska vila - "col_balkanstory"2400din/20Eura" );

				ShowPlayerDialog( playerid, dialog_DONATE_1, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "Dalje" );

				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
			}
			if( listitem == 1 )
			{
			
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
				
				strcat( DialogStrgEx, ""col_white"Sve vezano za donacije obracate se "col_balkanstory"Maksi\n\n" );
				strcat( DialogStrgEx, ""col_white"FB kontakt: "col_balkanstory"PG Skopsi\n" );
				strcat( DialogStrgEx, ""col_white"Email kontakt: "col_balkanstory"balkanstory123@gmail.com\n" );
				strcat( DialogStrgEx, ""col_white"Discord account: "col_balkanstory"Skopsi");

				ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "Dalje" );
				strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ));
				
			}
		}
	}
	else if( dialogid == dialog_DONATE_1 ) {

		if( !response ) {

			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );

			strcat( DialogStrgEx, ""col_white"VIP leveli:\n\n" );
			strcat( DialogStrgEx, ""col_balkanstory"1) "col_white"VIP Level 1 - "col_balkanstory"200din/2Eura\n2) "col_white"VIP Level 2 - "col_balkanstory"350din/3Eura\n3) "col_white"VIP Level 3 - "col_balkanstory"450/3.75Eura\n" );
			strcat( DialogStrgEx, ""col_balkanstory"4) "col_white"VIP Level 4 - "col_balkanstory"500din/5Eura\n5) "col_white"VIP Level 5 - "col_balkanstory"1000din/8.5Eura\n\n"col_white"Automobili:\n\n" );
			strcat( DialogStrgEx, ""col_balkanstory"1) "col_white"NRG - "col_balkanstory"3000din/25Eura\n" );
			strcat( DialogStrgEx, ""col_balkanstory"2) "col_white"Sultan - "col_balkanstory"2400din/20Eura\n3) "col_white"Huntley - "col_balkanstory"2400din/20Eura\n4) "col_white"Bullet - "col_balkanstory"1800din/15Eura\n" );
			strcat( DialogStrgEx, "5) "col_white"Infernus - "col_balkanstory"1800din/15Eura\n6) "col_white"Turismo - "col_balkanstory"1800din/15Eura\n\n"col_white"Ostalo:\n\n" );
			strcat( DialogStrgEx, ""col_balkanstory"1) "col_white"Cetvrti slot vozila - "col_balkanstory"600din/5Eura\n2) "col_white"Donatorske boje - "col_balkanstory"600din/5Eura" );

			ShowPlayerDialog( playerid, dialog_DONATE_1, DSMSG, D_NASLOV, DialogStrgEx, "Ok", "" );
			strdel( DialogStrgEx, 0, sizeof( DialogStrgEx ) );
		
		}
	}
	else if( dialogid == dialog_PUMPA ) {
	
		if( response ) {
		
			switch( listitem ) {
			
				case 0: {

					ShowPlayerDialog( playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");
				}
				case 1: {

					ShowPlayerDialog( playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				}
				case 2: {

					ShowPlayerDialog( playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				}
				case 3: {

					ShowPlayerDialog( playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Kerozin",""col_white"Unesite novu cijenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI );
				}
				case 4: {
				
					new fsID = IsThatFuelStationMy( playerid );
					if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );

					SendClientMessageEx( playerid, -1, ""col_white"U odlagalistu ima jos "col_balkanstory"%d "col_white"litara dizela!", FuelStation[ fsID ][ fsDieselL ] );
					SendClientMessageEx( playerid, -1, ""col_white"U odlagalistu ima jos "col_balkanstory"%d "col_white"litara benzina!", FuelStation[ fsID ][ fsGasolineL ] );
					SendClientMessageEx( playerid, -1, ""col_white"U odlagalistu ima jos "col_balkanstory"%d "col_white"litara gasnog ulja!", FuelStation[ fsID ][ fsGasOilL ] );
						
				}
				case 5: {

					SendInfoMessage( playerid, "Lokacija naftne rafinerije je oznacena na mapi!");
					CheckpointStatus[ playerid ] = 15;
					Dimi_SetPlayerCheckpoint( playerid, 269.1654,1465.2311,10.5859, 5.0 );
				}
				case 6: {

					ShowPlayerDialog( playerid, 0, DSMSG, D_NASLOV, ""col_white"Pumpa | "col_white"/pumpa /natocicisternu /ispraznicisternu", "U redu", "" );
				}
				case 7: {

					new fsID = IsThatFuelStationMy( playerid );
					if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );

					SetVehicleToRespawn( VehicleInfo[ FuelStation[ fsID ][ fsTruckID ] ][ vID ] );
					SetVehicleToRespawn( VehicleInfo[ FuelStation[ fsID ][ fsCisternID ] ][ vID ] );
					SendInfoMessage( playerid, "Respawnovali ste kamion i cisternu vase pumpe!");
				}
			}
		
		}
	
	}
	else if( dialogid == dialog_IMEPUMPE ) {
	
		if( response ) {
		
			new fsID = IsThatFuelStationMy( playerid );
			if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );
		
			new ime[ 64 ];
			if( sscanf( inputtext, "s[64]", ime ) ) return ShowPlayerDialog( playerid, dialog_IMEPUMPE, DSI, ""col_white"Ime Pumpe", ""col_white"Upisite novo ime pumpe\nZabranjeno je stavljati OOC ime pumpe!", "Unos", "Izlaz");
			
			strmid( FuelStation[ fsID ][ fsName ], ime, 0, strlen( ime ), 64 );
			FStation_Save( fsID );
			FStation_Refresh( fsID );
			SendInfoMessage( playerid, "Promenili ste ime pumpe u %s!", ime );
		}
	}
	else if( dialogid == dialog_DIZELCENA ) {

		if( response ) {
		
			if( !IsNumeric( inputtext ) ) {
			
				GRESKA( playerid, "Mozete koristiti samo brojeve!" );
				ShowPlayerDialog( playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new cena = strval(inputtext);
			if( cena < 1 || cena > 60 ) {
			
				GRESKA( playerid, "Cena nemoze biti manja od 1$ i veca od 60$!");
				ShowPlayerDialog( playerid, dialog_DIZELCENA, DSI,""col_white"Cena goriva - Dizel",""col_white"Unesite novu cijenu goriva po litri DIZELA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			
			new fsID = IsThatFuelStationMy( playerid );
			if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );
					
			FuelStation[ fsID ][ fsDieselPrice ] = cena;
			FStation_Save( fsID );
			FStation_Refresh( fsID );
				
			SendInfoMessage( playerid, "Nova cena goriva po litri dizela je "col_balkanstory"%d$.", cena );
			
			format( globalstring, sizeof( globalstring ), "|| CNN News || "col_white"Nova cena dizela po litru je %d$! Ime pumpe: %s.", cena, FuelStation[ fsID ][ fsName ] );
			OOCNews( 0xFFA500AA, globalstring );

		}
	}
	else if( dialogid == dialog_BENZINCENA ) {

		if( response ) {

			if( !IsNumeric( inputtext ) ) {

				GRESKA( playerid, "Mozete koristiti samo brojeve!" );
				ShowPlayerDialog( playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new cena = strval(inputtext);
			if( cena < 1 || cena > 60 ) {

				GRESKA( playerid, "Cena nemoze biti manja od 1$ i veca od 60$!");
				ShowPlayerDialog( playerid, dialog_BENZINCENA, DSI, ""col_white"Cena goriva - Benzin",""col_white"Unesite novu cijenu goriva po litri BENZINA", D_ODABERI, D_ODUSTANI );
				return 1;
			}

			new fsID = IsThatFuelStationMy( playerid );
			if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );

			FuelStation[ fsID ][ fsGasolinePrice ] = cena;
			FStation_Save( fsID );
			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Nova cena goriva po litri benzina je "col_balkanstory"%d$.", cena );

			format( globalstring, sizeof( globalstring ), "|| CNN News || "col_white"Nova cena benzina po litru je %d$! Ime pumpe: %s.", cena, FuelStation[ fsID ][ fsName ] );
			OOCNews( 0xFFA500AA, globalstring );

		}
	}
	else if( dialogid == dialog_GASNOCENA ) {

		if( response ) {

			if( !IsNumeric( inputtext ) ) {

				GRESKA( playerid, "Mozete koristiti samo brojeve!" );
				ShowPlayerDialog( playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Kerozin",""col_white"Unesite novu cijenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI );
				return 1;
			}
			new cena = strval(inputtext);
			if( cena < 1 || cena > 60 ) {

				GRESKA( playerid, "Cena nemoze biti manja od 1$ i veca od 60$!");
				ShowPlayerDialog( playerid, dialog_GASNOCENA, DSI, ""col_white"Cena goriva - Kerozin",""col_white"Unesite novu cijenu goriva po litri GASNOG ULJA", D_ODABERI, D_ODUSTANI );
				return 1;
			}

			new fsID = IsThatFuelStationMy( playerid );
			if( fsID == -1 ) return GRESKA( playerid, "Nemate u vlasnistvu nijednu pumpu." );

			FuelStation[ fsID ][ fsGasOilPrice ] = cena;
			FStation_Save( fsID );
			FStation_Refresh( fsID );

			SendInfoMessage( playerid, "Nova cena goriva po litri gasnog ulja je "col_balkanstory"%d$.", cena );

			format( globalstring, sizeof( globalstring ), "|| CNN News || "col_white"Nova cena gasnog ulja po litru je %d$! Ime pumpe: %s.", cena, FuelStation[ fsID ][ fsName ] );
			OOCNews( 0xFFA500AA, globalstring );

		}
	}
	
	else if( dialogid == dialog_ZAPOSLJAVANJE)
	{
	
		if(!response ) return SendInfoMessage(playerid,"Odustali ste od zaposljavanja!");
		if(response)
		{

			if( PlayerInfo[ playerid ][ xPosao ] != 0 )
			{
				GRESKA( playerid, "Vi ste vec zaposleni negdje, onda - prvo morate dati otkaz!");
				return true;
			}

			if( GetPlayerState( playerid ) != 1 )
			{
				GRESKA( playerid, "Ne mozes iz vozila!");
				return true;
			}

			if( ChosenJob[ playerid ] == POSAO_MEHANICAR )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Mehanicar",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Mehanicar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /mechanic /tow", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_MASINOVODJA )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Masinovodja",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Masinovodja!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_PREVOZNIK )
			{
				if( PlayerInfo[ playerid ][ xKamionskaC1 ] == 0 ) return GRESKA( playerid, "Ne posedujes dozvolu za kombije. ");
				if( PlayerInfo[ playerid ][ xKamionskaC2 ] == 0 ) return GRESKA( playerid, "Ne posedujes dozvolu za kamione. ");
				if( PlayerInfo[ playerid ][ xKamionskaC3 ] == 0 ) return GRESKA( playerid, "Ne posedujes dozvolu za kamione sa prikolicom. ");
				if( PlayerInfo[ playerid ][ xVozacka ] == 0 ) return GRESKA( playerid, "Ne posedujes vozacku dozvolu. ");
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Prevoznik",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Prevoznik!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /prevozdrveca /prevozsljunka /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_KOSAC )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Kosac trave",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Kosac trave!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_KOMUNALAC )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Komunalac",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Komunalac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_GRADJEVINAR )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Gradjevinar",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Gradjevinar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/prekiniposao /uniforma", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_PIZZA )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Dostavljac pica",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Dostavljac pica!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /pizza", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_PILOT )
			{
				if( PlayerInfo[ playerid ][ xLetelica ] == 0 ) return GRESKA( playerid, "Ne posedujes dozvolu za avion/helic." );
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Pilot",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Pilot!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_TAXI )
			{
				if( PlayerInfo[ playerid ][ xTaxLic ] == 0 ) return GRESKA( playerid, "Ne posedujes taxi licencu!" );
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Taxi vozac",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Taxi vozac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white"/taxi", "U redu", "");
			}
			
			else if( ChosenJob[ playerid ] == POSAO_FARMER )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Farmer",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Farmer!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /uzmisemenke /uzmikantu /muzikrave /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_BUSVOZAC )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Bus vozac",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Bus vozac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_RUDAR )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Rudar",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Rudar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_PREVOZNOVCA )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Prevoznik Novca",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Prevoznik Novca!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /prekiniposao", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_RIBAR )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Ribar",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Ribar!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /pecaj /uniforma /zavrsipecanje", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_PNAMESTAJA )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Proizvodjac Namestaja",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Proizvodjac Namestaja!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /posao /uniforma /ostavidrvo /uzmidrvo", "U redu", "");
			}
			else if( ChosenJob[ playerid ] == POSAO_TEMPODOSTAVA )
			{
				ShowPlayerDialog( playerid, 0, DSMSG, "Tempo Dostavljac",
					""col_job"Cestitamo! Uspjesno ste se zaposlili kao Tempo Dostavljac!\n\n" \
					""col_job"Potrebno je da odradite barem 3 sati ugovora kako bi ste dali otkaz!\n" \
					""col_job"Komande posla: "col_white" /uzmiktuiju /uniforma", "U redu", "");
			}

			PlayerInfo[ playerid ][ xPosao ] = ChosenJob[ playerid ];
			PlayerInfo[ playerid ][ xUgovor ] = 0;
			SavePlayer( playerid );


		}
	
	}
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_DELIVERPEPSI )
	{

		if( !response ) return Dimi_RemovePlayerFromVehicle( playerid );
		if( response )
		{
		
			DeliverLevel[ playerid ] = 1;
			DeliverCar[ playerid ] = GetPlayerVehicleID( playerid );
			KamionUsed[ GetPlayerVehicleID( playerid ) ] = playerid;
			SendJobMessage( playerid, "Pokrenuli ste dostvau robe u Tempo Market!");
			SendJobMessage( playerid, "Robu preuzimate iz fabrike koja vam je oznacena na mapi!");
			Dimi_SetPlayerCheckpoint( playerid, -494.7044,-501.1635,26.0205, 5.0 );
			TempoDostavaFabrikaCP[ playerid ] = 1;
			CheckpointStatus[ playerid ] = 5;
			StaroVreme[ playerid ] = gettime();
			NovoVreme[ playerid ] = 120;
		
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_KOMUNALACPOSAO )
	{
		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOMUNALAC )
			{
				AccountVerified[ playerid ] = false;
				garbagemanInfo[ playerid ][ gmiJob ] = true;

				garbagemanInfo[ playerid ][ gmiDuty ] = true;
				garbagemanInfo[ playerid ][ gmiReadyToDump ] = false;

				garbagemanVehicles[ GetPlayerVehicleID( playerid ) ][ gPlayerID ] = playerid;
				garbagemanInfo[ playerid ][ gmiVehicleID ] = GetPlayerVehicleID( playerid );

				AktivanKontejner[ playerid ] = 1;
				Dimi_SetPlayerCheckpoint( playerid, KontInfo[ AktivanKontejner[ playerid ] ][ koObjPos ][ 0 ], KontInfo[ AktivanKontejner[ playerid ] ][ koObjPos ][ 1 ], KontInfo[ AktivanKontejner[ playerid ] ][ koObjPos ][ 2 ], 5.0 );
				CheckpointStatus[ playerid ] = 22;

				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Komunalac",
					""col_white"Na mapi su vam oznaceni kontejneri koje treba ocistiti. Vasa duznost je pocistiti ih sve.\n\n" \
					"Kada ste u blizini kontejnera smece uzimate na "col_job"LMB "col_white"te ga ubacujete u kamion\n" \
					"Da ubacite smece u kamion takodje koristite"col_job"LMB ", "U redu", "");
			}
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_KOMUNALACPOSAO2 )
	{
		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOMUNALAC )
			{

				AccountVerified[ playerid ] = false;
				CistacPosao[ playerid ] = true;
				cistacvozilo[ playerid ] = GetPlayerVehicleID( playerid );
				cistackilometri[ playerid ] = 0;
				cistacmetri[ playerid ] = 0;
				cistacnovac[ playerid ] = 0;
				CistacWarning[ playerid ] = 0;
				CistacTimer[ playerid ] = SetTimerEx( "CistacKilometri", 1000, true, "d", playerid );
				CKilometriTDControl( playerid, true );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Predjeno: 0km" );
				//PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Zarada: 0$" );
				
				cistacvodica[0][playerid] = CreateDynamicObject(18669,0,0,-1000,0,0,0);
				AttachDynamicObjectToVehicle(cistacvodica[0][playerid], GetPlayerVehicleID(playerid), 1.500000,1.875000,0.824999,40.500007,197.099884,67.500007);
				cistacvodica[1][playerid] = CreateDynamicObject(18669,0,0,-1000,0,0,0);
				AttachDynamicObjectToVehicle(cistacvodica[1][playerid], GetPlayerVehicleID(playerid), 0.525000,1.800000,0.824999,40.500007,197.099884,67.500007);
				
				ShowPlayerDialog( playerid, 0, DSMSG, "Ciscenje ulica",
					""col_white"Uspjesno ste zapoceli posao kao Cistac Ulica\n" \
					"Vas zadatak je da sa cistilicom(sweeper) vozite ulicama te ih tako cistite\nZarada zavisi od toga koliko ste kilometara ocistili/presil.", "U redu", "");
			}
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_KOMUNALACPOSAO3 )
	{
		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOMUNALAC )
			{

				AccountVerified[ playerid ] = false;
				CistacPosao[ playerid ] = true;
				cistacvozilo[ playerid ] = GetPlayerVehicleID( playerid );
				cistackilometri[ playerid ] = 0;
				cistacmetri[ playerid ] = 0;
				cistacnovac[ playerid ] = 0;
				CistacWarning[ playerid ] = 0;
				CistacTimer[ playerid ] = SetTimerEx( "CistacKilometri", 1000, true, "d", playerid );
				CKilometriTDControl( playerid, true );
				PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 1 ], "Predjeno: 0km" );
				//PlayerTextDrawSetString( playerid, CKilometri[ playerid ][ 2 ], "Zarada: 0$" );
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Komunalac",
					""col_white"Zapoceli ste posao kao cistac snega.\n" \
					"Zaradjujete tako sto prelazite kilometre cistacom snega, vise kilometra vise novca.", "U redu", "");
				SendJobMessage( playerid, "Ne smes preci 120km/h." );


			}
		}
	}
	
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_GRADJEVINARPOSAO )
	{
		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			if( !IsPlayerInDynamicArea( playerid, GradjPosao ) ) return GRESKA( playerid, "Moras biti u blizini gradilista da bi zapocao posao!" ),Dimi_RemovePlayerFromVehicle( playerid );
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_GRADJEVINAR )
			{
				if( GetVehicleModel( GetPlayerVehicleID(playerid) ) == 524 && VehCement[ GetPlayerVehicleID( playerid ) ] == false )//mjesalica za beton
				{
					AccountVerified[ playerid ] = false;
					Dimi_SetPlayerCheckpoint( playerid, 585.75409, 844.79541, -43.31150, 5.0);
					CheckpointStatus[ playerid ] = 10;
					SendJobMessage( playerid, "Zapoceli ste prevoz betona odite prvo do "col_job"Rudnika"col_white" da utovarite beton." );
					StaroVreme[ playerid ] = gettime();
					NovoVreme[ playerid ] = 100;

				}
			}
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_GRADJEVINARPOSAO2 )
	{
		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{
			if( !IsPlayerInDynamicArea( playerid, GradjPosao ) ) return GRESKA( playerid, "Moras biti u blizini gradilista da bi zapocao posao!" ),Dimi_RemovePlayerFromVehicle( playerid );
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_GRADJEVINAR )
			{
				if( GetVehicleModel( GetPlayerVehicleID(playerid) ) == 486 )//bager
				{
				
					pijesakhrpa[playerid][0] = CreateDynamicObject(16305, 1923.58606, -1399.60083, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][1] = CreateDynamicObject(16305, 1896.82520, -1405.72656, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][2] = CreateDynamicObject(16305, 1906.79175, -1408.37109, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][3] = CreateDynamicObject(16305, 1872.50342, -1398.84973, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][4] = CreateDynamicObject(16305, 1904.24878, -1398.00195, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][5] = CreateDynamicObject(16305, 1886.09790, -1404.02100, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][6] = CreateDynamicObject(16305, 1881.23755, -1394.82996, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][7] = CreateDynamicObject(16305, 1893.18958, -1395.28503, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][8] = CreateDynamicObject(16305, 1913.65161, -1394.52539, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][9] = CreateDynamicObject(16305, 1914.87415, -1404.55042, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][10] = CreateDynamicObject(16305, 1916.29749, -1415.43311, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][11] = CreateDynamicObject(16305, 1907.16211, -1419.65198, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][12] = CreateDynamicObject(16305, 1916.36169, -1426.55334, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][13] = CreateDynamicObject(16305, 1908.15466, -1431.16992, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][14] = CreateDynamicObject(16305, 1922.87634, -1434.34033, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][15] = CreateDynamicObject(16305, 1925.43298, -1411.01257, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][16] = CreateDynamicObject(16305, 1934.16650, -1405.23657, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][17] = CreateDynamicObject(16305, 1932.66187, -1394.23938, 13.79690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][18] = CreateDynamicObject(16305, 1926.67236, -1422.79370, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][19] = CreateDynamicObject(16305, 1934.54395, -1416.69360, 14.18690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][20] = CreateDynamicObject(16305, 1932.69910, -1431.60596, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][21] = CreateDynamicObject(16305, 1941.48486, -1426.15491, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][22] = CreateDynamicObject(16305, 1944.30835, -1412.60999, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][23] = CreateDynamicObject(16305, 1943.26306, -1400.81042, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][24] = CreateDynamicObject(16305, 1951.56250, -1422.24072, 13.66690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					pijesakhrpa[playerid][25] = CreateDynamicObject(16305, 1950.59973, -1434.50659, 13.92690,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][0], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][1], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][2], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][3], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][4], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][5], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][6], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][7], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][8], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][9], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][10], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][11], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][12], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][13], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][14], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][15], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][16], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][17], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][18], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][19], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][20], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][21], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][22], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][23], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][24], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					SetDynamicObjectMaterial(pijesakhrpa[playerid][25], 0, 9931, "churchsfe", "gravelkb_128", 0xFFFFBD9D);
					
					ravnjanjetimer[playerid] = SetTimerEx("GradjevinarRavna",300,true,"i",playerid);
					
					AccountVerified[ playerid ] = false;
					SendJobMessage( playerid, "Zapoceli ste sa ravnjanjem zemlje!" );
					SendJobMessage( playerid, "Zemlju ravnate tako sto prelazite preko hrpica zemlje!" );
					sravnohrpica[ playerid ] = 0;
					

				}
			}
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_BUSVOZACPOSAO )
	{
		if( !response )
		{
			IDBusaKojiVozi[ playerid ] = -1;
			IDIgracaKojiVoziBus[ GetPlayerVehicleID(playerid) ] = -1;
			SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
			return 1;
		
		}
		if( response )
		{
			//if( AccountVerified[ playerid ] == false ) return Dimi_RemovePlayerFromVehicle( playerid ), GRESKA( playerid, "Prvo morate verifikovati svoj nalog(/verifikacija).");
			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_BUSVOZAC )
			{
				switch( listitem )
				{
					case 0:
					{
						if(VoziBeogradStanicu[playerid] == 0)//prva stanica
						{
							Dimi_SetPlayerCheckpoint(playerid,2025.5704,-1940.2255,13.3426,3.0);//prva stanica
							SendInfoMessage( playerid, "Vasa prva stanica je: "col_balkanstory"Auto Skola" );
							VoziBeogradStanicu[playerid] = 1;
							IDBusaKojiVozi[ playerid ] = GetPlayerVehicleID(playerid);
							IDIgracaKojiVoziBus[ GetPlayerVehicleID(playerid) ] = playerid;
							BusActor1[playerid] = CreateActor(12, 2026.67615, -1943.19592, 13.55340,   180.00000);
							BusActor2[playerid] = CreateActor(28, 2025.50928, -1943.16541, 13.55340,   180.00000);
							BusActor3[playerid] = CreateActor(59, 2024.29907, -1943.35242, 13.55340,   180.00000);
							SetActorFacingAngle(BusActor1[playerid], 0.00000);
							SetActorFacingAngle(BusActor2[playerid], 0.00000);
							SetActorFacingAngle(BusActor3[playerid], 0.00000);
						}
						
					}
					case 1://VoziSarajevoStanicu[ playerid ] = 0;
					{

						if(VoziSarajevoStanicu[ playerid ] == 0)//prva stanica
						{
							Dimi_SetPlayerCheckpoint(playerid,1854.9911,-2162.8677,13.3828,3.0);//prva stanica
							SendInfoMessage( playerid, "Vasa prva stanica je oznacena na mapi!" );
							VoziSarajevoStanicu[playerid] = 1;
							StaroVreme[ playerid ] = gettime();
							NovoVreme[ playerid ] = 20;
							IDBusaKojiVozi[ playerid ] = GetPlayerVehicleID(playerid);
							IDIgracaKojiVoziBus[ GetPlayerVehicleID(playerid) ] = playerid;

						}
						return 1;
					}
					
				}
			}
		}
	}
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_ZETVAZITA )
	{

		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{

			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_FARMER )
			{
				AccountVerified[ playerid ] = false;
				ZitoObjects[playerid][0] = CreateDynamicObject (855, -1157.13220, -1047.53882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][1] = CreateDynamicObject (855, -1157.13220, -1028.79480, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][2] = CreateDynamicObject (855, -1156.52356, -1010.62689, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][3] = CreateDynamicObject (855, -1157.11304, -997.90118, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][4] = CreateDynamicObject (855, -1157.13367, -977.70502, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][5] = CreateDynamicObject (855, -1157.13220, -962.26678, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][6] = CreateDynamicObject (855, -1157.13220, -940.88281, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][7] = CreateDynamicObject (855, -1140.76416, -1047.53882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][8] = CreateDynamicObject (855, -1124.39624, -1047.53882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][9] = CreateDynamicObject (855, -1108.88721, -1044.58752, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][10] = CreateDynamicObject (855, -1091.39624, -1047.53882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][11] = CreateDynamicObject (855, -1075.02820, -1047.53882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][12] = CreateDynamicObject (855, -1055.02222, -1049.18286, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][13] = CreateDynamicObject (855, -1042.81873, -1040.31030, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][14] = CreateDynamicObject (855, -1142.77380, -1033.88525, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][15] = CreateDynamicObject (855, -1142.69849, -1021.57526, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][16] = CreateDynamicObject (855, -1142.90735, -1001.82819, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][17] = CreateDynamicObject (855, -1140.63367, -982.18744, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][18] = CreateDynamicObject (855, -1142.28882, -965.81561, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][19] = CreateDynamicObject (855, -1144.27783, -946.21100, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][20] = CreateDynamicObject (855, -1124.39624, -1028.79480, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][21] = CreateDynamicObject (855, -1124.58960, -1011.52979, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][22] = CreateDynamicObject (855, -1128.79297, -993.22113, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][23] = CreateDynamicObject (855, -1125.32751, -974.69275, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][24] = CreateDynamicObject (855, -1125.42480, -952.24683, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][25] = CreateDynamicObject (855, -1127.36560, -937.69574, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][26] = CreateDynamicObject (855, -1107.38098, -1034.44397, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][27] = CreateDynamicObject (855, -1107.85620, -1016.81281, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][28] = CreateDynamicObject (855, -1109.72498, -994.13977, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][29] = CreateDynamicObject (855, -1107.76416, -981.52557, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][30] = CreateDynamicObject (855, -1112.12793, -964.58954, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][31] = CreateDynamicObject (855, -1108.45764, -946.11548, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][32] = CreateDynamicObject (855, -1091.73022, -1026.05493, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][33] = CreateDynamicObject (855, -1093.14026, -1008.09900, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][34] = CreateDynamicObject (855, -1079.85938, -987.16882, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][35] = CreateDynamicObject (855, -1091.82959, -987.72919, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][36] = CreateDynamicObject (855, -1092.52112, -967.91559, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][37] = CreateDynamicObject (855, -1093.61621, -933.82996, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][38] = CreateDynamicObject (855, -1075.66150, -1032.10852, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][39] = CreateDynamicObject (855, -1073.55127, -1018.58459, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][40] = CreateDynamicObject (855, -1074.77539, -1001.05231, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][41] = CreateDynamicObject (855, -1071.24316, -974.14355, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][42] = CreateDynamicObject (855, -1073.55225, -951.27136, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][43] = CreateDynamicObject (855, -1071.53406, -934.88239, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][44] = CreateDynamicObject (855, -1057.64343, -1032.08032, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][45] = CreateDynamicObject (855, -1059.01392, -1011.85461, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][46] = CreateDynamicObject (855, -1057.99146, -996.17303, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][47] = CreateDynamicObject (855, -1057.90088, -975.16162, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][48] = CreateDynamicObject (855, -1058.66016, -962.26678, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][49] = CreateDynamicObject (855, -1058.66016, -940.88281, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][50] = CreateDynamicObject (855, -1040.38623, -1026.54700, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][51] = CreateDynamicObject (855, -1040.81885, -1012.32257, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][52] = CreateDynamicObject (855, -1037.08594, -999.73523, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][53] = CreateDynamicObject (855, -1034.77686, -981.21161, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][54] = CreateDynamicObject (855, -1043.96741, -964.07233, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][55] = CreateDynamicObject (855, -1039.38855, -940.88281, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][56] = CreateDynamicObject (855, -1046.79395, -928.96149, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][57] = CreateDynamicObject (855, -1058.66016, -923.20978, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][58] = CreateDynamicObject (855, -1075.02820, -923.20978, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][59] = CreateDynamicObject (855, -1091.39624, -923.20978, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][60] = CreateDynamicObject (855, -1111.67249, -931.66797, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][61] = CreateDynamicObject (855, -1124.39624, -923.20978, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][62] = CreateDynamicObject (855, -1142.83972, -927.86664, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][63] = CreateDynamicObject (855, -1157.13220, -923.20978, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][64] = CreateDynamicObject (855, -1092.53809, -950.67316, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][65] = CreateDynamicObject (855, -1149.59387, -987.85626, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][66] = CreateDynamicObject (855, -1148.16797, -956.09088, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][67] = CreateDynamicObject (855, -1105.28418, -956.54810, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][68] = CreateDynamicObject (855, -1098.25806, -995.63165, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][69] = CreateDynamicObject (855, -1084.38586, -976.74054, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][70] = CreateDynamicObject (855, -1083.89929, -959.58990, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				ZitoObjects[playerid][71] = CreateDynamicObject (855, -1118.23682, -1001.42548, 129.76401,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);

				new Float:Pos[3];
				for(new i = 0; i < 72; i++)
				{
					GetDynamicObjectPos(ZitoObjects[playerid][i] ,Pos[0],Pos[1],Pos[2]);
					SetPlayerMapIcon(playerid, i,Pos[0],Pos[1],Pos[2], 56, 0, MAPICON_LOCAL);
				}



				for( new i = 0; i < 72; i++ ) ZitoID[ i ][ playerid ] = 804;

				PokosenoZito[ playerid ] = 0;
				KrenuoZetvu[ playerid ] = true;
				ZitoTimer[ playerid ] = SetTimerEx( "ZetvaT", 100, true, "i", playerid );
				ShowPlayerDialog( playerid, 0, DSMSG, "Vrsenje zita",
					""col_white"Na mapi su kreirani objekti zita. Vas zadatak je da ih poznjete!\n" \
					"Trebate kombajnom preci preko objekta zita. Na kraju zetve cete dobiti isplatu.", "U redu", "");

				StaroVreme[ playerid ] = gettime();
				NovoVreme[ playerid ] = 120;
				return 1;
			}


		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


	
	
	
	
	
	
	
	
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_KOSACPOSAO )
	{

		if( !response ) return SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
		if( response )
		{

			if( PlayerInfo[ playerid ][ xPosao ] == POSAO_KOSAC )
			{

				//if( GetVehicleModel( GetPlayerVehicleID( playerid ) ) != 572 ) return GRESKA( playerid, "Niste u vozilu za kosenje!"),SetVehicleToRespawn( GetPlayerVehicleID( playerid ) );
				//if( KrenuoKosenje[ playerid ] ) return GRESKA( playerid, "Vi vec kosite travu"), Dimi_RemovePlayerFromVehicle( playerid );
				//if( AccountVerified[ playerid ] == false ) return GRESKA( playerid, "Prvo morate verifikovati svoj nalog(/verifikacija).");

				AccountVerified[ playerid ] = false;
				Grass[playerid][0] = CreateDynamicObject (866, 1957.60437, -1228.80933, 18.94360,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][1] = CreateDynamicObject (866, 1949.53748, -1226.38074, 18.77360,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][2] = CreateDynamicObject (866, 1943.23071, -1224.04395, 19.01160,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][3] = CreateDynamicObject (866, 1941.68372, -1231.51331, 18.43360,   10.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][4] = CreateDynamicObject (866, 1948.79834, -1232.07581, 18.77360,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][5] = CreateDynamicObject (866, 1954.13098, -1243.98962, 18.77360,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][6] = CreateDynamicObject (866, 1945.61255, -1245.18054, 18.12760,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][7] = CreateDynamicObject (866, 1937.21582, -1245.77039, 17.44760,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][8] = CreateDynamicObject (866, 1927.32068, -1246.07642, 16.52960,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][9] = CreateDynamicObject (866, 1917.80774, -1246.35400, 15.23760,   10.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][10] = CreateDynamicObject (866, 1910.74402, -1246.64941, 13.94560,   12.00000, 0.00000, -2.00000, -1, -1, playerid, 200.0);
				Grass[playerid][11] = CreateDynamicObject (866, 1903.89185, -1243.61353, 14.04760,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][12] = CreateDynamicObject (866, 1890.90735, -1242.37646, 13.57160,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][13] = CreateDynamicObject (866, 1883.56104, -1232.44763, 14.55760,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][14] = CreateDynamicObject (866, 1875.60144, -1245.74146, 12.89160,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][15] = CreateDynamicObject (866, 1865.42688, -1244.41943, 13.19760,   0.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][16] = CreateDynamicObject (866, 1864.24756, -1231.97937, 15.74760,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][17] = CreateDynamicObject (866, 1868.24524, -1223.24731, 16.97160,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][18] = CreateDynamicObject (866, 1876.69922, -1221.42078, 16.32560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][19] = CreateDynamicObject (866, 1877.69958, -1209.88513, 18.19560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][20] = CreateDynamicObject (866, 1871.84827, -1198.78186, 20.94960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][21] = CreateDynamicObject (866, 1865.90088, -1209.91333, 19.45360,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][22] = CreateDynamicObject (866, 1875.53247, -1189.22937, 21.96960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][23] = CreateDynamicObject (866, 1885.21118, -1182.05530, 22.44560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][24] = CreateDynamicObject (866, 1881.96826, -1172.04333, 22.95560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][25] = CreateDynamicObject (866, 1881.99744, -1161.25452, 22.95560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][26] = CreateDynamicObject (866, 1887.69592, -1150.60132, 23.32960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][27] = CreateDynamicObject (866, 1891.72510, -1159.86487, 23.22760,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][28] = CreateDynamicObject (866, 1898.94922, -1155.84619, 23.29560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][29] = CreateDynamicObject (866, 1893.20667, -1169.02917, 23.12560,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][30] = CreateDynamicObject (866, 1904.85974, -1175.63574, 22.92160,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][31] = CreateDynamicObject (866, 1904.31067, -1185.64478, 21.79960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][32] = CreateDynamicObject (866, 1896.84265, -1191.30249, 21.28960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][33] = CreateDynamicObject (866, 1891.63049, -1201.42102, 19.28360,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][34] = CreateDynamicObject (866, 1896.44763, -1212.25525, 17.61760,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][35] = CreateDynamicObject (866, 1890.91687, -1219.75952, 16.01960,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][36] = CreateDynamicObject (866, 1904.71936, -1227.86487, 15.71360,   8.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][37] = CreateDynamicObject (866, 1916.71667, -1228.03162, 17.03960,   12.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][38] = CreateDynamicObject (866, 1921.68958, -1216.13550, 18.90960,   10.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][39] = CreateDynamicObject (866, 1922.54651, -1198.83630, 19.28360,   10.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][40] = CreateDynamicObject (866, 1920.66833, -1185.21326, 20.30360,   10.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][41] = CreateDynamicObject (866, 1916.58838, -1174.29187, 21.76560,   10.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][42] = CreateDynamicObject (866, 1928.90930, -1180.24353, 19.92960,   10.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][43] = CreateDynamicObject (866, 1926.17395, -1165.15417, 21.32360,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][44] = CreateDynamicObject (866, 1941.23169, -1162.69604, 20.23560,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][45] = CreateDynamicObject (866, 1947.09631, -1175.60217, 19.24960,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][46] = CreateDynamicObject (866, 1954.53015, -1166.07703, 19.65760,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][47] = CreateDynamicObject (866, 1924.77869, -1150.82312, 22.71760,   12.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][48] = CreateDynamicObject (866, 1942.96716, -1150.24036, 21.76560,   12.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][49] = CreateDynamicObject (866, 1984.54187, -1166.09705, 19.65760,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][50] = CreateDynamicObject (866, 2005.95581, -1164.85010, 20.23560,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][51] = CreateDynamicObject (866, 1996.20044, -1164.61475, 19.92960,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][52] = CreateDynamicObject (866, 2004.20508, -1175.81042, 19.45360,   6.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][53] = CreateDynamicObject (866, 2015.22424, -1186.10742, 19.55560,   6.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][54] = CreateDynamicObject (866, 2025.83411, -1193.32935, 20.33760,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][55] = CreateDynamicObject (866, 2038.59778, -1192.69983, 21.83360,   6.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][56] = CreateDynamicObject (866, 2036.14087, -1181.68140, 21.83360,   2.00000, 0.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][57] = CreateDynamicObject (866, 2037.50842, -1207.23657, 21.83360,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][58] = CreateDynamicObject (866, 2051.99292, -1214.67200, 22.71760,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][59] = CreateDynamicObject (866, 2050.41016, -1227.26892, 22.47960,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][60] = CreateDynamicObject (866, 2039.44543, -1231.60986, 21.86760,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][61] = CreateDynamicObject (866, 2025.61047, -1236.52368, 21.45960,   -8.00000, 2.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][62] = CreateDynamicObject (866, 2035.43750, -1243.54846, 22.27560,   -4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][63] = CreateDynamicObject (866, 2053.44604, -1240.32458, 22.75160,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][64] = CreateDynamicObject (866, 2053.85107, -1201.81421, 22.81960,   2.00000, -2.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][65] = CreateDynamicObject (866, 2053.93677, -1186.86987, 22.78560,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][66] = CreateDynamicObject (866, 2047.11829, -1171.68079, 22.30960,   4.00000, -4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][67] = CreateDynamicObject (866, 2010.45581, -1242.88342, 21.90160,   -4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][68] = CreateDynamicObject (866, 1995.53894, -1243.76465, 20.23560,   -4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][69] = CreateDynamicObject (866, 2012.34619, -1223.06213, 20.33760,   -4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][70] = CreateDynamicObject (866, 1997.25244, -1225.16821, 19.69160,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][71] = CreateDynamicObject (866, 1987.30847, -1228.17688, 19.21560,   4.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][72] = CreateDynamicObject (866, 2021.23157, -1152.01819, 22.34360,   12.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][73] = CreateDynamicObject (866, 2007.70337, -1153.96814, 20.98360,   14.00000, -6.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][74] = CreateDynamicObject (866, 1995.61682, -1152.01086, 20.74560,   16.00000, 2.00000, 0.00000, -1, -1, playerid, 200.0);
				Grass[playerid][75] = CreateDynamicObject (866, 2031.70752, -1157.42432, 21.45960,   12.00000, 4.00000, 0.00000, -1, -1, playerid, 200.0);
				new Float:Pos[3];
				for(new i = 0; i < 76; i++)
				{
					GetDynamicObjectPos(Grass[playerid][i] ,Pos[0],Pos[1],Pos[2]);
					SetPlayerMapIcon(playerid, i,Pos[0],Pos[1],Pos[2], 56, 0, MAPICON_LOCAL);
				}


			
				for( new i = 0; i < 76; i++ ) GrassID[ i ][ playerid ] = 804;

				PokosenaTrava[ playerid ] = 0;
				KrenuoKosenje[ playerid ] = true;
				TravaTimer[ playerid ] = SetTimerEx( "TravaT", 100, true, "i", playerid );
				ShowPlayerDialog( playerid, 0, DSMSG, "Posao Kosac trave",
					""col_white"Na mapi su kreirani objekti trave. Vas zadatak je pokositi ih kako bi izvrsili jednu rutu.\n" \
					"Trebate kosilicom preci preko objekta trave. Na kraju rute dobijate novac.", "U redu", "");

				StaroVreme[ playerid ] = gettime();
				NovoVreme[ playerid ] = 120;
				return 1;
			}


		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_BIRAALARMVOZILA)
	{
		if( response )
		{
			new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( listitem == 0 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return GRESKA( playerid, "Nemas 2000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vAlarm ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjen alarm prvo ga skinite!" );
				VehicleInfo[ autoid ][ vAlarm ] = 1;
				DajIgracuNovac( playerid, -2000 );
				SendInfoMessage(playerid,"Ugradili ste alarm obicne kvalitete i platili ga 2000$!");
			}
			if( listitem == 1 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return GRESKA( playerid, "Nemas 3000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vAlarm ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjen alarm prvo ga skinite!" );
				VehicleInfo[ autoid ][ vAlarm ] = 2;
				DajIgracuNovac( playerid, -3000 );
				SendInfoMessage(playerid,"Ugradili ste alarm dobre kvalitete i platili ga 3000$!");
			}
			if( listitem == 2 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 5000 ) return GRESKA( playerid, "Nemas 5000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vAlarm ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjen alarm prvo ga skinite!" );
				VehicleInfo[ autoid ][ vAlarm ] = 3;
				DajIgracuNovac( playerid, -5000 );
				SendInfoMessage(playerid,"Ugradili ste alarm naprednije kvalitete i platili ga 5000$!");
			}
			if( listitem == 3 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 7000 ) return GRESKA( playerid, "Nemas 7000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vAlarm ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjen alarm prvo ga skinite!" );
				VehicleInfo[ autoid ][ vAlarm ] = 4;
				DajIgracuNovac( playerid, -7000 );
				SendInfoMessage(playerid,"Ugradili ste alarm jake kvalitete i platili ga 7000$!");
			}
			if( listitem == 4 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Nemas 1000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vAlarm ] == 0) return GRESKA( playerid, "Vozilo nema ugradjen alarm!" );
				VehicleInfo[ autoid ][ vAlarm ] = 0;
				DajIgracuNovac( playerid, -1000 );
				SendInfoMessage(playerid,"Skinuli ste alarm i platili 1000$");
			}
			SaveVehicle( autoid );

		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_BIRABRAVUVOZILA)
	{
		if( response )
		{
			new autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			if( listitem == 0 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return GRESKA( playerid, "Nemas 2000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjenu bravu prvo je skinite!" );
				VehicleInfo[ autoid ][ vLock ] = 1;
				DajIgracuNovac( playerid, -2000 );
				SendInfoMessage(playerid,"Ugradili ste bravu obicne kvalitete i platili je 2000$!");
			}
			if( listitem == 1 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 3000 ) return GRESKA( playerid, "Nemas 3000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjenu bravu prvo je skinite!" );
				VehicleInfo[ autoid ][ vLock ] = 2;
				DajIgracuNovac( playerid, -3000 );
				SendInfoMessage(playerid,"Ugradili ste bravu srednje kvalitete i platili je 3000$!");
			}
			if( listitem == 2 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 5000 ) return GRESKA( playerid, "Nemas 5000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjenu bravu prvo je skinite!" );
				VehicleInfo[ autoid ][ vLock ] = 3;
				DajIgracuNovac( playerid, -5000 );
				SendInfoMessage(playerid,"Ugradili ste bravu dobre kvalitete i platili je 5000$!");
			}
			if( listitem == 3 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 7000 ) return GRESKA( playerid, "Nemas 7000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjenu bravu prvo je skinite!" );
				VehicleInfo[ autoid ][ vLock ] = 4;
				DajIgracuNovac( playerid, -7000 );
				SendInfoMessage(playerid,"Ugradili ste ojacanu bravu i platili je 7000$!");
			}
			if( listitem == 4 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 10000 ) return GRESKA( playerid, "Nemas 10000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] != 0) return GRESKA( playerid, "Vozilo vec ima ugradjenu bravu prvo je skinite!" );
				VehicleInfo[ autoid ][ vLock ] = 5;
				DajIgracuNovac( playerid, -10000 );
				SendInfoMessage(playerid,"Ugradili ste bravu jake kvalitete i platili je 10000$!");
			}
			if( listitem == 5 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Nemas 1000$ kod sebe." );
				if(VehicleInfo[ autoid ][ vLock ] == 0) return GRESKA( playerid, "Vozilo nema ugradjenu zastitu!" );
				VehicleInfo[ autoid ][ vLock ] = 0;
				DajIgracuNovac( playerid, -1000 );
				SendInfoMessage(playerid,"Skinuli ste zastitu i platili 1000$");
			}
			SaveVehicle( autoid );
			
		}
	}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	else if( dialogid == dialog_NEONSHOP )
	{
		if( response )
		{
			new autoid = -1;

			if( ScriptIDVozila[ GetPlayerVehicleID( playerid ) ] != -1 )
			{
				autoid = ScriptIDVozila[ GetPlayerVehicleID( playerid ) ];
			}
			
			if( listitem == 6 )
			{
				if( PlayerInfo[ playerid ][ xNovac ] < 1000 ) return GRESKA( playerid, "Nemas 1000$ kod sebe." );

				if( Neon[ GetPlayerVehicleID( playerid ) ] == 1 )
				{
					Neon[ GetPlayerVehicleID( playerid ) ] = 0;
					DestroyDynamicObject( NeonObject1[ GetPlayerVehicleID( playerid ) ] );
					DestroyDynamicObject( NeonObject2[ GetPlayerVehicleID( playerid ) ] );
				}
				if( autoid != -1 )
				{
					VehicleInfo[ autoid ][ vNeon ] = 0;
					SaveVehicle( autoid );
				}
				
				SendInfoMessage( playerid, "Uspjesno ste skinuli Neonke sa auta i platili 300$ za usluge." );
				DajIgracuNovac( playerid, -1000 );
				BussinesNeonMoney( playerid, 150 );
				return true;
			}
			else if( listitem < 6 )
			{
			
				if( PlayerInfo[ playerid ][ xNovac ] < 2000 ) return GRESKA( playerid, "Nemas 2000$ kod sebe." );
			
				if( autoid != -1 && VehicleInfo[ autoid ][ vUsage ] == PRIVATNO_VOZILO )
				{
					if( VehicleInfo[ autoid ][ vNeon ] != 0) return GRESKA( playerid, "Ovo vozilo vec ima ugradjene neonke prvo ih skinite!" );
					if( strcmp( ImeIgraca( playerid ), VehicleInfo[ autoid ][ vOwner ], true ) == 0 )
					{

						switch( listitem )
						{

							case 0:
							{
								VehicleInfo[ autoid ][ vNeon ] = 18648;
							}
							case 1:
							{

								VehicleInfo[ autoid ][ vNeon ] = 18647;
							}
							case 2:
							{
								VehicleInfo[ autoid ][ vNeon ] = 18649;
							}
							case 3:
							{
								VehicleInfo[ autoid ][ vNeon ] = 18652;
							}
							case 4:
							{
								VehicleInfo[ autoid ][ vNeon ] = 18651;
							}
							case 5:
							{
								VehicleInfo[ autoid ][ vNeon ] = 18650;
							}
						}
						NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( VehicleInfo[ autoid ][ vNeon ], 0, 0, 1500, 0, 0, 0 );
						AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
						AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
						Neon[ GetPlayerVehicleID( playerid ) ] = 1;
						SaveVehicle( autoid );
					}
				}
				else if( autoid == -1 )
				{
					new neonka;
					if( Neon[ GetPlayerVehicleID( playerid ) ] == 1) return GRESKA( playerid, "Ovo vozilo vec ima ugradjene neonke prvo ih skinite!" );
					switch( listitem )
					{

						case 0:
						{
							neonka = 18648;
						}
						case 1:
						{
							neonka = 18647;
						}
						case 2:
						{
							neonka = 18649;
						}
						case 3:
						{
							neonka = 18652;
						}
						case 4:
						{
							neonka = 18651;
						}
						case 5:
						{
							neonka = 18650;
						}

					}
					NeonObject1[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					NeonObject2[ GetPlayerVehicleID( playerid ) ] = CreateDynamicObject( neonka, 0, 0, 1500, 0, 0, 0 );
					AttachDynamicObjectToVehicle( NeonObject1[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
					AttachDynamicObjectToVehicle( NeonObject2[ GetPlayerVehicleID( playerid ) ], GetPlayerVehicleID( playerid ), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0 );
					Neon[ GetPlayerVehicleID( playerid ) ] = 1;
				}
				
				SendInfoMessage( playerid, "Uspjesno ste ugradili Neonke na vozilo i platili 2000$." );
				DajIgracuNovac( playerid, -2000 );
				BussinesNeonMoney( playerid, 1000 );
			}
		}
	}
	else if( dialogid == dialog_PARKING ) {

		if( response ) {
		
			new parkID = GetNearestParkingZone( playerid );
			if( parkID == -1 ) return GRESKA( playerid, "Nisi u nijednoj parking zoni." );
			
			if( ParkingPlaces[ parkID ][ listitem ][ parkTaken ] ) return GRESKA( playerid, "Ovo mesto je zauzeto." );
			
			ParkingPlace[ playerid ] = listitem;
			ShowPlayerDialog( playerid, dialog_PARKING_2, DSI, D_NASLOV, ""col_white"Unesite koliko minuta zelite da iznajmite parking mesto.", D_ODABERI, D_ODUSTANI );
			
		}
	}
	else if( dialogid == dialog_PARKING_2 ) {

		if( response ) {
		
			new parkID = GetNearestParkingZone( playerid );
			if( parkID == -1 ) return GRESKA( playerid, "Nisi u nijednoj parking zoni." );
		
			new id = ParkingPlace[ playerid ];
		
			new minuti;
			if( sscanf( inputtext, "i", minuti ) ) return ShowPlayerDialog( playerid, dialog_PARKING_2, DSI, D_NASLOV, ""col_white"Unesite koliko minuta zelite da iznajmite parking mesto.", D_ODABERI, D_ODUSTANI );
			
			if( minuti < 1 || minuti > 120 ) return GRESKA( playerid, "Ne moze ispod 1 minut ili iznad 120 minuta." );
			
			if( PlayerInfo[ playerid ][ xNovac ] < minuti*50 ) return GRESKA( playerid, "Nemate dovoljno novca(%d$).", minuti*50 );
		
			format( globalstring, sizeof( globalstring ), "* %s ubacuje novce u aparat za parking.", ImeIgraca( playerid ) );
			PorukaRadius( 20.0, playerid, globalstring, LJUBICASTA );
			PlayerPlaySound( playerid, 1052, 0.0, 0.0, 0.0 );

			DajIgracuNovac( playerid, minuti*50 );
			
			SendInfoMessage( playerid, "Platili ste %d$ za koriscenje parking mesta na %d minuta.", minuti*50, minuti );
		
			ParkingPlaces[ parkID ][ id ][ parkTaken ] = true;
			
			Dimi_SetVehiclePos( GetPlayerVehicleID( playerid ), ParkingPlaces[ parkID ][ id ][ parkPlace_X ], ParkingPlaces[ parkID ][ id ][ parkPlace_Y ], ParkingPlaces[ parkID ][ id ][ parkPlace_Z ] );
			SetVehicleZAngle( GetPlayerVehicleID( playerid ), ParkingPlaces[ parkID ][ id ][ parkPlace_A ] );

			Dimi_SetPlayerPos( playerid, ParkingInfo[ parkID ][ parkPickup_1_Pos ][ 0 ], ParkingInfo[ parkID ][ parkPickup_1_Pos ][ 1 ], ParkingInfo[ parkID ][ parkPickup_1_Pos ][ 2 ] );

			ParkingPlace[ playerid ] = -1;

			new engine, lights, alarm, doors, bonnet, boot, objective;
			GetVehicleParamsEx( GetPlayerVehicleID( playerid ), engine, lights, alarm, doors, bonnet, boot, objective );
			SetVehicleParamsEx( GetPlayerVehicleID( playerid ), 0, lights, alarm, 1, bonnet, boot, objective );
		
			Parked[ GetPlayerVehicleID( playerid ) ] = id;
			ParkingTime[ GetPlayerVehicleID( playerid ) ] = SetTimerEx( "VehicleParkTimer", minuti*60000, false, "ii", parkID, GetPlayerVehicleID( playerid ) );
		}
	}
	else if( dialogid == dialog_PARKING_3 ) {

		if( response ) {
	
			new parkID = GetNearestParkingZone( playerid );
			if( parkID == -1 ) return GRESKA( playerid, "Nisi u nijednoj parking zoni." );
	
			ParkingPlaces[ parkID ][ Parked[ GetPlayerVehicleID( playerid ) ] ][ parkTaken ] = false;
	
			Parked[ GetPlayerVehicleID( playerid ) ] = -1;
			Dimi_KillTimer( ParkingTime[ GetPlayerVehicleID( playerid ) ] );
			
			SendInfoMessage( playerid, "Ovo vozilo vise nema iznajmljeno mesto za parkiranje." );
	
		}
		else if( !response ) {

			new Float:Poz[ 3 ];
			GetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ] );
			Dimi_SetPlayerPos( playerid, Poz[ 0 ], Poz[ 1 ], Poz[ 2 ]+2 );
			Dimi_RemovePlayerFromVehicle( playerid );

		}
	}
	else if( dialogid == dialog_VEHMONEYBUY )
	{

		if( response )
		{
		
			new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 )
			{
				if( ServerInfo[ BrojKreiranihVozila ] > MaxBrojKreiranih ) return SendClientMessagee( playerid, SVETLOCRVENA, "{FF0000}| AC |:"col_white" Nemoguce je trenutno kupiti vozilo, limit vozila na serveru je dosegnut.");
				if( PlayerInfo[ playerid ][ xNovac ] < VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] ) return GRESKA( playerid, "Nemas dovoljno novca." );

				if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { }
				else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) {
					if( PlayerInfo[ playerid ][ xDonatorSlot ] == true ) { }
					else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );
				}
				else return GRESKA( playerid, "Svi slotovi vozila su vam zauzeti." );

				if( PlayerInfo[ playerid ][ xLevel ] < 3 ) return GRESKA( playerid, "Morate biti level 3+ da bi ste kupili vozilo." );

				if( AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ] == 0 ) return GRESKA( playerid, "Nemamo vise ovih modela u prodaji." );

				for( new i = 1; i < MAX_CARS; i++ )
				{
					new fileauta[ 40 ];
					format(fileauta, sizeof( fileauta ), V_FILE, i);
					if( !fexist( fileauta ) )
					{
						VehicleInfo[ i ][ vOwned ] = 1;
						VehicleInfo[ i ][ vNeaktivnost ] = 0;
						VehicleInfo[ i ][ vPrice ] = VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ];
						strmid( VehicleInfo[ i ][ vOwner ], ImeIgraca( playerid ), 0, strlen( ImeIgraca( playerid ) ), 32);
						VehicleInfo[ i ][ vLocked ] = 0;
						VehicleInfo[ i ][ vLokacijaX ] = AutoSalon[ as ][ aVehBuyedPos ][ 0 ];
						VehicleInfo[ i ][ vLokacijaY ] = AutoSalon[ as ][ aVehBuyedPos ][ 1 ];
						VehicleInfo[ i ][ vLokacijaZ ] = AutoSalon[ as ][ aVehBuyedPos ][ 2 ];
						VehicleInfo[ i ][ vLokacijaA ] = AutoSalon[ as ][ aVehBuyedPos ][ 3 ];
						VehicleInfo[ i ][ vVirtualWorld ] = 0;
						VehicleInfo[ i ][ vInterior ] = 0;
						VehicleInfo[ i ][ vUsage ] = PRIVATNO_VOZILO;
						VehicleInfo[ i ][ vJob ] = -1;
						VehicleInfo[ i ][ vOrganization ] = -1;
						VehicleInfo[ i ][ vFuelProperty ] = -1;
						VehicleInfo[ i ][ vColor1 ] = AutoSalonBojaVozila[ playerid ];
						VehicleInfo[ i ][ vColor2 ] = AutoSalonBojaVozila[ playerid ];
						VehicleInfo[ i ][ vModel ] = AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ];
						VehicleInfo[ i ][ vReg ] = 0;
						VehicleInfo[ i ][ vRegVreme ] = 0;
						VehicleInfo[ i ][ vTeh ] = 0;
						VehicleInfo[ i ][ vGPS ] = 0;
						VehicleInfo[ i ][ vOsiguranje ] = 5;
						VehicleInfo[ i ][ vLock ] = 0;
						VehicleInfo[ i ][ vAlarm ] = 0;
						VehicleInfo[ i ][ vTuned ] = 0;
						VehicleInfo[ i ][ vNeon ] = 0;
						VehicleInfo[ i ][ vImobilizator ] = 0;
						VehicleInfo[ i ][ vSpoiler ] = 0;
						VehicleInfo[ i ][ vHood ] = 0;
						VehicleInfo[ i ][ vRoof ] = 0;
						VehicleInfo[ i ][ vSkirt ] = 0;
						VehicleInfo[ i ][ vLamps ] = 0;
						VehicleInfo[ i ][ vNitro ] = 0;
						VehicleInfo[ i ][ vExhaust ] = 0;
						VehicleInfo[ i ][ vWheels ] = 0;
						VehicleInfo[ i ][ vStereo ] = 0;
						VehicleInfo[ i ][ vHydraulics ] = 0;
						VehicleInfo[ i ][ vFrontBumper ] = 0;
						VehicleInfo[ i ][ vRearBumper ] = 0;
						VehicleInfo[ i ][ vVents ] = 0;
						VehicleInfo[ i ][ vPaintJob ] = 255;
						VehicleInfo[ i ][ vProvera ] = i;
						VehicleInfo[ i ][ vMaterijali ] = 0;
						#if nerp_droga == 1
						VehicleInfo[ i ][ vDrug ][ 0 ] = 0; VehicleInfo[ i ][ vDrug ][ 1 ] = 0; VehicleInfo[ i ][ vDrug ][ 2 ] = 0; VehicleInfo[ i ][ vDrug ][ 3 ] = 0; VehicleInfo[ i ][ vDrug ][ 4 ] = 0; VehicleInfo[ i ][ vDrug ][ 5 ] = 0;
						VehicleInfo[ i ][ vDrugCode ][ 0 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 1 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 2 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 3 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 4 ] = 0; VehicleInfo[ i ][ vDrugCode ][ 5 ] = 0;
						#endif
						VehicleInfo[ i ][ vMelee ] = 0; VehicleInfo[ i ][ vWeap1 ] = 0; VehicleInfo[ i ][ vAmmo1 ] = 0; VehicleInfo[ i ][ vWeap2 ] = 0; VehicleInfo[ i ][ vAmmo2 ] = 0;
						VehicleInfo[ i ][ vGajbica ][ 0 ] = -1; VehicleInfo[ i ][ vGajbica ][ 1 ] = -1; VehicleInfo[ i ][ vGajbica ][ 2 ] = -1; VehicleInfo[ i ][ vGajbica ][ 3 ] = -1; VehicleInfo[ i ][ vGajbica ][ 4 ] = -1;
						VehicleInfo[ i ][ vGajbicaAmmount ][ 0 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 1 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 2 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 3 ] = 0; VehicleInfo[ i ][ vGajbicaAmmount ][ 4 ] = 0;
						VehicleInfo[ i ][ vID ] = Dimi_CreateVehicle( i, PRIVATNO_VOZILO, -1, -1, -1, VehicleInfo[ i ][ vModel ], VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ]+1.0, VehicleInfo[ i ][ vLokacijaA ], VehicleInfo[ i ][ vColor1 ], VehicleInfo[ i ][ vColor2 ], 300000 );
						LinkVehicleToInterior( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vInterior ] );
						SetVehicleVirtualWorld( VehicleInfo[ i ][ vID ], VehicleInfo[ i ][ vVirtualWorld ] );
						VehicleInfo[ i ][ vFuel ] = getAmountFuel( VehicleInfo[ i ][ vID ] ); vCanDrive[ VehicleInfo[ i ][ vID ] ] = 1; Fuel[ VehicleInfo[ i ][ vID ] ] = getAmountFuel( VehicleInfo[ i ][ vID ] );
						SetVehicleNumberPlate( VehicleInfo[ i ][ vID ], "NEMA" ); UnLockCar( VehicleInfo[ i ][ vID ] );
						SaveVehicle( i );
						carspawntimer = 1; ResetVehicleStatistics( VehicleInfo[ i ][ vID ] );
						SetTimer("AntiSpawnCrash", 3000, 0);

						if( VoziloJeDizel( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 1;
						else if( VoziloJeBenzin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 2;
						else if( VoziloJeKerozin( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 3;
						else if( VoziloNemaGorivo( VehicleInfo[ i ][ vID ] ) ) VehicleInfo[ i ][ vFuelType ] = 4;


						SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 0, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						if( IsVehicleBajs( VehicleInfo[ i ][ vID ] ) ) {
							SetVehicleParamsEx( VehicleInfo[ i ][ vID ], 1, 0, 0, VehicleInfo[ i ][ vLocked ], 0, 0, 0 );
						}

						DajIgracuNovac( playerid, -VehPrice[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]- 400 ][ 1 ] );

						if( PlayerInfo[ playerid ][ xVoziloID ][ 0 ] == -1 ){ PlayerInfo[ playerid ][ xVoziloID ][ 0 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 1 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 1 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 2 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 2 ] = i; }
						else if( PlayerInfo[ playerid ][ xVoziloID ][ 3 ] == -1 ) { PlayerInfo[ playerid ][ xVoziloID ][ 3 ] = i; }
						SavePlayer( playerid );

						new string[ 128 ];
						format( string, sizeof( string ), "Igrac %s je kupio vozilo %s u salonu ID %d", ImeIgraca( playerid ), ImeVozila[ AutoSalon[ as ][ aVehModel ][ ModelCar[ playerid ] ]-400 ], as );
						LogSave( "Ostalo/LogKupiVozilo.log", string );

						AutoSalon[ as ][ aVehAmmount ][ ModelCar[ playerid ] ]--;
						AutoSalon[ as ][ AlreadyBuying ] = false;
						SaveSalon( as );

						PlayerBuyingAS[ playerid ] = -1;
						AutoSalonBojaVozila[ playerid ] = -1;
						ModelCar[ playerid ] = 0;

						Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
						VehicleInfo[ slotid ][ vID ] = Dimi_CreateVehicle( i, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], VehicleInfo[ slotid ][ vFuelProperty ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
						SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
						LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

						BuyCarTDControl( playerid, false );
						BojaVozilaTDControl( playerid, false );
						TogPlayerHud( playerid );
						TogglePlayerControllable( playerid, true );

						SetCameraBehindPlayer( playerid );
						CancelSelectTextDraw( playerid );
						SendInfoMessage( playerid, "Kupili ste novo vozilo koje vam je prikazano markerom na mapi!" );

						SetVehicleLabels(i);

						Dimi_SetPlayerCheckpoint( playerid, VehicleInfo[ i ][ vLokacijaX ], VehicleInfo[ i ][ vLokacijaY ], VehicleInfo[ i ][ vLokacijaZ ], 5.0 );
						CheckpointStatus[ playerid ] = 15;
						break;
					}
				}
			}
		}
		else if( !response ) {

			new as = GetNearestSalon( playerid ), slotid = AutoSalon[ as ][ aIzlogVeh ];
			if( as != -1 ) {
				AutoSalon[ as ][ AlreadyBuying ] = false;

				PlayerBuyingAS[ playerid ] = -1;
				AutoSalonBojaVozila[ playerid ] = -1;
				ModelCar[ playerid ] = 0;

				Dimi_DestroyVehicle( VehicleInfo[ slotid ][ vID ] );
				VehicleInfo[ slotid ][ vID ] = Dimi_CreateVehicle( slotid, VehicleInfo[ slotid ][ vUsage ], VehicleInfo[ slotid ][ vOrganization ], VehicleInfo[ slotid ][ vJob ], VehicleInfo[ slotid ][ vFuelProperty ], AutoSalon[ as ][ aVehModel ][ 0 ], VehicleInfo[ slotid ][ vLokacijaX ], VehicleInfo[ slotid ][ vLokacijaY ], VehicleInfo[ slotid ][ vLokacijaZ ]+1.0, VehicleInfo[ slotid ][ vLokacijaA ], -1, -1, -1 );
				SetVehicleVirtualWorld( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aVW ] );
				LinkVehicleToInterior( VehicleInfo[ slotid ][ vID ], AutoSalon[ as ][ aInt ] );

				BuyCarTDControl( playerid, false );
				BojaVozilaTDControl( playerid, false );
				TogPlayerHud( playerid );
				TogglePlayerControllable( playerid, true );

				SetCameraBehindPlayer( playerid );
				CancelSelectTextDraw( playerid );
			}

		}
	}
	return true;
}
